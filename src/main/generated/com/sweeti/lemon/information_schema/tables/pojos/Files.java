/*
 * This file is generated by jOOQ.
 */
package com.sweeti.lemon.information_schema.tables.pojos;


import java.io.Serializable;
import java.time.LocalDateTime;

import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Files implements Serializable {

    private static final long serialVersionUID = 1L;

    private final Long fileId;
    private final String fileName;
    private final String fileType;
    private final String tablespaceName;
    private final String tableCatalog;
    private final String tableSchema;
    private final String tableName;
    private final String logfileGroupName;
    private final Long logfileGroupNumber;
    private final String engine;
    private final String fulltextKeys;
    private final Long deletedRows;
    private final Long updateCount;
    private final Long freeExtents;
    private final Long totalExtents;
    private final Long extentSize;
    private final ULong initialSize;
    private final ULong maximumSize;
    private final ULong autoextendSize;
    private final LocalDateTime creationTime;
    private final LocalDateTime lastUpdateTime;
    private final LocalDateTime lastAccessTime;
    private final Long recoverTime;
    private final Long transactionCounter;
    private final ULong version;
    private final String rowFormat;
    private final ULong tableRows;
    private final ULong avgRowLength;
    private final ULong dataLength;
    private final ULong maxDataLength;
    private final ULong indexLength;
    private final ULong dataFree;
    private final LocalDateTime createTime;
    private final LocalDateTime updateTime;
    private final LocalDateTime checkTime;
    private final ULong checksum;
    private final String status;
    private final String extra;

    public Files(Files value) {
        this.fileId = value.fileId;
        this.fileName = value.fileName;
        this.fileType = value.fileType;
        this.tablespaceName = value.tablespaceName;
        this.tableCatalog = value.tableCatalog;
        this.tableSchema = value.tableSchema;
        this.tableName = value.tableName;
        this.logfileGroupName = value.logfileGroupName;
        this.logfileGroupNumber = value.logfileGroupNumber;
        this.engine = value.engine;
        this.fulltextKeys = value.fulltextKeys;
        this.deletedRows = value.deletedRows;
        this.updateCount = value.updateCount;
        this.freeExtents = value.freeExtents;
        this.totalExtents = value.totalExtents;
        this.extentSize = value.extentSize;
        this.initialSize = value.initialSize;
        this.maximumSize = value.maximumSize;
        this.autoextendSize = value.autoextendSize;
        this.creationTime = value.creationTime;
        this.lastUpdateTime = value.lastUpdateTime;
        this.lastAccessTime = value.lastAccessTime;
        this.recoverTime = value.recoverTime;
        this.transactionCounter = value.transactionCounter;
        this.version = value.version;
        this.rowFormat = value.rowFormat;
        this.tableRows = value.tableRows;
        this.avgRowLength = value.avgRowLength;
        this.dataLength = value.dataLength;
        this.maxDataLength = value.maxDataLength;
        this.indexLength = value.indexLength;
        this.dataFree = value.dataFree;
        this.createTime = value.createTime;
        this.updateTime = value.updateTime;
        this.checkTime = value.checkTime;
        this.checksum = value.checksum;
        this.status = value.status;
        this.extra = value.extra;
    }

    public Files(
        Long fileId,
        String fileName,
        String fileType,
        String tablespaceName,
        String tableCatalog,
        String tableSchema,
        String tableName,
        String logfileGroupName,
        Long logfileGroupNumber,
        String engine,
        String fulltextKeys,
        Long deletedRows,
        Long updateCount,
        Long freeExtents,
        Long totalExtents,
        Long extentSize,
        ULong initialSize,
        ULong maximumSize,
        ULong autoextendSize,
        LocalDateTime creationTime,
        LocalDateTime lastUpdateTime,
        LocalDateTime lastAccessTime,
        Long recoverTime,
        Long transactionCounter,
        ULong version,
        String rowFormat,
        ULong tableRows,
        ULong avgRowLength,
        ULong dataLength,
        ULong maxDataLength,
        ULong indexLength,
        ULong dataFree,
        LocalDateTime createTime,
        LocalDateTime updateTime,
        LocalDateTime checkTime,
        ULong checksum,
        String status,
        String extra
    ) {
        this.fileId = fileId;
        this.fileName = fileName;
        this.fileType = fileType;
        this.tablespaceName = tablespaceName;
        this.tableCatalog = tableCatalog;
        this.tableSchema = tableSchema;
        this.tableName = tableName;
        this.logfileGroupName = logfileGroupName;
        this.logfileGroupNumber = logfileGroupNumber;
        this.engine = engine;
        this.fulltextKeys = fulltextKeys;
        this.deletedRows = deletedRows;
        this.updateCount = updateCount;
        this.freeExtents = freeExtents;
        this.totalExtents = totalExtents;
        this.extentSize = extentSize;
        this.initialSize = initialSize;
        this.maximumSize = maximumSize;
        this.autoextendSize = autoextendSize;
        this.creationTime = creationTime;
        this.lastUpdateTime = lastUpdateTime;
        this.lastAccessTime = lastAccessTime;
        this.recoverTime = recoverTime;
        this.transactionCounter = transactionCounter;
        this.version = version;
        this.rowFormat = rowFormat;
        this.tableRows = tableRows;
        this.avgRowLength = avgRowLength;
        this.dataLength = dataLength;
        this.maxDataLength = maxDataLength;
        this.indexLength = indexLength;
        this.dataFree = dataFree;
        this.createTime = createTime;
        this.updateTime = updateTime;
        this.checkTime = checkTime;
        this.checksum = checksum;
        this.status = status;
        this.extra = extra;
    }

    /**
     * Getter for <code>information_schema.FILES.FILE_ID</code>.
     */
    public Long getFileId() {
        return this.fileId;
    }

    /**
     * Getter for <code>information_schema.FILES.FILE_NAME</code>.
     */
    public String getFileName() {
        return this.fileName;
    }

    /**
     * Getter for <code>information_schema.FILES.FILE_TYPE</code>.
     */
    public String getFileType() {
        return this.fileType;
    }

    /**
     * Getter for <code>information_schema.FILES.TABLESPACE_NAME</code>.
     */
    public String getTablespaceName() {
        return this.tablespaceName;
    }

    /**
     * Getter for <code>information_schema.FILES.TABLE_CATALOG</code>.
     */
    public String getTableCatalog() {
        return this.tableCatalog;
    }

    /**
     * Getter for <code>information_schema.FILES.TABLE_SCHEMA</code>.
     */
    public String getTableSchema() {
        return this.tableSchema;
    }

    /**
     * Getter for <code>information_schema.FILES.TABLE_NAME</code>.
     */
    public String getTableName() {
        return this.tableName;
    }

    /**
     * Getter for <code>information_schema.FILES.LOGFILE_GROUP_NAME</code>.
     */
    public String getLogfileGroupName() {
        return this.logfileGroupName;
    }

    /**
     * Getter for <code>information_schema.FILES.LOGFILE_GROUP_NUMBER</code>.
     */
    public Long getLogfileGroupNumber() {
        return this.logfileGroupNumber;
    }

    /**
     * Getter for <code>information_schema.FILES.ENGINE</code>.
     */
    public String getEngine() {
        return this.engine;
    }

    /**
     * Getter for <code>information_schema.FILES.FULLTEXT_KEYS</code>.
     */
    public String getFulltextKeys() {
        return this.fulltextKeys;
    }

    /**
     * Getter for <code>information_schema.FILES.DELETED_ROWS</code>.
     */
    public Long getDeletedRows() {
        return this.deletedRows;
    }

    /**
     * Getter for <code>information_schema.FILES.UPDATE_COUNT</code>.
     */
    public Long getUpdateCount() {
        return this.updateCount;
    }

    /**
     * Getter for <code>information_schema.FILES.FREE_EXTENTS</code>.
     */
    public Long getFreeExtents() {
        return this.freeExtents;
    }

    /**
     * Getter for <code>information_schema.FILES.TOTAL_EXTENTS</code>.
     */
    public Long getTotalExtents() {
        return this.totalExtents;
    }

    /**
     * Getter for <code>information_schema.FILES.EXTENT_SIZE</code>.
     */
    public Long getExtentSize() {
        return this.extentSize;
    }

    /**
     * Getter for <code>information_schema.FILES.INITIAL_SIZE</code>.
     */
    public ULong getInitialSize() {
        return this.initialSize;
    }

    /**
     * Getter for <code>information_schema.FILES.MAXIMUM_SIZE</code>.
     */
    public ULong getMaximumSize() {
        return this.maximumSize;
    }

    /**
     * Getter for <code>information_schema.FILES.AUTOEXTEND_SIZE</code>.
     */
    public ULong getAutoextendSize() {
        return this.autoextendSize;
    }

    /**
     * Getter for <code>information_schema.FILES.CREATION_TIME</code>.
     */
    public LocalDateTime getCreationTime() {
        return this.creationTime;
    }

    /**
     * Getter for <code>information_schema.FILES.LAST_UPDATE_TIME</code>.
     */
    public LocalDateTime getLastUpdateTime() {
        return this.lastUpdateTime;
    }

    /**
     * Getter for <code>information_schema.FILES.LAST_ACCESS_TIME</code>.
     */
    public LocalDateTime getLastAccessTime() {
        return this.lastAccessTime;
    }

    /**
     * Getter for <code>information_schema.FILES.RECOVER_TIME</code>.
     */
    public Long getRecoverTime() {
        return this.recoverTime;
    }

    /**
     * Getter for <code>information_schema.FILES.TRANSACTION_COUNTER</code>.
     */
    public Long getTransactionCounter() {
        return this.transactionCounter;
    }

    /**
     * Getter for <code>information_schema.FILES.VERSION</code>.
     */
    public ULong getVersion() {
        return this.version;
    }

    /**
     * Getter for <code>information_schema.FILES.ROW_FORMAT</code>.
     */
    public String getRowFormat() {
        return this.rowFormat;
    }

    /**
     * Getter for <code>information_schema.FILES.TABLE_ROWS</code>.
     */
    public ULong getTableRows() {
        return this.tableRows;
    }

    /**
     * Getter for <code>information_schema.FILES.AVG_ROW_LENGTH</code>.
     */
    public ULong getAvgRowLength() {
        return this.avgRowLength;
    }

    /**
     * Getter for <code>information_schema.FILES.DATA_LENGTH</code>.
     */
    public ULong getDataLength() {
        return this.dataLength;
    }

    /**
     * Getter for <code>information_schema.FILES.MAX_DATA_LENGTH</code>.
     */
    public ULong getMaxDataLength() {
        return this.maxDataLength;
    }

    /**
     * Getter for <code>information_schema.FILES.INDEX_LENGTH</code>.
     */
    public ULong getIndexLength() {
        return this.indexLength;
    }

    /**
     * Getter for <code>information_schema.FILES.DATA_FREE</code>.
     */
    public ULong getDataFree() {
        return this.dataFree;
    }

    /**
     * Getter for <code>information_schema.FILES.CREATE_TIME</code>.
     */
    public LocalDateTime getCreateTime() {
        return this.createTime;
    }

    /**
     * Getter for <code>information_schema.FILES.UPDATE_TIME</code>.
     */
    public LocalDateTime getUpdateTime() {
        return this.updateTime;
    }

    /**
     * Getter for <code>information_schema.FILES.CHECK_TIME</code>.
     */
    public LocalDateTime getCheckTime() {
        return this.checkTime;
    }

    /**
     * Getter for <code>information_schema.FILES.CHECKSUM</code>.
     */
    public ULong getChecksum() {
        return this.checksum;
    }

    /**
     * Getter for <code>information_schema.FILES.STATUS</code>.
     */
    public String getStatus() {
        return this.status;
    }

    /**
     * Getter for <code>information_schema.FILES.EXTRA</code>.
     */
    public String getExtra() {
        return this.extra;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Files other = (Files) obj;
        if (this.fileId == null) {
            if (other.fileId != null)
                return false;
        }
        else if (!this.fileId.equals(other.fileId))
            return false;
        if (this.fileName == null) {
            if (other.fileName != null)
                return false;
        }
        else if (!this.fileName.equals(other.fileName))
            return false;
        if (this.fileType == null) {
            if (other.fileType != null)
                return false;
        }
        else if (!this.fileType.equals(other.fileType))
            return false;
        if (this.tablespaceName == null) {
            if (other.tablespaceName != null)
                return false;
        }
        else if (!this.tablespaceName.equals(other.tablespaceName))
            return false;
        if (this.tableCatalog == null) {
            if (other.tableCatalog != null)
                return false;
        }
        else if (!this.tableCatalog.equals(other.tableCatalog))
            return false;
        if (this.tableSchema == null) {
            if (other.tableSchema != null)
                return false;
        }
        else if (!this.tableSchema.equals(other.tableSchema))
            return false;
        if (this.tableName == null) {
            if (other.tableName != null)
                return false;
        }
        else if (!this.tableName.equals(other.tableName))
            return false;
        if (this.logfileGroupName == null) {
            if (other.logfileGroupName != null)
                return false;
        }
        else if (!this.logfileGroupName.equals(other.logfileGroupName))
            return false;
        if (this.logfileGroupNumber == null) {
            if (other.logfileGroupNumber != null)
                return false;
        }
        else if (!this.logfileGroupNumber.equals(other.logfileGroupNumber))
            return false;
        if (this.engine == null) {
            if (other.engine != null)
                return false;
        }
        else if (!this.engine.equals(other.engine))
            return false;
        if (this.fulltextKeys == null) {
            if (other.fulltextKeys != null)
                return false;
        }
        else if (!this.fulltextKeys.equals(other.fulltextKeys))
            return false;
        if (this.deletedRows == null) {
            if (other.deletedRows != null)
                return false;
        }
        else if (!this.deletedRows.equals(other.deletedRows))
            return false;
        if (this.updateCount == null) {
            if (other.updateCount != null)
                return false;
        }
        else if (!this.updateCount.equals(other.updateCount))
            return false;
        if (this.freeExtents == null) {
            if (other.freeExtents != null)
                return false;
        }
        else if (!this.freeExtents.equals(other.freeExtents))
            return false;
        if (this.totalExtents == null) {
            if (other.totalExtents != null)
                return false;
        }
        else if (!this.totalExtents.equals(other.totalExtents))
            return false;
        if (this.extentSize == null) {
            if (other.extentSize != null)
                return false;
        }
        else if (!this.extentSize.equals(other.extentSize))
            return false;
        if (this.initialSize == null) {
            if (other.initialSize != null)
                return false;
        }
        else if (!this.initialSize.equals(other.initialSize))
            return false;
        if (this.maximumSize == null) {
            if (other.maximumSize != null)
                return false;
        }
        else if (!this.maximumSize.equals(other.maximumSize))
            return false;
        if (this.autoextendSize == null) {
            if (other.autoextendSize != null)
                return false;
        }
        else if (!this.autoextendSize.equals(other.autoextendSize))
            return false;
        if (this.creationTime == null) {
            if (other.creationTime != null)
                return false;
        }
        else if (!this.creationTime.equals(other.creationTime))
            return false;
        if (this.lastUpdateTime == null) {
            if (other.lastUpdateTime != null)
                return false;
        }
        else if (!this.lastUpdateTime.equals(other.lastUpdateTime))
            return false;
        if (this.lastAccessTime == null) {
            if (other.lastAccessTime != null)
                return false;
        }
        else if (!this.lastAccessTime.equals(other.lastAccessTime))
            return false;
        if (this.recoverTime == null) {
            if (other.recoverTime != null)
                return false;
        }
        else if (!this.recoverTime.equals(other.recoverTime))
            return false;
        if (this.transactionCounter == null) {
            if (other.transactionCounter != null)
                return false;
        }
        else if (!this.transactionCounter.equals(other.transactionCounter))
            return false;
        if (this.version == null) {
            if (other.version != null)
                return false;
        }
        else if (!this.version.equals(other.version))
            return false;
        if (this.rowFormat == null) {
            if (other.rowFormat != null)
                return false;
        }
        else if (!this.rowFormat.equals(other.rowFormat))
            return false;
        if (this.tableRows == null) {
            if (other.tableRows != null)
                return false;
        }
        else if (!this.tableRows.equals(other.tableRows))
            return false;
        if (this.avgRowLength == null) {
            if (other.avgRowLength != null)
                return false;
        }
        else if (!this.avgRowLength.equals(other.avgRowLength))
            return false;
        if (this.dataLength == null) {
            if (other.dataLength != null)
                return false;
        }
        else if (!this.dataLength.equals(other.dataLength))
            return false;
        if (this.maxDataLength == null) {
            if (other.maxDataLength != null)
                return false;
        }
        else if (!this.maxDataLength.equals(other.maxDataLength))
            return false;
        if (this.indexLength == null) {
            if (other.indexLength != null)
                return false;
        }
        else if (!this.indexLength.equals(other.indexLength))
            return false;
        if (this.dataFree == null) {
            if (other.dataFree != null)
                return false;
        }
        else if (!this.dataFree.equals(other.dataFree))
            return false;
        if (this.createTime == null) {
            if (other.createTime != null)
                return false;
        }
        else if (!this.createTime.equals(other.createTime))
            return false;
        if (this.updateTime == null) {
            if (other.updateTime != null)
                return false;
        }
        else if (!this.updateTime.equals(other.updateTime))
            return false;
        if (this.checkTime == null) {
            if (other.checkTime != null)
                return false;
        }
        else if (!this.checkTime.equals(other.checkTime))
            return false;
        if (this.checksum == null) {
            if (other.checksum != null)
                return false;
        }
        else if (!this.checksum.equals(other.checksum))
            return false;
        if (this.status == null) {
            if (other.status != null)
                return false;
        }
        else if (!this.status.equals(other.status))
            return false;
        if (this.extra == null) {
            if (other.extra != null)
                return false;
        }
        else if (!this.extra.equals(other.extra))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.fileId == null) ? 0 : this.fileId.hashCode());
        result = prime * result + ((this.fileName == null) ? 0 : this.fileName.hashCode());
        result = prime * result + ((this.fileType == null) ? 0 : this.fileType.hashCode());
        result = prime * result + ((this.tablespaceName == null) ? 0 : this.tablespaceName.hashCode());
        result = prime * result + ((this.tableCatalog == null) ? 0 : this.tableCatalog.hashCode());
        result = prime * result + ((this.tableSchema == null) ? 0 : this.tableSchema.hashCode());
        result = prime * result + ((this.tableName == null) ? 0 : this.tableName.hashCode());
        result = prime * result + ((this.logfileGroupName == null) ? 0 : this.logfileGroupName.hashCode());
        result = prime * result + ((this.logfileGroupNumber == null) ? 0 : this.logfileGroupNumber.hashCode());
        result = prime * result + ((this.engine == null) ? 0 : this.engine.hashCode());
        result = prime * result + ((this.fulltextKeys == null) ? 0 : this.fulltextKeys.hashCode());
        result = prime * result + ((this.deletedRows == null) ? 0 : this.deletedRows.hashCode());
        result = prime * result + ((this.updateCount == null) ? 0 : this.updateCount.hashCode());
        result = prime * result + ((this.freeExtents == null) ? 0 : this.freeExtents.hashCode());
        result = prime * result + ((this.totalExtents == null) ? 0 : this.totalExtents.hashCode());
        result = prime * result + ((this.extentSize == null) ? 0 : this.extentSize.hashCode());
        result = prime * result + ((this.initialSize == null) ? 0 : this.initialSize.hashCode());
        result = prime * result + ((this.maximumSize == null) ? 0 : this.maximumSize.hashCode());
        result = prime * result + ((this.autoextendSize == null) ? 0 : this.autoextendSize.hashCode());
        result = prime * result + ((this.creationTime == null) ? 0 : this.creationTime.hashCode());
        result = prime * result + ((this.lastUpdateTime == null) ? 0 : this.lastUpdateTime.hashCode());
        result = prime * result + ((this.lastAccessTime == null) ? 0 : this.lastAccessTime.hashCode());
        result = prime * result + ((this.recoverTime == null) ? 0 : this.recoverTime.hashCode());
        result = prime * result + ((this.transactionCounter == null) ? 0 : this.transactionCounter.hashCode());
        result = prime * result + ((this.version == null) ? 0 : this.version.hashCode());
        result = prime * result + ((this.rowFormat == null) ? 0 : this.rowFormat.hashCode());
        result = prime * result + ((this.tableRows == null) ? 0 : this.tableRows.hashCode());
        result = prime * result + ((this.avgRowLength == null) ? 0 : this.avgRowLength.hashCode());
        result = prime * result + ((this.dataLength == null) ? 0 : this.dataLength.hashCode());
        result = prime * result + ((this.maxDataLength == null) ? 0 : this.maxDataLength.hashCode());
        result = prime * result + ((this.indexLength == null) ? 0 : this.indexLength.hashCode());
        result = prime * result + ((this.dataFree == null) ? 0 : this.dataFree.hashCode());
        result = prime * result + ((this.createTime == null) ? 0 : this.createTime.hashCode());
        result = prime * result + ((this.updateTime == null) ? 0 : this.updateTime.hashCode());
        result = prime * result + ((this.checkTime == null) ? 0 : this.checkTime.hashCode());
        result = prime * result + ((this.checksum == null) ? 0 : this.checksum.hashCode());
        result = prime * result + ((this.status == null) ? 0 : this.status.hashCode());
        result = prime * result + ((this.extra == null) ? 0 : this.extra.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Files (");

        sb.append(fileId);
        sb.append(", ").append(fileName);
        sb.append(", ").append(fileType);
        sb.append(", ").append(tablespaceName);
        sb.append(", ").append(tableCatalog);
        sb.append(", ").append(tableSchema);
        sb.append(", ").append(tableName);
        sb.append(", ").append(logfileGroupName);
        sb.append(", ").append(logfileGroupNumber);
        sb.append(", ").append(engine);
        sb.append(", ").append(fulltextKeys);
        sb.append(", ").append(deletedRows);
        sb.append(", ").append(updateCount);
        sb.append(", ").append(freeExtents);
        sb.append(", ").append(totalExtents);
        sb.append(", ").append(extentSize);
        sb.append(", ").append(initialSize);
        sb.append(", ").append(maximumSize);
        sb.append(", ").append(autoextendSize);
        sb.append(", ").append(creationTime);
        sb.append(", ").append(lastUpdateTime);
        sb.append(", ").append(lastAccessTime);
        sb.append(", ").append(recoverTime);
        sb.append(", ").append(transactionCounter);
        sb.append(", ").append(version);
        sb.append(", ").append(rowFormat);
        sb.append(", ").append(tableRows);
        sb.append(", ").append(avgRowLength);
        sb.append(", ").append(dataLength);
        sb.append(", ").append(maxDataLength);
        sb.append(", ").append(indexLength);
        sb.append(", ").append(dataFree);
        sb.append(", ").append(createTime);
        sb.append(", ").append(updateTime);
        sb.append(", ").append(checkTime);
        sb.append(", ").append(checksum);
        sb.append(", ").append(status);
        sb.append(", ").append(extra);

        sb.append(")");
        return sb.toString();
    }
}
