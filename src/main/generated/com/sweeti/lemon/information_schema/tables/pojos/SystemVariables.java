/*
 * This file is generated by jOOQ.
 */
package com.sweeti.lemon.information_schema.tables.pojos;


import java.io.Serializable;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SystemVariables implements Serializable {

    private static final long serialVersionUID = 1L;

    private final String variableName;
    private final String sessionValue;
    private final String globalValue;
    private final String globalValueOrigin;
    private final String defaultValue;
    private final String variableScope;
    private final String variableType;
    private final String variableComment;
    private final String numericMinValue;
    private final String numericMaxValue;
    private final String numericBlockSize;
    private final String enumValueList;
    private final String readOnly;
    private final String commandLineArgument;
    private final String globalValuePath;

    public SystemVariables(SystemVariables value) {
        this.variableName = value.variableName;
        this.sessionValue = value.sessionValue;
        this.globalValue = value.globalValue;
        this.globalValueOrigin = value.globalValueOrigin;
        this.defaultValue = value.defaultValue;
        this.variableScope = value.variableScope;
        this.variableType = value.variableType;
        this.variableComment = value.variableComment;
        this.numericMinValue = value.numericMinValue;
        this.numericMaxValue = value.numericMaxValue;
        this.numericBlockSize = value.numericBlockSize;
        this.enumValueList = value.enumValueList;
        this.readOnly = value.readOnly;
        this.commandLineArgument = value.commandLineArgument;
        this.globalValuePath = value.globalValuePath;
    }

    public SystemVariables(
        String variableName,
        String sessionValue,
        String globalValue,
        String globalValueOrigin,
        String defaultValue,
        String variableScope,
        String variableType,
        String variableComment,
        String numericMinValue,
        String numericMaxValue,
        String numericBlockSize,
        String enumValueList,
        String readOnly,
        String commandLineArgument,
        String globalValuePath
    ) {
        this.variableName = variableName;
        this.sessionValue = sessionValue;
        this.globalValue = globalValue;
        this.globalValueOrigin = globalValueOrigin;
        this.defaultValue = defaultValue;
        this.variableScope = variableScope;
        this.variableType = variableType;
        this.variableComment = variableComment;
        this.numericMinValue = numericMinValue;
        this.numericMaxValue = numericMaxValue;
        this.numericBlockSize = numericBlockSize;
        this.enumValueList = enumValueList;
        this.readOnly = readOnly;
        this.commandLineArgument = commandLineArgument;
        this.globalValuePath = globalValuePath;
    }

    /**
     * Getter for
     * <code>information_schema.SYSTEM_VARIABLES.VARIABLE_NAME</code>.
     */
    public String getVariableName() {
        return this.variableName;
    }

    /**
     * Getter for
     * <code>information_schema.SYSTEM_VARIABLES.SESSION_VALUE</code>.
     */
    public String getSessionValue() {
        return this.sessionValue;
    }

    /**
     * Getter for <code>information_schema.SYSTEM_VARIABLES.GLOBAL_VALUE</code>.
     */
    public String getGlobalValue() {
        return this.globalValue;
    }

    /**
     * Getter for
     * <code>information_schema.SYSTEM_VARIABLES.GLOBAL_VALUE_ORIGIN</code>.
     */
    public String getGlobalValueOrigin() {
        return this.globalValueOrigin;
    }

    /**
     * Getter for
     * <code>information_schema.SYSTEM_VARIABLES.DEFAULT_VALUE</code>.
     */
    public String getDefaultValue() {
        return this.defaultValue;
    }

    /**
     * Getter for
     * <code>information_schema.SYSTEM_VARIABLES.VARIABLE_SCOPE</code>.
     */
    public String getVariableScope() {
        return this.variableScope;
    }

    /**
     * Getter for
     * <code>information_schema.SYSTEM_VARIABLES.VARIABLE_TYPE</code>.
     */
    public String getVariableType() {
        return this.variableType;
    }

    /**
     * Getter for
     * <code>information_schema.SYSTEM_VARIABLES.VARIABLE_COMMENT</code>.
     */
    public String getVariableComment() {
        return this.variableComment;
    }

    /**
     * Getter for
     * <code>information_schema.SYSTEM_VARIABLES.NUMERIC_MIN_VALUE</code>.
     */
    public String getNumericMinValue() {
        return this.numericMinValue;
    }

    /**
     * Getter for
     * <code>information_schema.SYSTEM_VARIABLES.NUMERIC_MAX_VALUE</code>.
     */
    public String getNumericMaxValue() {
        return this.numericMaxValue;
    }

    /**
     * Getter for
     * <code>information_schema.SYSTEM_VARIABLES.NUMERIC_BLOCK_SIZE</code>.
     */
    public String getNumericBlockSize() {
        return this.numericBlockSize;
    }

    /**
     * Getter for
     * <code>information_schema.SYSTEM_VARIABLES.ENUM_VALUE_LIST</code>.
     */
    public String getEnumValueList() {
        return this.enumValueList;
    }

    /**
     * Getter for <code>information_schema.SYSTEM_VARIABLES.READ_ONLY</code>.
     */
    public String getReadOnly() {
        return this.readOnly;
    }

    /**
     * Getter for
     * <code>information_schema.SYSTEM_VARIABLES.COMMAND_LINE_ARGUMENT</code>.
     */
    public String getCommandLineArgument() {
        return this.commandLineArgument;
    }

    /**
     * Getter for
     * <code>information_schema.SYSTEM_VARIABLES.GLOBAL_VALUE_PATH</code>.
     */
    public String getGlobalValuePath() {
        return this.globalValuePath;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final SystemVariables other = (SystemVariables) obj;
        if (this.variableName == null) {
            if (other.variableName != null)
                return false;
        }
        else if (!this.variableName.equals(other.variableName))
            return false;
        if (this.sessionValue == null) {
            if (other.sessionValue != null)
                return false;
        }
        else if (!this.sessionValue.equals(other.sessionValue))
            return false;
        if (this.globalValue == null) {
            if (other.globalValue != null)
                return false;
        }
        else if (!this.globalValue.equals(other.globalValue))
            return false;
        if (this.globalValueOrigin == null) {
            if (other.globalValueOrigin != null)
                return false;
        }
        else if (!this.globalValueOrigin.equals(other.globalValueOrigin))
            return false;
        if (this.defaultValue == null) {
            if (other.defaultValue != null)
                return false;
        }
        else if (!this.defaultValue.equals(other.defaultValue))
            return false;
        if (this.variableScope == null) {
            if (other.variableScope != null)
                return false;
        }
        else if (!this.variableScope.equals(other.variableScope))
            return false;
        if (this.variableType == null) {
            if (other.variableType != null)
                return false;
        }
        else if (!this.variableType.equals(other.variableType))
            return false;
        if (this.variableComment == null) {
            if (other.variableComment != null)
                return false;
        }
        else if (!this.variableComment.equals(other.variableComment))
            return false;
        if (this.numericMinValue == null) {
            if (other.numericMinValue != null)
                return false;
        }
        else if (!this.numericMinValue.equals(other.numericMinValue))
            return false;
        if (this.numericMaxValue == null) {
            if (other.numericMaxValue != null)
                return false;
        }
        else if (!this.numericMaxValue.equals(other.numericMaxValue))
            return false;
        if (this.numericBlockSize == null) {
            if (other.numericBlockSize != null)
                return false;
        }
        else if (!this.numericBlockSize.equals(other.numericBlockSize))
            return false;
        if (this.enumValueList == null) {
            if (other.enumValueList != null)
                return false;
        }
        else if (!this.enumValueList.equals(other.enumValueList))
            return false;
        if (this.readOnly == null) {
            if (other.readOnly != null)
                return false;
        }
        else if (!this.readOnly.equals(other.readOnly))
            return false;
        if (this.commandLineArgument == null) {
            if (other.commandLineArgument != null)
                return false;
        }
        else if (!this.commandLineArgument.equals(other.commandLineArgument))
            return false;
        if (this.globalValuePath == null) {
            if (other.globalValuePath != null)
                return false;
        }
        else if (!this.globalValuePath.equals(other.globalValuePath))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.variableName == null) ? 0 : this.variableName.hashCode());
        result = prime * result + ((this.sessionValue == null) ? 0 : this.sessionValue.hashCode());
        result = prime * result + ((this.globalValue == null) ? 0 : this.globalValue.hashCode());
        result = prime * result + ((this.globalValueOrigin == null) ? 0 : this.globalValueOrigin.hashCode());
        result = prime * result + ((this.defaultValue == null) ? 0 : this.defaultValue.hashCode());
        result = prime * result + ((this.variableScope == null) ? 0 : this.variableScope.hashCode());
        result = prime * result + ((this.variableType == null) ? 0 : this.variableType.hashCode());
        result = prime * result + ((this.variableComment == null) ? 0 : this.variableComment.hashCode());
        result = prime * result + ((this.numericMinValue == null) ? 0 : this.numericMinValue.hashCode());
        result = prime * result + ((this.numericMaxValue == null) ? 0 : this.numericMaxValue.hashCode());
        result = prime * result + ((this.numericBlockSize == null) ? 0 : this.numericBlockSize.hashCode());
        result = prime * result + ((this.enumValueList == null) ? 0 : this.enumValueList.hashCode());
        result = prime * result + ((this.readOnly == null) ? 0 : this.readOnly.hashCode());
        result = prime * result + ((this.commandLineArgument == null) ? 0 : this.commandLineArgument.hashCode());
        result = prime * result + ((this.globalValuePath == null) ? 0 : this.globalValuePath.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("SystemVariables (");

        sb.append(variableName);
        sb.append(", ").append(sessionValue);
        sb.append(", ").append(globalValue);
        sb.append(", ").append(globalValueOrigin);
        sb.append(", ").append(defaultValue);
        sb.append(", ").append(variableScope);
        sb.append(", ").append(variableType);
        sb.append(", ").append(variableComment);
        sb.append(", ").append(numericMinValue);
        sb.append(", ").append(numericMaxValue);
        sb.append(", ").append(numericBlockSize);
        sb.append(", ").append(enumValueList);
        sb.append(", ").append(readOnly);
        sb.append(", ").append(commandLineArgument);
        sb.append(", ").append(globalValuePath);

        sb.append(")");
        return sb.toString();
    }
}
