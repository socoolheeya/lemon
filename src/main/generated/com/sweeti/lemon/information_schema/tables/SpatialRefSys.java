/*
 * This file is generated by jOOQ.
 */
package com.sweeti.lemon.information_schema.tables;


import com.sweeti.lemon.information_schema.InformationSchema;
import com.sweeti.lemon.information_schema.tables.records.SpatialRefSysRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SpatialRefSys extends TableImpl<SpatialRefSysRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>information_schema.SPATIAL_REF_SYS</code>
     */
    public static final SpatialRefSys SPATIAL_REF_SYS = new SpatialRefSys();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SpatialRefSysRecord> getRecordType() {
        return SpatialRefSysRecord.class;
    }

    /**
     * The column <code>information_schema.SPATIAL_REF_SYS.SRID</code>.
     */
    public final TableField<SpatialRefSysRecord, Short> SRID = createField(DSL.name("SRID"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>information_schema.SPATIAL_REF_SYS.AUTH_NAME</code>.
     */
    public final TableField<SpatialRefSysRecord, String> AUTH_NAME = createField(DSL.name("AUTH_NAME"), SQLDataType.VARCHAR(512).nullable(false), this, "");

    /**
     * The column <code>information_schema.SPATIAL_REF_SYS.AUTH_SRID</code>.
     */
    public final TableField<SpatialRefSysRecord, Integer> AUTH_SRID = createField(DSL.name("AUTH_SRID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>information_schema.SPATIAL_REF_SYS.SRTEXT</code>.
     */
    public final TableField<SpatialRefSysRecord, String> SRTEXT = createField(DSL.name("SRTEXT"), SQLDataType.VARCHAR(2048).nullable(false), this, "");

    private SpatialRefSys(Name alias, Table<SpatialRefSysRecord> aliased) {
        this(alias, aliased, null);
    }

    private SpatialRefSys(Name alias, Table<SpatialRefSysRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>information_schema.SPATIAL_REF_SYS</code> table
     * reference
     */
    public SpatialRefSys(String alias) {
        this(DSL.name(alias), SPATIAL_REF_SYS);
    }

    /**
     * Create an aliased <code>information_schema.SPATIAL_REF_SYS</code> table
     * reference
     */
    public SpatialRefSys(Name alias) {
        this(alias, SPATIAL_REF_SYS);
    }

    /**
     * Create a <code>information_schema.SPATIAL_REF_SYS</code> table reference
     */
    public SpatialRefSys() {
        this(DSL.name("SPATIAL_REF_SYS"), null);
    }

    public <O extends Record> SpatialRefSys(Table<O> child, ForeignKey<O, SpatialRefSysRecord> key) {
        super(child, key, SPATIAL_REF_SYS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : InformationSchema.INFORMATION_SCHEMA;
    }

    @Override
    public SpatialRefSys as(String alias) {
        return new SpatialRefSys(DSL.name(alias), this);
    }

    @Override
    public SpatialRefSys as(Name alias) {
        return new SpatialRefSys(alias, this);
    }

    @Override
    public SpatialRefSys as(Table<?> alias) {
        return new SpatialRefSys(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SpatialRefSys rename(String name) {
        return new SpatialRefSys(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SpatialRefSys rename(Name name) {
        return new SpatialRefSys(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SpatialRefSys rename(Table<?> name) {
        return new SpatialRefSys(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Short, String, Integer, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Short, ? super String, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Short, ? super String, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
