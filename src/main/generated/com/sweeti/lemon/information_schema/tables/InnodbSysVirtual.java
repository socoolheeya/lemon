/*
 * This file is generated by jOOQ.
 */
package com.sweeti.lemon.information_schema.tables;


import com.sweeti.lemon.information_schema.InformationSchema;
import com.sweeti.lemon.information_schema.tables.records.InnodbSysVirtualRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InnodbSysVirtual extends TableImpl<InnodbSysVirtualRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>information_schema.INNODB_SYS_VIRTUAL</code>
     */
    public static final InnodbSysVirtual INNODB_SYS_VIRTUAL = new InnodbSysVirtual();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InnodbSysVirtualRecord> getRecordType() {
        return InnodbSysVirtualRecord.class;
    }

    /**
     * The column <code>information_schema.INNODB_SYS_VIRTUAL.TABLE_ID</code>.
     */
    public final TableField<InnodbSysVirtualRecord, ULong> TABLE_ID = createField(DSL.name("TABLE_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>information_schema.INNODB_SYS_VIRTUAL.POS</code>.
     */
    public final TableField<InnodbSysVirtualRecord, UInteger> POS = createField(DSL.name("POS"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>information_schema.INNODB_SYS_VIRTUAL.BASE_POS</code>.
     */
    public final TableField<InnodbSysVirtualRecord, UInteger> BASE_POS = createField(DSL.name("BASE_POS"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    private InnodbSysVirtual(Name alias, Table<InnodbSysVirtualRecord> aliased) {
        this(alias, aliased, null);
    }

    private InnodbSysVirtual(Name alias, Table<InnodbSysVirtualRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>information_schema.INNODB_SYS_VIRTUAL</code>
     * table reference
     */
    public InnodbSysVirtual(String alias) {
        this(DSL.name(alias), INNODB_SYS_VIRTUAL);
    }

    /**
     * Create an aliased <code>information_schema.INNODB_SYS_VIRTUAL</code>
     * table reference
     */
    public InnodbSysVirtual(Name alias) {
        this(alias, INNODB_SYS_VIRTUAL);
    }

    /**
     * Create a <code>information_schema.INNODB_SYS_VIRTUAL</code> table
     * reference
     */
    public InnodbSysVirtual() {
        this(DSL.name("INNODB_SYS_VIRTUAL"), null);
    }

    public <O extends Record> InnodbSysVirtual(Table<O> child, ForeignKey<O, InnodbSysVirtualRecord> key) {
        super(child, key, INNODB_SYS_VIRTUAL);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : InformationSchema.INFORMATION_SCHEMA;
    }

    @Override
    public InnodbSysVirtual as(String alias) {
        return new InnodbSysVirtual(DSL.name(alias), this);
    }

    @Override
    public InnodbSysVirtual as(Name alias) {
        return new InnodbSysVirtual(alias, this);
    }

    @Override
    public InnodbSysVirtual as(Table<?> alias) {
        return new InnodbSysVirtual(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public InnodbSysVirtual rename(String name) {
        return new InnodbSysVirtual(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public InnodbSysVirtual rename(Name name) {
        return new InnodbSysVirtual(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public InnodbSysVirtual rename(Table<?> name) {
        return new InnodbSysVirtual(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<ULong, UInteger, UInteger> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super ULong, ? super UInteger, ? super UInteger, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super ULong, ? super UInteger, ? super UInteger, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
