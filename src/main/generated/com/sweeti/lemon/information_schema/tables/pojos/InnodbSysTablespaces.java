/*
 * This file is generated by jOOQ.
 */
package com.sweeti.lemon.information_schema.tables.pojos;


import java.io.Serializable;

import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InnodbSysTablespaces implements Serializable {

    private static final long serialVersionUID = 1L;

    private final UInteger space;
    private final String name;
    private final UInteger flag;
    private final String rowFormat;
    private final UInteger pageSize;
    private final String filename;
    private final UInteger fsBlockSize;
    private final ULong fileSize;
    private final ULong allocatedSize;

    public InnodbSysTablespaces(InnodbSysTablespaces value) {
        this.space = value.space;
        this.name = value.name;
        this.flag = value.flag;
        this.rowFormat = value.rowFormat;
        this.pageSize = value.pageSize;
        this.filename = value.filename;
        this.fsBlockSize = value.fsBlockSize;
        this.fileSize = value.fileSize;
        this.allocatedSize = value.allocatedSize;
    }

    public InnodbSysTablespaces(
        UInteger space,
        String name,
        UInteger flag,
        String rowFormat,
        UInteger pageSize,
        String filename,
        UInteger fsBlockSize,
        ULong fileSize,
        ULong allocatedSize
    ) {
        this.space = space;
        this.name = name;
        this.flag = flag;
        this.rowFormat = rowFormat;
        this.pageSize = pageSize;
        this.filename = filename;
        this.fsBlockSize = fsBlockSize;
        this.fileSize = fileSize;
        this.allocatedSize = allocatedSize;
    }

    /**
     * Getter for <code>information_schema.INNODB_SYS_TABLESPACES.SPACE</code>.
     */
    public UInteger getSpace() {
        return this.space;
    }

    /**
     * Getter for <code>information_schema.INNODB_SYS_TABLESPACES.NAME</code>.
     */
    public String getName() {
        return this.name;
    }

    /**
     * Getter for <code>information_schema.INNODB_SYS_TABLESPACES.FLAG</code>.
     */
    public UInteger getFlag() {
        return this.flag;
    }

    /**
     * Getter for
     * <code>information_schema.INNODB_SYS_TABLESPACES.ROW_FORMAT</code>.
     */
    public String getRowFormat() {
        return this.rowFormat;
    }

    /**
     * Getter for
     * <code>information_schema.INNODB_SYS_TABLESPACES.PAGE_SIZE</code>.
     */
    public UInteger getPageSize() {
        return this.pageSize;
    }

    /**
     * Getter for
     * <code>information_schema.INNODB_SYS_TABLESPACES.FILENAME</code>.
     */
    public String getFilename() {
        return this.filename;
    }

    /**
     * Getter for
     * <code>information_schema.INNODB_SYS_TABLESPACES.FS_BLOCK_SIZE</code>.
     */
    public UInteger getFsBlockSize() {
        return this.fsBlockSize;
    }

    /**
     * Getter for
     * <code>information_schema.INNODB_SYS_TABLESPACES.FILE_SIZE</code>.
     */
    public ULong getFileSize() {
        return this.fileSize;
    }

    /**
     * Getter for
     * <code>information_schema.INNODB_SYS_TABLESPACES.ALLOCATED_SIZE</code>.
     */
    public ULong getAllocatedSize() {
        return this.allocatedSize;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final InnodbSysTablespaces other = (InnodbSysTablespaces) obj;
        if (this.space == null) {
            if (other.space != null)
                return false;
        }
        else if (!this.space.equals(other.space))
            return false;
        if (this.name == null) {
            if (other.name != null)
                return false;
        }
        else if (!this.name.equals(other.name))
            return false;
        if (this.flag == null) {
            if (other.flag != null)
                return false;
        }
        else if (!this.flag.equals(other.flag))
            return false;
        if (this.rowFormat == null) {
            if (other.rowFormat != null)
                return false;
        }
        else if (!this.rowFormat.equals(other.rowFormat))
            return false;
        if (this.pageSize == null) {
            if (other.pageSize != null)
                return false;
        }
        else if (!this.pageSize.equals(other.pageSize))
            return false;
        if (this.filename == null) {
            if (other.filename != null)
                return false;
        }
        else if (!this.filename.equals(other.filename))
            return false;
        if (this.fsBlockSize == null) {
            if (other.fsBlockSize != null)
                return false;
        }
        else if (!this.fsBlockSize.equals(other.fsBlockSize))
            return false;
        if (this.fileSize == null) {
            if (other.fileSize != null)
                return false;
        }
        else if (!this.fileSize.equals(other.fileSize))
            return false;
        if (this.allocatedSize == null) {
            if (other.allocatedSize != null)
                return false;
        }
        else if (!this.allocatedSize.equals(other.allocatedSize))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.space == null) ? 0 : this.space.hashCode());
        result = prime * result + ((this.name == null) ? 0 : this.name.hashCode());
        result = prime * result + ((this.flag == null) ? 0 : this.flag.hashCode());
        result = prime * result + ((this.rowFormat == null) ? 0 : this.rowFormat.hashCode());
        result = prime * result + ((this.pageSize == null) ? 0 : this.pageSize.hashCode());
        result = prime * result + ((this.filename == null) ? 0 : this.filename.hashCode());
        result = prime * result + ((this.fsBlockSize == null) ? 0 : this.fsBlockSize.hashCode());
        result = prime * result + ((this.fileSize == null) ? 0 : this.fileSize.hashCode());
        result = prime * result + ((this.allocatedSize == null) ? 0 : this.allocatedSize.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("InnodbSysTablespaces (");

        sb.append(space);
        sb.append(", ").append(name);
        sb.append(", ").append(flag);
        sb.append(", ").append(rowFormat);
        sb.append(", ").append(pageSize);
        sb.append(", ").append(filename);
        sb.append(", ").append(fsBlockSize);
        sb.append(", ").append(fileSize);
        sb.append(", ").append(allocatedSize);

        sb.append(")");
        return sb.toString();
    }
}
