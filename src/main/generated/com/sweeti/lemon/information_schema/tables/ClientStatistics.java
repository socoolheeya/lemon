/*
 * This file is generated by jOOQ.
 */
package com.sweeti.lemon.information_schema.tables;


import com.sweeti.lemon.information_schema.InformationSchema;
import com.sweeti.lemon.information_schema.tables.records.ClientStatisticsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ClientStatistics extends TableImpl<ClientStatisticsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>information_schema.CLIENT_STATISTICS</code>
     */
    public static final ClientStatistics CLIENT_STATISTICS = new ClientStatistics();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ClientStatisticsRecord> getRecordType() {
        return ClientStatisticsRecord.class;
    }

    /**
     * The column <code>information_schema.CLIENT_STATISTICS.CLIENT</code>.
     */
    public final TableField<ClientStatisticsRecord, String> CLIENT = createField(DSL.name("CLIENT"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column
     * <code>information_schema.CLIENT_STATISTICS.TOTAL_CONNECTIONS</code>.
     */
    public final TableField<ClientStatisticsRecord, Long> TOTAL_CONNECTIONS = createField(DSL.name("TOTAL_CONNECTIONS"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>information_schema.CLIENT_STATISTICS.CONCURRENT_CONNECTIONS</code>.
     */
    public final TableField<ClientStatisticsRecord, Long> CONCURRENT_CONNECTIONS = createField(DSL.name("CONCURRENT_CONNECTIONS"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>information_schema.CLIENT_STATISTICS.CONNECTED_TIME</code>.
     */
    public final TableField<ClientStatisticsRecord, Long> CONNECTED_TIME = createField(DSL.name("CONNECTED_TIME"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>information_schema.CLIENT_STATISTICS.BUSY_TIME</code>.
     */
    public final TableField<ClientStatisticsRecord, Double> BUSY_TIME = createField(DSL.name("BUSY_TIME"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>information_schema.CLIENT_STATISTICS.CPU_TIME</code>.
     */
    public final TableField<ClientStatisticsRecord, Double> CPU_TIME = createField(DSL.name("CPU_TIME"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column
     * <code>information_schema.CLIENT_STATISTICS.BYTES_RECEIVED</code>.
     */
    public final TableField<ClientStatisticsRecord, Long> BYTES_RECEIVED = createField(DSL.name("BYTES_RECEIVED"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>information_schema.CLIENT_STATISTICS.BYTES_SENT</code>.
     */
    public final TableField<ClientStatisticsRecord, Long> BYTES_SENT = createField(DSL.name("BYTES_SENT"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>information_schema.CLIENT_STATISTICS.BINLOG_BYTES_WRITTEN</code>.
     */
    public final TableField<ClientStatisticsRecord, Long> BINLOG_BYTES_WRITTEN = createField(DSL.name("BINLOG_BYTES_WRITTEN"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>information_schema.CLIENT_STATISTICS.ROWS_READ</code>.
     */
    public final TableField<ClientStatisticsRecord, Long> ROWS_READ = createField(DSL.name("ROWS_READ"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>information_schema.CLIENT_STATISTICS.ROWS_SENT</code>.
     */
    public final TableField<ClientStatisticsRecord, Long> ROWS_SENT = createField(DSL.name("ROWS_SENT"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>information_schema.CLIENT_STATISTICS.ROWS_DELETED</code>.
     */
    public final TableField<ClientStatisticsRecord, Long> ROWS_DELETED = createField(DSL.name("ROWS_DELETED"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>information_schema.CLIENT_STATISTICS.ROWS_INSERTED</code>.
     */
    public final TableField<ClientStatisticsRecord, Long> ROWS_INSERTED = createField(DSL.name("ROWS_INSERTED"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>information_schema.CLIENT_STATISTICS.ROWS_UPDATED</code>.
     */
    public final TableField<ClientStatisticsRecord, Long> ROWS_UPDATED = createField(DSL.name("ROWS_UPDATED"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>information_schema.CLIENT_STATISTICS.SELECT_COMMANDS</code>.
     */
    public final TableField<ClientStatisticsRecord, Long> SELECT_COMMANDS = createField(DSL.name("SELECT_COMMANDS"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>information_schema.CLIENT_STATISTICS.UPDATE_COMMANDS</code>.
     */
    public final TableField<ClientStatisticsRecord, Long> UPDATE_COMMANDS = createField(DSL.name("UPDATE_COMMANDS"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>information_schema.CLIENT_STATISTICS.OTHER_COMMANDS</code>.
     */
    public final TableField<ClientStatisticsRecord, Long> OTHER_COMMANDS = createField(DSL.name("OTHER_COMMANDS"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>information_schema.CLIENT_STATISTICS.COMMIT_TRANSACTIONS</code>.
     */
    public final TableField<ClientStatisticsRecord, Long> COMMIT_TRANSACTIONS = createField(DSL.name("COMMIT_TRANSACTIONS"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>information_schema.CLIENT_STATISTICS.ROLLBACK_TRANSACTIONS</code>.
     */
    public final TableField<ClientStatisticsRecord, Long> ROLLBACK_TRANSACTIONS = createField(DSL.name("ROLLBACK_TRANSACTIONS"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>information_schema.CLIENT_STATISTICS.DENIED_CONNECTIONS</code>.
     */
    public final TableField<ClientStatisticsRecord, Long> DENIED_CONNECTIONS = createField(DSL.name("DENIED_CONNECTIONS"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>information_schema.CLIENT_STATISTICS.LOST_CONNECTIONS</code>.
     */
    public final TableField<ClientStatisticsRecord, Long> LOST_CONNECTIONS = createField(DSL.name("LOST_CONNECTIONS"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>information_schema.CLIENT_STATISTICS.ACCESS_DENIED</code>.
     */
    public final TableField<ClientStatisticsRecord, Long> ACCESS_DENIED = createField(DSL.name("ACCESS_DENIED"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>information_schema.CLIENT_STATISTICS.EMPTY_QUERIES</code>.
     */
    public final TableField<ClientStatisticsRecord, Long> EMPTY_QUERIES = createField(DSL.name("EMPTY_QUERIES"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>information_schema.CLIENT_STATISTICS.TOTAL_SSL_CONNECTIONS</code>.
     */
    public final TableField<ClientStatisticsRecord, ULong> TOTAL_SSL_CONNECTIONS = createField(DSL.name("TOTAL_SSL_CONNECTIONS"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column
     * <code>information_schema.CLIENT_STATISTICS.MAX_STATEMENT_TIME_EXCEEDED</code>.
     */
    public final TableField<ClientStatisticsRecord, Long> MAX_STATEMENT_TIME_EXCEEDED = createField(DSL.name("MAX_STATEMENT_TIME_EXCEEDED"), SQLDataType.BIGINT.nullable(false), this, "");

    private ClientStatistics(Name alias, Table<ClientStatisticsRecord> aliased) {
        this(alias, aliased, null);
    }

    private ClientStatistics(Name alias, Table<ClientStatisticsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>information_schema.CLIENT_STATISTICS</code> table
     * reference
     */
    public ClientStatistics(String alias) {
        this(DSL.name(alias), CLIENT_STATISTICS);
    }

    /**
     * Create an aliased <code>information_schema.CLIENT_STATISTICS</code> table
     * reference
     */
    public ClientStatistics(Name alias) {
        this(alias, CLIENT_STATISTICS);
    }

    /**
     * Create a <code>information_schema.CLIENT_STATISTICS</code> table
     * reference
     */
    public ClientStatistics() {
        this(DSL.name("CLIENT_STATISTICS"), null);
    }

    public <O extends Record> ClientStatistics(Table<O> child, ForeignKey<O, ClientStatisticsRecord> key) {
        super(child, key, CLIENT_STATISTICS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : InformationSchema.INFORMATION_SCHEMA;
    }

    @Override
    public ClientStatistics as(String alias) {
        return new ClientStatistics(DSL.name(alias), this);
    }

    @Override
    public ClientStatistics as(Name alias) {
        return new ClientStatistics(alias, this);
    }

    @Override
    public ClientStatistics as(Table<?> alias) {
        return new ClientStatistics(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ClientStatistics rename(String name) {
        return new ClientStatistics(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ClientStatistics rename(Name name) {
        return new ClientStatistics(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ClientStatistics rename(Table<?> name) {
        return new ClientStatistics(name.getQualifiedName(), null);
    }
}
