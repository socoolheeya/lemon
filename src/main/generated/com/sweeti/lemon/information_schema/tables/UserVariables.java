/*
 * This file is generated by jOOQ.
 */
package com.sweeti.lemon.information_schema.tables;


import com.sweeti.lemon.information_schema.InformationSchema;
import com.sweeti.lemon.information_schema.tables.records.UserVariablesRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserVariables extends TableImpl<UserVariablesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>information_schema.user_variables</code>
     */
    public static final UserVariables USER_VARIABLES = new UserVariables();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserVariablesRecord> getRecordType() {
        return UserVariablesRecord.class;
    }

    /**
     * The column <code>information_schema.user_variables.VARIABLE_NAME</code>.
     */
    public final TableField<UserVariablesRecord, String> VARIABLE_NAME = createField(DSL.name("VARIABLE_NAME"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>information_schema.user_variables.VARIABLE_VALUE</code>.
     */
    public final TableField<UserVariablesRecord, String> VARIABLE_VALUE = createField(DSL.name("VARIABLE_VALUE"), SQLDataType.VARCHAR(2048), this, "");

    /**
     * The column <code>information_schema.user_variables.VARIABLE_TYPE</code>.
     */
    public final TableField<UserVariablesRecord, String> VARIABLE_TYPE = createField(DSL.name("VARIABLE_TYPE"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column
     * <code>information_schema.user_variables.CHARACTER_SET_NAME</code>.
     */
    public final TableField<UserVariablesRecord, String> CHARACTER_SET_NAME = createField(DSL.name("CHARACTER_SET_NAME"), SQLDataType.VARCHAR(32), this, "");

    private UserVariables(Name alias, Table<UserVariablesRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserVariables(Name alias, Table<UserVariablesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>information_schema.user_variables</code> table
     * reference
     */
    public UserVariables(String alias) {
        this(DSL.name(alias), USER_VARIABLES);
    }

    /**
     * Create an aliased <code>information_schema.user_variables</code> table
     * reference
     */
    public UserVariables(Name alias) {
        this(alias, USER_VARIABLES);
    }

    /**
     * Create a <code>information_schema.user_variables</code> table reference
     */
    public UserVariables() {
        this(DSL.name("user_variables"), null);
    }

    public <O extends Record> UserVariables(Table<O> child, ForeignKey<O, UserVariablesRecord> key) {
        super(child, key, USER_VARIABLES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : InformationSchema.INFORMATION_SCHEMA;
    }

    @Override
    public UserVariables as(String alias) {
        return new UserVariables(DSL.name(alias), this);
    }

    @Override
    public UserVariables as(Name alias) {
        return new UserVariables(alias, this);
    }

    @Override
    public UserVariables as(Table<?> alias) {
        return new UserVariables(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserVariables rename(String name) {
        return new UserVariables(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserVariables rename(Name name) {
        return new UserVariables(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserVariables rename(Table<?> name) {
        return new UserVariables(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
