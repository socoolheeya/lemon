/*
 * This file is generated by jOOQ.
 */
package com.sweeti.lemon.information_schema.tables.pojos;


import java.io.Serializable;

import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Columns implements Serializable {

    private static final long serialVersionUID = 1L;

    private final String tableCatalog;
    private final String tableSchema;
    private final String tableName;
    private final String columnName;
    private final ULong ordinalPosition;
    private final String columnDefault;
    private final String isNullable;
    private final String dataType;
    private final ULong characterMaximumLength;
    private final ULong characterOctetLength;
    private final ULong numericPrecision;
    private final ULong numericScale;
    private final ULong datetimePrecision;
    private final String characterSetName;
    private final String collationName;
    private final String columnType;
    private final String columnKey;
    private final String extra;
    private final String privileges;
    private final String columnComment;
    private final String isGenerated;
    private final String generationExpression;

    public Columns(Columns value) {
        this.tableCatalog = value.tableCatalog;
        this.tableSchema = value.tableSchema;
        this.tableName = value.tableName;
        this.columnName = value.columnName;
        this.ordinalPosition = value.ordinalPosition;
        this.columnDefault = value.columnDefault;
        this.isNullable = value.isNullable;
        this.dataType = value.dataType;
        this.characterMaximumLength = value.characterMaximumLength;
        this.characterOctetLength = value.characterOctetLength;
        this.numericPrecision = value.numericPrecision;
        this.numericScale = value.numericScale;
        this.datetimePrecision = value.datetimePrecision;
        this.characterSetName = value.characterSetName;
        this.collationName = value.collationName;
        this.columnType = value.columnType;
        this.columnKey = value.columnKey;
        this.extra = value.extra;
        this.privileges = value.privileges;
        this.columnComment = value.columnComment;
        this.isGenerated = value.isGenerated;
        this.generationExpression = value.generationExpression;
    }

    public Columns(
        String tableCatalog,
        String tableSchema,
        String tableName,
        String columnName,
        ULong ordinalPosition,
        String columnDefault,
        String isNullable,
        String dataType,
        ULong characterMaximumLength,
        ULong characterOctetLength,
        ULong numericPrecision,
        ULong numericScale,
        ULong datetimePrecision,
        String characterSetName,
        String collationName,
        String columnType,
        String columnKey,
        String extra,
        String privileges,
        String columnComment,
        String isGenerated,
        String generationExpression
    ) {
        this.tableCatalog = tableCatalog;
        this.tableSchema = tableSchema;
        this.tableName = tableName;
        this.columnName = columnName;
        this.ordinalPosition = ordinalPosition;
        this.columnDefault = columnDefault;
        this.isNullable = isNullable;
        this.dataType = dataType;
        this.characterMaximumLength = characterMaximumLength;
        this.characterOctetLength = characterOctetLength;
        this.numericPrecision = numericPrecision;
        this.numericScale = numericScale;
        this.datetimePrecision = datetimePrecision;
        this.characterSetName = characterSetName;
        this.collationName = collationName;
        this.columnType = columnType;
        this.columnKey = columnKey;
        this.extra = extra;
        this.privileges = privileges;
        this.columnComment = columnComment;
        this.isGenerated = isGenerated;
        this.generationExpression = generationExpression;
    }

    /**
     * Getter for <code>information_schema.COLUMNS.TABLE_CATALOG</code>.
     */
    public String getTableCatalog() {
        return this.tableCatalog;
    }

    /**
     * Getter for <code>information_schema.COLUMNS.TABLE_SCHEMA</code>.
     */
    public String getTableSchema() {
        return this.tableSchema;
    }

    /**
     * Getter for <code>information_schema.COLUMNS.TABLE_NAME</code>.
     */
    public String getTableName() {
        return this.tableName;
    }

    /**
     * Getter for <code>information_schema.COLUMNS.COLUMN_NAME</code>.
     */
    public String getColumnName() {
        return this.columnName;
    }

    /**
     * Getter for <code>information_schema.COLUMNS.ORDINAL_POSITION</code>.
     */
    public ULong getOrdinalPosition() {
        return this.ordinalPosition;
    }

    /**
     * Getter for <code>information_schema.COLUMNS.COLUMN_DEFAULT</code>.
     */
    public String getColumnDefault() {
        return this.columnDefault;
    }

    /**
     * Getter for <code>information_schema.COLUMNS.IS_NULLABLE</code>.
     */
    public String getIsNullable() {
        return this.isNullable;
    }

    /**
     * Getter for <code>information_schema.COLUMNS.DATA_TYPE</code>.
     */
    public String getDataType() {
        return this.dataType;
    }

    /**
     * Getter for
     * <code>information_schema.COLUMNS.CHARACTER_MAXIMUM_LENGTH</code>.
     */
    public ULong getCharacterMaximumLength() {
        return this.characterMaximumLength;
    }

    /**
     * Getter for
     * <code>information_schema.COLUMNS.CHARACTER_OCTET_LENGTH</code>.
     */
    public ULong getCharacterOctetLength() {
        return this.characterOctetLength;
    }

    /**
     * Getter for <code>information_schema.COLUMNS.NUMERIC_PRECISION</code>.
     */
    public ULong getNumericPrecision() {
        return this.numericPrecision;
    }

    /**
     * Getter for <code>information_schema.COLUMNS.NUMERIC_SCALE</code>.
     */
    public ULong getNumericScale() {
        return this.numericScale;
    }

    /**
     * Getter for <code>information_schema.COLUMNS.DATETIME_PRECISION</code>.
     */
    public ULong getDatetimePrecision() {
        return this.datetimePrecision;
    }

    /**
     * Getter for <code>information_schema.COLUMNS.CHARACTER_SET_NAME</code>.
     */
    public String getCharacterSetName() {
        return this.characterSetName;
    }

    /**
     * Getter for <code>information_schema.COLUMNS.COLLATION_NAME</code>.
     */
    public String getCollationName() {
        return this.collationName;
    }

    /**
     * Getter for <code>information_schema.COLUMNS.COLUMN_TYPE</code>.
     */
    public String getColumnType() {
        return this.columnType;
    }

    /**
     * Getter for <code>information_schema.COLUMNS.COLUMN_KEY</code>.
     */
    public String getColumnKey() {
        return this.columnKey;
    }

    /**
     * Getter for <code>information_schema.COLUMNS.EXTRA</code>.
     */
    public String getExtra() {
        return this.extra;
    }

    /**
     * Getter for <code>information_schema.COLUMNS.PRIVILEGES</code>.
     */
    public String getPrivileges() {
        return this.privileges;
    }

    /**
     * Getter for <code>information_schema.COLUMNS.COLUMN_COMMENT</code>.
     */
    public String getColumnComment() {
        return this.columnComment;
    }

    /**
     * Getter for <code>information_schema.COLUMNS.IS_GENERATED</code>.
     */
    public String getIsGenerated() {
        return this.isGenerated;
    }

    /**
     * Getter for <code>information_schema.COLUMNS.GENERATION_EXPRESSION</code>.
     */
    public String getGenerationExpression() {
        return this.generationExpression;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Columns other = (Columns) obj;
        if (this.tableCatalog == null) {
            if (other.tableCatalog != null)
                return false;
        }
        else if (!this.tableCatalog.equals(other.tableCatalog))
            return false;
        if (this.tableSchema == null) {
            if (other.tableSchema != null)
                return false;
        }
        else if (!this.tableSchema.equals(other.tableSchema))
            return false;
        if (this.tableName == null) {
            if (other.tableName != null)
                return false;
        }
        else if (!this.tableName.equals(other.tableName))
            return false;
        if (this.columnName == null) {
            if (other.columnName != null)
                return false;
        }
        else if (!this.columnName.equals(other.columnName))
            return false;
        if (this.ordinalPosition == null) {
            if (other.ordinalPosition != null)
                return false;
        }
        else if (!this.ordinalPosition.equals(other.ordinalPosition))
            return false;
        if (this.columnDefault == null) {
            if (other.columnDefault != null)
                return false;
        }
        else if (!this.columnDefault.equals(other.columnDefault))
            return false;
        if (this.isNullable == null) {
            if (other.isNullable != null)
                return false;
        }
        else if (!this.isNullable.equals(other.isNullable))
            return false;
        if (this.dataType == null) {
            if (other.dataType != null)
                return false;
        }
        else if (!this.dataType.equals(other.dataType))
            return false;
        if (this.characterMaximumLength == null) {
            if (other.characterMaximumLength != null)
                return false;
        }
        else if (!this.characterMaximumLength.equals(other.characterMaximumLength))
            return false;
        if (this.characterOctetLength == null) {
            if (other.characterOctetLength != null)
                return false;
        }
        else if (!this.characterOctetLength.equals(other.characterOctetLength))
            return false;
        if (this.numericPrecision == null) {
            if (other.numericPrecision != null)
                return false;
        }
        else if (!this.numericPrecision.equals(other.numericPrecision))
            return false;
        if (this.numericScale == null) {
            if (other.numericScale != null)
                return false;
        }
        else if (!this.numericScale.equals(other.numericScale))
            return false;
        if (this.datetimePrecision == null) {
            if (other.datetimePrecision != null)
                return false;
        }
        else if (!this.datetimePrecision.equals(other.datetimePrecision))
            return false;
        if (this.characterSetName == null) {
            if (other.characterSetName != null)
                return false;
        }
        else if (!this.characterSetName.equals(other.characterSetName))
            return false;
        if (this.collationName == null) {
            if (other.collationName != null)
                return false;
        }
        else if (!this.collationName.equals(other.collationName))
            return false;
        if (this.columnType == null) {
            if (other.columnType != null)
                return false;
        }
        else if (!this.columnType.equals(other.columnType))
            return false;
        if (this.columnKey == null) {
            if (other.columnKey != null)
                return false;
        }
        else if (!this.columnKey.equals(other.columnKey))
            return false;
        if (this.extra == null) {
            if (other.extra != null)
                return false;
        }
        else if (!this.extra.equals(other.extra))
            return false;
        if (this.privileges == null) {
            if (other.privileges != null)
                return false;
        }
        else if (!this.privileges.equals(other.privileges))
            return false;
        if (this.columnComment == null) {
            if (other.columnComment != null)
                return false;
        }
        else if (!this.columnComment.equals(other.columnComment))
            return false;
        if (this.isGenerated == null) {
            if (other.isGenerated != null)
                return false;
        }
        else if (!this.isGenerated.equals(other.isGenerated))
            return false;
        if (this.generationExpression == null) {
            if (other.generationExpression != null)
                return false;
        }
        else if (!this.generationExpression.equals(other.generationExpression))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.tableCatalog == null) ? 0 : this.tableCatalog.hashCode());
        result = prime * result + ((this.tableSchema == null) ? 0 : this.tableSchema.hashCode());
        result = prime * result + ((this.tableName == null) ? 0 : this.tableName.hashCode());
        result = prime * result + ((this.columnName == null) ? 0 : this.columnName.hashCode());
        result = prime * result + ((this.ordinalPosition == null) ? 0 : this.ordinalPosition.hashCode());
        result = prime * result + ((this.columnDefault == null) ? 0 : this.columnDefault.hashCode());
        result = prime * result + ((this.isNullable == null) ? 0 : this.isNullable.hashCode());
        result = prime * result + ((this.dataType == null) ? 0 : this.dataType.hashCode());
        result = prime * result + ((this.characterMaximumLength == null) ? 0 : this.characterMaximumLength.hashCode());
        result = prime * result + ((this.characterOctetLength == null) ? 0 : this.characterOctetLength.hashCode());
        result = prime * result + ((this.numericPrecision == null) ? 0 : this.numericPrecision.hashCode());
        result = prime * result + ((this.numericScale == null) ? 0 : this.numericScale.hashCode());
        result = prime * result + ((this.datetimePrecision == null) ? 0 : this.datetimePrecision.hashCode());
        result = prime * result + ((this.characterSetName == null) ? 0 : this.characterSetName.hashCode());
        result = prime * result + ((this.collationName == null) ? 0 : this.collationName.hashCode());
        result = prime * result + ((this.columnType == null) ? 0 : this.columnType.hashCode());
        result = prime * result + ((this.columnKey == null) ? 0 : this.columnKey.hashCode());
        result = prime * result + ((this.extra == null) ? 0 : this.extra.hashCode());
        result = prime * result + ((this.privileges == null) ? 0 : this.privileges.hashCode());
        result = prime * result + ((this.columnComment == null) ? 0 : this.columnComment.hashCode());
        result = prime * result + ((this.isGenerated == null) ? 0 : this.isGenerated.hashCode());
        result = prime * result + ((this.generationExpression == null) ? 0 : this.generationExpression.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Columns (");

        sb.append(tableCatalog);
        sb.append(", ").append(tableSchema);
        sb.append(", ").append(tableName);
        sb.append(", ").append(columnName);
        sb.append(", ").append(ordinalPosition);
        sb.append(", ").append(columnDefault);
        sb.append(", ").append(isNullable);
        sb.append(", ").append(dataType);
        sb.append(", ").append(characterMaximumLength);
        sb.append(", ").append(characterOctetLength);
        sb.append(", ").append(numericPrecision);
        sb.append(", ").append(numericScale);
        sb.append(", ").append(datetimePrecision);
        sb.append(", ").append(characterSetName);
        sb.append(", ").append(collationName);
        sb.append(", ").append(columnType);
        sb.append(", ").append(columnKey);
        sb.append(", ").append(extra);
        sb.append(", ").append(privileges);
        sb.append(", ").append(columnComment);
        sb.append(", ").append(isGenerated);
        sb.append(", ").append(generationExpression);

        sb.append(")");
        return sb.toString();
    }
}
