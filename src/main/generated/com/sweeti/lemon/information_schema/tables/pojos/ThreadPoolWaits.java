/*
 * This file is generated by jOOQ.
 */
package com.sweeti.lemon.information_schema.tables.pojos;


import java.io.Serializable;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ThreadPoolWaits implements Serializable {

    private static final long serialVersionUID = 1L;

    private final String reason;
    private final Long count;

    public ThreadPoolWaits(ThreadPoolWaits value) {
        this.reason = value.reason;
        this.count = value.count;
    }

    public ThreadPoolWaits(
        String reason,
        Long count
    ) {
        this.reason = reason;
        this.count = count;
    }

    /**
     * Getter for <code>information_schema.THREAD_POOL_WAITS.REASON</code>.
     */
    public String getReason() {
        return this.reason;
    }

    /**
     * Getter for <code>information_schema.THREAD_POOL_WAITS.COUNT</code>.
     */
    public Long getCount() {
        return this.count;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final ThreadPoolWaits other = (ThreadPoolWaits) obj;
        if (this.reason == null) {
            if (other.reason != null)
                return false;
        }
        else if (!this.reason.equals(other.reason))
            return false;
        if (this.count == null) {
            if (other.count != null)
                return false;
        }
        else if (!this.count.equals(other.count))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.reason == null) ? 0 : this.reason.hashCode());
        result = prime * result + ((this.count == null) ? 0 : this.count.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("ThreadPoolWaits (");

        sb.append(reason);
        sb.append(", ").append(count);

        sb.append(")");
        return sb.toString();
    }
}
