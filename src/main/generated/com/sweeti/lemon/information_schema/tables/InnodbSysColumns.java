/*
 * This file is generated by jOOQ.
 */
package com.sweeti.lemon.information_schema.tables;


import com.sweeti.lemon.information_schema.InformationSchema;
import com.sweeti.lemon.information_schema.tables.records.InnodbSysColumnsRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InnodbSysColumns extends TableImpl<InnodbSysColumnsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>information_schema.INNODB_SYS_COLUMNS</code>
     */
    public static final InnodbSysColumns INNODB_SYS_COLUMNS = new InnodbSysColumns();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InnodbSysColumnsRecord> getRecordType() {
        return InnodbSysColumnsRecord.class;
    }

    /**
     * The column <code>information_schema.INNODB_SYS_COLUMNS.TABLE_ID</code>.
     */
    public final TableField<InnodbSysColumnsRecord, ULong> TABLE_ID = createField(DSL.name("TABLE_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>information_schema.INNODB_SYS_COLUMNS.NAME</code>.
     */
    public final TableField<InnodbSysColumnsRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>information_schema.INNODB_SYS_COLUMNS.POS</code>.
     */
    public final TableField<InnodbSysColumnsRecord, ULong> POS = createField(DSL.name("POS"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>information_schema.INNODB_SYS_COLUMNS.MTYPE</code>.
     */
    public final TableField<InnodbSysColumnsRecord, Integer> MTYPE = createField(DSL.name("MTYPE"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>information_schema.INNODB_SYS_COLUMNS.PRTYPE</code>.
     */
    public final TableField<InnodbSysColumnsRecord, Integer> PRTYPE = createField(DSL.name("PRTYPE"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>information_schema.INNODB_SYS_COLUMNS.LEN</code>.
     */
    public final TableField<InnodbSysColumnsRecord, Integer> LEN = createField(DSL.name("LEN"), SQLDataType.INTEGER.nullable(false), this, "");

    private InnodbSysColumns(Name alias, Table<InnodbSysColumnsRecord> aliased) {
        this(alias, aliased, null);
    }

    private InnodbSysColumns(Name alias, Table<InnodbSysColumnsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>information_schema.INNODB_SYS_COLUMNS</code>
     * table reference
     */
    public InnodbSysColumns(String alias) {
        this(DSL.name(alias), INNODB_SYS_COLUMNS);
    }

    /**
     * Create an aliased <code>information_schema.INNODB_SYS_COLUMNS</code>
     * table reference
     */
    public InnodbSysColumns(Name alias) {
        this(alias, INNODB_SYS_COLUMNS);
    }

    /**
     * Create a <code>information_schema.INNODB_SYS_COLUMNS</code> table
     * reference
     */
    public InnodbSysColumns() {
        this(DSL.name("INNODB_SYS_COLUMNS"), null);
    }

    public <O extends Record> InnodbSysColumns(Table<O> child, ForeignKey<O, InnodbSysColumnsRecord> key) {
        super(child, key, INNODB_SYS_COLUMNS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : InformationSchema.INFORMATION_SCHEMA;
    }

    @Override
    public InnodbSysColumns as(String alias) {
        return new InnodbSysColumns(DSL.name(alias), this);
    }

    @Override
    public InnodbSysColumns as(Name alias) {
        return new InnodbSysColumns(alias, this);
    }

    @Override
    public InnodbSysColumns as(Table<?> alias) {
        return new InnodbSysColumns(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public InnodbSysColumns rename(String name) {
        return new InnodbSysColumns(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public InnodbSysColumns rename(Name name) {
        return new InnodbSysColumns(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public InnodbSysColumns rename(Table<?> name) {
        return new InnodbSysColumns(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<ULong, String, ULong, Integer, Integer, Integer> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super ULong, ? super String, ? super ULong, ? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super ULong, ? super String, ? super ULong, ? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
