/*
 * This file is generated by jOOQ.
 */
package com.sweeti.lemon.information_schema.tables.records;


import com.sweeti.lemon.information_schema.enums.InnodbLocksLockMode;
import com.sweeti.lemon.information_schema.enums.InnodbLocksLockType;
import com.sweeti.lemon.information_schema.tables.InnodbLocks;

import org.jooq.Field;
import org.jooq.Record10;
import org.jooq.Row10;
import org.jooq.impl.TableRecordImpl;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InnodbLocksRecord extends TableRecordImpl<InnodbLocksRecord> implements Record10<String, ULong, InnodbLocksLockMode, InnodbLocksLockType, String, String, UInteger, UInteger, UInteger, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>information_schema.INNODB_LOCKS.lock_id</code>.
     */
    public InnodbLocksRecord setLockId(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>information_schema.INNODB_LOCKS.lock_id</code>.
     */
    public String getLockId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>information_schema.INNODB_LOCKS.lock_trx_id</code>.
     */
    public InnodbLocksRecord setLockTrxId(ULong value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>information_schema.INNODB_LOCKS.lock_trx_id</code>.
     */
    public ULong getLockTrxId() {
        return (ULong) get(1);
    }

    /**
     * Setter for <code>information_schema.INNODB_LOCKS.lock_mode</code>.
     */
    public InnodbLocksRecord setLockMode(InnodbLocksLockMode value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>information_schema.INNODB_LOCKS.lock_mode</code>.
     */
    public InnodbLocksLockMode getLockMode() {
        return (InnodbLocksLockMode) get(2);
    }

    /**
     * Setter for <code>information_schema.INNODB_LOCKS.lock_type</code>.
     */
    public InnodbLocksRecord setLockType(InnodbLocksLockType value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>information_schema.INNODB_LOCKS.lock_type</code>.
     */
    public InnodbLocksLockType getLockType() {
        return (InnodbLocksLockType) get(3);
    }

    /**
     * Setter for <code>information_schema.INNODB_LOCKS.lock_table</code>.
     */
    public InnodbLocksRecord setLockTable(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>information_schema.INNODB_LOCKS.lock_table</code>.
     */
    public String getLockTable() {
        return (String) get(4);
    }

    /**
     * Setter for <code>information_schema.INNODB_LOCKS.lock_index</code>.
     */
    public InnodbLocksRecord setLockIndex(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>information_schema.INNODB_LOCKS.lock_index</code>.
     */
    public String getLockIndex() {
        return (String) get(5);
    }

    /**
     * Setter for <code>information_schema.INNODB_LOCKS.lock_space</code>.
     */
    public InnodbLocksRecord setLockSpace(UInteger value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>information_schema.INNODB_LOCKS.lock_space</code>.
     */
    public UInteger getLockSpace() {
        return (UInteger) get(6);
    }

    /**
     * Setter for <code>information_schema.INNODB_LOCKS.lock_page</code>.
     */
    public InnodbLocksRecord setLockPage(UInteger value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>information_schema.INNODB_LOCKS.lock_page</code>.
     */
    public UInteger getLockPage() {
        return (UInteger) get(7);
    }

    /**
     * Setter for <code>information_schema.INNODB_LOCKS.lock_rec</code>.
     */
    public InnodbLocksRecord setLockRec(UInteger value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>information_schema.INNODB_LOCKS.lock_rec</code>.
     */
    public UInteger getLockRec() {
        return (UInteger) get(8);
    }

    /**
     * Setter for <code>information_schema.INNODB_LOCKS.lock_data</code>.
     */
    public InnodbLocksRecord setLockData(String value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>information_schema.INNODB_LOCKS.lock_data</code>.
     */
    public String getLockData() {
        return (String) get(9);
    }

    // -------------------------------------------------------------------------
    // Record10 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row10<String, ULong, InnodbLocksLockMode, InnodbLocksLockType, String, String, UInteger, UInteger, UInteger, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    @Override
    public Row10<String, ULong, InnodbLocksLockMode, InnodbLocksLockType, String, String, UInteger, UInteger, UInteger, String> valuesRow() {
        return (Row10) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return InnodbLocks.INNODB_LOCKS.LOCK_ID;
    }

    @Override
    public Field<ULong> field2() {
        return InnodbLocks.INNODB_LOCKS.LOCK_TRX_ID;
    }

    @Override
    public Field<InnodbLocksLockMode> field3() {
        return InnodbLocks.INNODB_LOCKS.LOCK_MODE;
    }

    @Override
    public Field<InnodbLocksLockType> field4() {
        return InnodbLocks.INNODB_LOCKS.LOCK_TYPE;
    }

    @Override
    public Field<String> field5() {
        return InnodbLocks.INNODB_LOCKS.LOCK_TABLE;
    }

    @Override
    public Field<String> field6() {
        return InnodbLocks.INNODB_LOCKS.LOCK_INDEX;
    }

    @Override
    public Field<UInteger> field7() {
        return InnodbLocks.INNODB_LOCKS.LOCK_SPACE;
    }

    @Override
    public Field<UInteger> field8() {
        return InnodbLocks.INNODB_LOCKS.LOCK_PAGE;
    }

    @Override
    public Field<UInteger> field9() {
        return InnodbLocks.INNODB_LOCKS.LOCK_REC;
    }

    @Override
    public Field<String> field10() {
        return InnodbLocks.INNODB_LOCKS.LOCK_DATA;
    }

    @Override
    public String component1() {
        return getLockId();
    }

    @Override
    public ULong component2() {
        return getLockTrxId();
    }

    @Override
    public InnodbLocksLockMode component3() {
        return getLockMode();
    }

    @Override
    public InnodbLocksLockType component4() {
        return getLockType();
    }

    @Override
    public String component5() {
        return getLockTable();
    }

    @Override
    public String component6() {
        return getLockIndex();
    }

    @Override
    public UInteger component7() {
        return getLockSpace();
    }

    @Override
    public UInteger component8() {
        return getLockPage();
    }

    @Override
    public UInteger component9() {
        return getLockRec();
    }

    @Override
    public String component10() {
        return getLockData();
    }

    @Override
    public String value1() {
        return getLockId();
    }

    @Override
    public ULong value2() {
        return getLockTrxId();
    }

    @Override
    public InnodbLocksLockMode value3() {
        return getLockMode();
    }

    @Override
    public InnodbLocksLockType value4() {
        return getLockType();
    }

    @Override
    public String value5() {
        return getLockTable();
    }

    @Override
    public String value6() {
        return getLockIndex();
    }

    @Override
    public UInteger value7() {
        return getLockSpace();
    }

    @Override
    public UInteger value8() {
        return getLockPage();
    }

    @Override
    public UInteger value9() {
        return getLockRec();
    }

    @Override
    public String value10() {
        return getLockData();
    }

    @Override
    public InnodbLocksRecord value1(String value) {
        setLockId(value);
        return this;
    }

    @Override
    public InnodbLocksRecord value2(ULong value) {
        setLockTrxId(value);
        return this;
    }

    @Override
    public InnodbLocksRecord value3(InnodbLocksLockMode value) {
        setLockMode(value);
        return this;
    }

    @Override
    public InnodbLocksRecord value4(InnodbLocksLockType value) {
        setLockType(value);
        return this;
    }

    @Override
    public InnodbLocksRecord value5(String value) {
        setLockTable(value);
        return this;
    }

    @Override
    public InnodbLocksRecord value6(String value) {
        setLockIndex(value);
        return this;
    }

    @Override
    public InnodbLocksRecord value7(UInteger value) {
        setLockSpace(value);
        return this;
    }

    @Override
    public InnodbLocksRecord value8(UInteger value) {
        setLockPage(value);
        return this;
    }

    @Override
    public InnodbLocksRecord value9(UInteger value) {
        setLockRec(value);
        return this;
    }

    @Override
    public InnodbLocksRecord value10(String value) {
        setLockData(value);
        return this;
    }

    @Override
    public InnodbLocksRecord values(String value1, ULong value2, InnodbLocksLockMode value3, InnodbLocksLockType value4, String value5, String value6, UInteger value7, UInteger value8, UInteger value9, String value10) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached InnodbLocksRecord
     */
    public InnodbLocksRecord() {
        super(InnodbLocks.INNODB_LOCKS);
    }

    /**
     * Create a detached, initialised InnodbLocksRecord
     */
    public InnodbLocksRecord(String lockId, ULong lockTrxId, InnodbLocksLockMode lockMode, InnodbLocksLockType lockType, String lockTable, String lockIndex, UInteger lockSpace, UInteger lockPage, UInteger lockRec, String lockData) {
        super(InnodbLocks.INNODB_LOCKS);

        setLockId(lockId);
        setLockTrxId(lockTrxId);
        setLockMode(lockMode);
        setLockType(lockType);
        setLockTable(lockTable);
        setLockIndex(lockIndex);
        setLockSpace(lockSpace);
        setLockPage(lockPage);
        setLockRec(lockRec);
        setLockData(lockData);
    }

    /**
     * Create a detached, initialised InnodbLocksRecord
     */
    public InnodbLocksRecord(com.sweeti.lemon.information_schema.tables.pojos.InnodbLocks value) {
        super(InnodbLocks.INNODB_LOCKS);

        if (value != null) {
            setLockId(value.getLockId());
            setLockTrxId(value.getLockTrxId());
            setLockMode(value.getLockMode());
            setLockType(value.getLockType());
            setLockTable(value.getLockTable());
            setLockIndex(value.getLockIndex());
            setLockSpace(value.getLockSpace());
            setLockPage(value.getLockPage());
            setLockRec(value.getLockRec());
            setLockData(value.getLockData());
        }
    }
}
