/*
 * This file is generated by jOOQ.
 */
package com.sweeti.lemon.information_schema.tables.pojos;


import java.io.Serializable;
import java.time.LocalDateTime;

import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Routines implements Serializable {

    private static final long serialVersionUID = 1L;

    private final String specificName;
    private final String routineCatalog;
    private final String routineSchema;
    private final String routineName;
    private final String routineType;
    private final String dataType;
    private final Integer characterMaximumLength;
    private final Integer characterOctetLength;
    private final Integer numericPrecision;
    private final Integer numericScale;
    private final ULong datetimePrecision;
    private final String characterSetName;
    private final String collationName;
    private final String dtdIdentifier;
    private final String routineBody;
    private final String routineDefinition;
    private final String externalName;
    private final String externalLanguage;
    private final String parameterStyle;
    private final String isDeterministic;
    private final String sqlDataAccess;
    private final String sqlPath;
    private final String securityType;
    private final LocalDateTime created;
    private final LocalDateTime lastAltered;
    private final String sqlMode;
    private final String routineComment;
    private final String definer;
    private final String characterSetClient;
    private final String collationConnection;
    private final String databaseCollation;

    public Routines(Routines value) {
        this.specificName = value.specificName;
        this.routineCatalog = value.routineCatalog;
        this.routineSchema = value.routineSchema;
        this.routineName = value.routineName;
        this.routineType = value.routineType;
        this.dataType = value.dataType;
        this.characterMaximumLength = value.characterMaximumLength;
        this.characterOctetLength = value.characterOctetLength;
        this.numericPrecision = value.numericPrecision;
        this.numericScale = value.numericScale;
        this.datetimePrecision = value.datetimePrecision;
        this.characterSetName = value.characterSetName;
        this.collationName = value.collationName;
        this.dtdIdentifier = value.dtdIdentifier;
        this.routineBody = value.routineBody;
        this.routineDefinition = value.routineDefinition;
        this.externalName = value.externalName;
        this.externalLanguage = value.externalLanguage;
        this.parameterStyle = value.parameterStyle;
        this.isDeterministic = value.isDeterministic;
        this.sqlDataAccess = value.sqlDataAccess;
        this.sqlPath = value.sqlPath;
        this.securityType = value.securityType;
        this.created = value.created;
        this.lastAltered = value.lastAltered;
        this.sqlMode = value.sqlMode;
        this.routineComment = value.routineComment;
        this.definer = value.definer;
        this.characterSetClient = value.characterSetClient;
        this.collationConnection = value.collationConnection;
        this.databaseCollation = value.databaseCollation;
    }

    public Routines(
        String specificName,
        String routineCatalog,
        String routineSchema,
        String routineName,
        String routineType,
        String dataType,
        Integer characterMaximumLength,
        Integer characterOctetLength,
        Integer numericPrecision,
        Integer numericScale,
        ULong datetimePrecision,
        String characterSetName,
        String collationName,
        String dtdIdentifier,
        String routineBody,
        String routineDefinition,
        String externalName,
        String externalLanguage,
        String parameterStyle,
        String isDeterministic,
        String sqlDataAccess,
        String sqlPath,
        String securityType,
        LocalDateTime created,
        LocalDateTime lastAltered,
        String sqlMode,
        String routineComment,
        String definer,
        String characterSetClient,
        String collationConnection,
        String databaseCollation
    ) {
        this.specificName = specificName;
        this.routineCatalog = routineCatalog;
        this.routineSchema = routineSchema;
        this.routineName = routineName;
        this.routineType = routineType;
        this.dataType = dataType;
        this.characterMaximumLength = characterMaximumLength;
        this.characterOctetLength = characterOctetLength;
        this.numericPrecision = numericPrecision;
        this.numericScale = numericScale;
        this.datetimePrecision = datetimePrecision;
        this.characterSetName = characterSetName;
        this.collationName = collationName;
        this.dtdIdentifier = dtdIdentifier;
        this.routineBody = routineBody;
        this.routineDefinition = routineDefinition;
        this.externalName = externalName;
        this.externalLanguage = externalLanguage;
        this.parameterStyle = parameterStyle;
        this.isDeterministic = isDeterministic;
        this.sqlDataAccess = sqlDataAccess;
        this.sqlPath = sqlPath;
        this.securityType = securityType;
        this.created = created;
        this.lastAltered = lastAltered;
        this.sqlMode = sqlMode;
        this.routineComment = routineComment;
        this.definer = definer;
        this.characterSetClient = characterSetClient;
        this.collationConnection = collationConnection;
        this.databaseCollation = databaseCollation;
    }

    /**
     * Getter for <code>information_schema.ROUTINES.SPECIFIC_NAME</code>.
     */
    public String getSpecificName() {
        return this.specificName;
    }

    /**
     * Getter for <code>information_schema.ROUTINES.ROUTINE_CATALOG</code>.
     */
    public String getRoutineCatalog() {
        return this.routineCatalog;
    }

    /**
     * Getter for <code>information_schema.ROUTINES.ROUTINE_SCHEMA</code>.
     */
    public String getRoutineSchema() {
        return this.routineSchema;
    }

    /**
     * Getter for <code>information_schema.ROUTINES.ROUTINE_NAME</code>.
     */
    public String getRoutineName() {
        return this.routineName;
    }

    /**
     * Getter for <code>information_schema.ROUTINES.ROUTINE_TYPE</code>.
     */
    public String getRoutineType() {
        return this.routineType;
    }

    /**
     * Getter for <code>information_schema.ROUTINES.DATA_TYPE</code>.
     */
    public String getDataType() {
        return this.dataType;
    }

    /**
     * Getter for
     * <code>information_schema.ROUTINES.CHARACTER_MAXIMUM_LENGTH</code>.
     */
    public Integer getCharacterMaximumLength() {
        return this.characterMaximumLength;
    }

    /**
     * Getter for
     * <code>information_schema.ROUTINES.CHARACTER_OCTET_LENGTH</code>.
     */
    public Integer getCharacterOctetLength() {
        return this.characterOctetLength;
    }

    /**
     * Getter for <code>information_schema.ROUTINES.NUMERIC_PRECISION</code>.
     */
    public Integer getNumericPrecision() {
        return this.numericPrecision;
    }

    /**
     * Getter for <code>information_schema.ROUTINES.NUMERIC_SCALE</code>.
     */
    public Integer getNumericScale() {
        return this.numericScale;
    }

    /**
     * Getter for <code>information_schema.ROUTINES.DATETIME_PRECISION</code>.
     */
    public ULong getDatetimePrecision() {
        return this.datetimePrecision;
    }

    /**
     * Getter for <code>information_schema.ROUTINES.CHARACTER_SET_NAME</code>.
     */
    public String getCharacterSetName() {
        return this.characterSetName;
    }

    /**
     * Getter for <code>information_schema.ROUTINES.COLLATION_NAME</code>.
     */
    public String getCollationName() {
        return this.collationName;
    }

    /**
     * Getter for <code>information_schema.ROUTINES.DTD_IDENTIFIER</code>.
     */
    public String getDtdIdentifier() {
        return this.dtdIdentifier;
    }

    /**
     * Getter for <code>information_schema.ROUTINES.ROUTINE_BODY</code>.
     */
    public String getRoutineBody() {
        return this.routineBody;
    }

    /**
     * Getter for <code>information_schema.ROUTINES.ROUTINE_DEFINITION</code>.
     */
    public String getRoutineDefinition() {
        return this.routineDefinition;
    }

    /**
     * Getter for <code>information_schema.ROUTINES.EXTERNAL_NAME</code>.
     */
    public String getExternalName() {
        return this.externalName;
    }

    /**
     * Getter for <code>information_schema.ROUTINES.EXTERNAL_LANGUAGE</code>.
     */
    public String getExternalLanguage() {
        return this.externalLanguage;
    }

    /**
     * Getter for <code>information_schema.ROUTINES.PARAMETER_STYLE</code>.
     */
    public String getParameterStyle() {
        return this.parameterStyle;
    }

    /**
     * Getter for <code>information_schema.ROUTINES.IS_DETERMINISTIC</code>.
     */
    public String getIsDeterministic() {
        return this.isDeterministic;
    }

    /**
     * Getter for <code>information_schema.ROUTINES.SQL_DATA_ACCESS</code>.
     */
    public String getSqlDataAccess() {
        return this.sqlDataAccess;
    }

    /**
     * Getter for <code>information_schema.ROUTINES.SQL_PATH</code>.
     */
    public String getSqlPath() {
        return this.sqlPath;
    }

    /**
     * Getter for <code>information_schema.ROUTINES.SECURITY_TYPE</code>.
     */
    public String getSecurityType() {
        return this.securityType;
    }

    /**
     * Getter for <code>information_schema.ROUTINES.CREATED</code>.
     */
    public LocalDateTime getCreated() {
        return this.created;
    }

    /**
     * Getter for <code>information_schema.ROUTINES.LAST_ALTERED</code>.
     */
    public LocalDateTime getLastAltered() {
        return this.lastAltered;
    }

    /**
     * Getter for <code>information_schema.ROUTINES.SQL_MODE</code>.
     */
    public String getSqlMode() {
        return this.sqlMode;
    }

    /**
     * Getter for <code>information_schema.ROUTINES.ROUTINE_COMMENT</code>.
     */
    public String getRoutineComment() {
        return this.routineComment;
    }

    /**
     * Getter for <code>information_schema.ROUTINES.DEFINER</code>.
     */
    public String getDefiner() {
        return this.definer;
    }

    /**
     * Getter for <code>information_schema.ROUTINES.CHARACTER_SET_CLIENT</code>.
     */
    public String getCharacterSetClient() {
        return this.characterSetClient;
    }

    /**
     * Getter for <code>information_schema.ROUTINES.COLLATION_CONNECTION</code>.
     */
    public String getCollationConnection() {
        return this.collationConnection;
    }

    /**
     * Getter for <code>information_schema.ROUTINES.DATABASE_COLLATION</code>.
     */
    public String getDatabaseCollation() {
        return this.databaseCollation;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Routines other = (Routines) obj;
        if (this.specificName == null) {
            if (other.specificName != null)
                return false;
        }
        else if (!this.specificName.equals(other.specificName))
            return false;
        if (this.routineCatalog == null) {
            if (other.routineCatalog != null)
                return false;
        }
        else if (!this.routineCatalog.equals(other.routineCatalog))
            return false;
        if (this.routineSchema == null) {
            if (other.routineSchema != null)
                return false;
        }
        else if (!this.routineSchema.equals(other.routineSchema))
            return false;
        if (this.routineName == null) {
            if (other.routineName != null)
                return false;
        }
        else if (!this.routineName.equals(other.routineName))
            return false;
        if (this.routineType == null) {
            if (other.routineType != null)
                return false;
        }
        else if (!this.routineType.equals(other.routineType))
            return false;
        if (this.dataType == null) {
            if (other.dataType != null)
                return false;
        }
        else if (!this.dataType.equals(other.dataType))
            return false;
        if (this.characterMaximumLength == null) {
            if (other.characterMaximumLength != null)
                return false;
        }
        else if (!this.characterMaximumLength.equals(other.characterMaximumLength))
            return false;
        if (this.characterOctetLength == null) {
            if (other.characterOctetLength != null)
                return false;
        }
        else if (!this.characterOctetLength.equals(other.characterOctetLength))
            return false;
        if (this.numericPrecision == null) {
            if (other.numericPrecision != null)
                return false;
        }
        else if (!this.numericPrecision.equals(other.numericPrecision))
            return false;
        if (this.numericScale == null) {
            if (other.numericScale != null)
                return false;
        }
        else if (!this.numericScale.equals(other.numericScale))
            return false;
        if (this.datetimePrecision == null) {
            if (other.datetimePrecision != null)
                return false;
        }
        else if (!this.datetimePrecision.equals(other.datetimePrecision))
            return false;
        if (this.characterSetName == null) {
            if (other.characterSetName != null)
                return false;
        }
        else if (!this.characterSetName.equals(other.characterSetName))
            return false;
        if (this.collationName == null) {
            if (other.collationName != null)
                return false;
        }
        else if (!this.collationName.equals(other.collationName))
            return false;
        if (this.dtdIdentifier == null) {
            if (other.dtdIdentifier != null)
                return false;
        }
        else if (!this.dtdIdentifier.equals(other.dtdIdentifier))
            return false;
        if (this.routineBody == null) {
            if (other.routineBody != null)
                return false;
        }
        else if (!this.routineBody.equals(other.routineBody))
            return false;
        if (this.routineDefinition == null) {
            if (other.routineDefinition != null)
                return false;
        }
        else if (!this.routineDefinition.equals(other.routineDefinition))
            return false;
        if (this.externalName == null) {
            if (other.externalName != null)
                return false;
        }
        else if (!this.externalName.equals(other.externalName))
            return false;
        if (this.externalLanguage == null) {
            if (other.externalLanguage != null)
                return false;
        }
        else if (!this.externalLanguage.equals(other.externalLanguage))
            return false;
        if (this.parameterStyle == null) {
            if (other.parameterStyle != null)
                return false;
        }
        else if (!this.parameterStyle.equals(other.parameterStyle))
            return false;
        if (this.isDeterministic == null) {
            if (other.isDeterministic != null)
                return false;
        }
        else if (!this.isDeterministic.equals(other.isDeterministic))
            return false;
        if (this.sqlDataAccess == null) {
            if (other.sqlDataAccess != null)
                return false;
        }
        else if (!this.sqlDataAccess.equals(other.sqlDataAccess))
            return false;
        if (this.sqlPath == null) {
            if (other.sqlPath != null)
                return false;
        }
        else if (!this.sqlPath.equals(other.sqlPath))
            return false;
        if (this.securityType == null) {
            if (other.securityType != null)
                return false;
        }
        else if (!this.securityType.equals(other.securityType))
            return false;
        if (this.created == null) {
            if (other.created != null)
                return false;
        }
        else if (!this.created.equals(other.created))
            return false;
        if (this.lastAltered == null) {
            if (other.lastAltered != null)
                return false;
        }
        else if (!this.lastAltered.equals(other.lastAltered))
            return false;
        if (this.sqlMode == null) {
            if (other.sqlMode != null)
                return false;
        }
        else if (!this.sqlMode.equals(other.sqlMode))
            return false;
        if (this.routineComment == null) {
            if (other.routineComment != null)
                return false;
        }
        else if (!this.routineComment.equals(other.routineComment))
            return false;
        if (this.definer == null) {
            if (other.definer != null)
                return false;
        }
        else if (!this.definer.equals(other.definer))
            return false;
        if (this.characterSetClient == null) {
            if (other.characterSetClient != null)
                return false;
        }
        else if (!this.characterSetClient.equals(other.characterSetClient))
            return false;
        if (this.collationConnection == null) {
            if (other.collationConnection != null)
                return false;
        }
        else if (!this.collationConnection.equals(other.collationConnection))
            return false;
        if (this.databaseCollation == null) {
            if (other.databaseCollation != null)
                return false;
        }
        else if (!this.databaseCollation.equals(other.databaseCollation))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.specificName == null) ? 0 : this.specificName.hashCode());
        result = prime * result + ((this.routineCatalog == null) ? 0 : this.routineCatalog.hashCode());
        result = prime * result + ((this.routineSchema == null) ? 0 : this.routineSchema.hashCode());
        result = prime * result + ((this.routineName == null) ? 0 : this.routineName.hashCode());
        result = prime * result + ((this.routineType == null) ? 0 : this.routineType.hashCode());
        result = prime * result + ((this.dataType == null) ? 0 : this.dataType.hashCode());
        result = prime * result + ((this.characterMaximumLength == null) ? 0 : this.characterMaximumLength.hashCode());
        result = prime * result + ((this.characterOctetLength == null) ? 0 : this.characterOctetLength.hashCode());
        result = prime * result + ((this.numericPrecision == null) ? 0 : this.numericPrecision.hashCode());
        result = prime * result + ((this.numericScale == null) ? 0 : this.numericScale.hashCode());
        result = prime * result + ((this.datetimePrecision == null) ? 0 : this.datetimePrecision.hashCode());
        result = prime * result + ((this.characterSetName == null) ? 0 : this.characterSetName.hashCode());
        result = prime * result + ((this.collationName == null) ? 0 : this.collationName.hashCode());
        result = prime * result + ((this.dtdIdentifier == null) ? 0 : this.dtdIdentifier.hashCode());
        result = prime * result + ((this.routineBody == null) ? 0 : this.routineBody.hashCode());
        result = prime * result + ((this.routineDefinition == null) ? 0 : this.routineDefinition.hashCode());
        result = prime * result + ((this.externalName == null) ? 0 : this.externalName.hashCode());
        result = prime * result + ((this.externalLanguage == null) ? 0 : this.externalLanguage.hashCode());
        result = prime * result + ((this.parameterStyle == null) ? 0 : this.parameterStyle.hashCode());
        result = prime * result + ((this.isDeterministic == null) ? 0 : this.isDeterministic.hashCode());
        result = prime * result + ((this.sqlDataAccess == null) ? 0 : this.sqlDataAccess.hashCode());
        result = prime * result + ((this.sqlPath == null) ? 0 : this.sqlPath.hashCode());
        result = prime * result + ((this.securityType == null) ? 0 : this.securityType.hashCode());
        result = prime * result + ((this.created == null) ? 0 : this.created.hashCode());
        result = prime * result + ((this.lastAltered == null) ? 0 : this.lastAltered.hashCode());
        result = prime * result + ((this.sqlMode == null) ? 0 : this.sqlMode.hashCode());
        result = prime * result + ((this.routineComment == null) ? 0 : this.routineComment.hashCode());
        result = prime * result + ((this.definer == null) ? 0 : this.definer.hashCode());
        result = prime * result + ((this.characterSetClient == null) ? 0 : this.characterSetClient.hashCode());
        result = prime * result + ((this.collationConnection == null) ? 0 : this.collationConnection.hashCode());
        result = prime * result + ((this.databaseCollation == null) ? 0 : this.databaseCollation.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Routines (");

        sb.append(specificName);
        sb.append(", ").append(routineCatalog);
        sb.append(", ").append(routineSchema);
        sb.append(", ").append(routineName);
        sb.append(", ").append(routineType);
        sb.append(", ").append(dataType);
        sb.append(", ").append(characterMaximumLength);
        sb.append(", ").append(characterOctetLength);
        sb.append(", ").append(numericPrecision);
        sb.append(", ").append(numericScale);
        sb.append(", ").append(datetimePrecision);
        sb.append(", ").append(characterSetName);
        sb.append(", ").append(collationName);
        sb.append(", ").append(dtdIdentifier);
        sb.append(", ").append(routineBody);
        sb.append(", ").append(routineDefinition);
        sb.append(", ").append(externalName);
        sb.append(", ").append(externalLanguage);
        sb.append(", ").append(parameterStyle);
        sb.append(", ").append(isDeterministic);
        sb.append(", ").append(sqlDataAccess);
        sb.append(", ").append(sqlPath);
        sb.append(", ").append(securityType);
        sb.append(", ").append(created);
        sb.append(", ").append(lastAltered);
        sb.append(", ").append(sqlMode);
        sb.append(", ").append(routineComment);
        sb.append(", ").append(definer);
        sb.append(", ").append(characterSetClient);
        sb.append(", ").append(collationConnection);
        sb.append(", ").append(databaseCollation);

        sb.append(")");
        return sb.toString();
    }
}
