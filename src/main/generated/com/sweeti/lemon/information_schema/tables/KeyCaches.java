/*
 * This file is generated by jOOQ.
 */
package com.sweeti.lemon.information_schema.tables;


import com.sweeti.lemon.information_schema.InformationSchema;
import com.sweeti.lemon.information_schema.tables.records.KeyCachesRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function12;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class KeyCaches extends TableImpl<KeyCachesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>information_schema.KEY_CACHES</code>
     */
    public static final KeyCaches KEY_CACHES = new KeyCaches();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<KeyCachesRecord> getRecordType() {
        return KeyCachesRecord.class;
    }

    /**
     * The column <code>information_schema.KEY_CACHES.KEY_CACHE_NAME</code>.
     */
    public final TableField<KeyCachesRecord, String> KEY_CACHE_NAME = createField(DSL.name("KEY_CACHE_NAME"), SQLDataType.VARCHAR(192).nullable(false), this, "");

    /**
     * The column <code>information_schema.KEY_CACHES.SEGMENTS</code>.
     */
    public final TableField<KeyCachesRecord, UInteger> SEGMENTS = createField(DSL.name("SEGMENTS"), SQLDataType.INTEGERUNSIGNED, this, "");

    /**
     * The column <code>information_schema.KEY_CACHES.SEGMENT_NUMBER</code>.
     */
    public final TableField<KeyCachesRecord, UInteger> SEGMENT_NUMBER = createField(DSL.name("SEGMENT_NUMBER"), SQLDataType.INTEGERUNSIGNED, this, "");

    /**
     * The column <code>information_schema.KEY_CACHES.FULL_SIZE</code>.
     */
    public final TableField<KeyCachesRecord, ULong> FULL_SIZE = createField(DSL.name("FULL_SIZE"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>information_schema.KEY_CACHES.BLOCK_SIZE</code>.
     */
    public final TableField<KeyCachesRecord, ULong> BLOCK_SIZE = createField(DSL.name("BLOCK_SIZE"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>information_schema.KEY_CACHES.USED_BLOCKS</code>.
     */
    public final TableField<KeyCachesRecord, ULong> USED_BLOCKS = createField(DSL.name("USED_BLOCKS"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>information_schema.KEY_CACHES.UNUSED_BLOCKS</code>.
     */
    public final TableField<KeyCachesRecord, ULong> UNUSED_BLOCKS = createField(DSL.name("UNUSED_BLOCKS"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>information_schema.KEY_CACHES.DIRTY_BLOCKS</code>.
     */
    public final TableField<KeyCachesRecord, ULong> DIRTY_BLOCKS = createField(DSL.name("DIRTY_BLOCKS"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>information_schema.KEY_CACHES.READ_REQUESTS</code>.
     */
    public final TableField<KeyCachesRecord, ULong> READ_REQUESTS = createField(DSL.name("READ_REQUESTS"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>information_schema.KEY_CACHES.READS</code>.
     */
    public final TableField<KeyCachesRecord, ULong> READS = createField(DSL.name("READS"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>information_schema.KEY_CACHES.WRITE_REQUESTS</code>.
     */
    public final TableField<KeyCachesRecord, ULong> WRITE_REQUESTS = createField(DSL.name("WRITE_REQUESTS"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>information_schema.KEY_CACHES.WRITES</code>.
     */
    public final TableField<KeyCachesRecord, ULong> WRITES = createField(DSL.name("WRITES"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    private KeyCaches(Name alias, Table<KeyCachesRecord> aliased) {
        this(alias, aliased, null);
    }

    private KeyCaches(Name alias, Table<KeyCachesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>information_schema.KEY_CACHES</code> table
     * reference
     */
    public KeyCaches(String alias) {
        this(DSL.name(alias), KEY_CACHES);
    }

    /**
     * Create an aliased <code>information_schema.KEY_CACHES</code> table
     * reference
     */
    public KeyCaches(Name alias) {
        this(alias, KEY_CACHES);
    }

    /**
     * Create a <code>information_schema.KEY_CACHES</code> table reference
     */
    public KeyCaches() {
        this(DSL.name("KEY_CACHES"), null);
    }

    public <O extends Record> KeyCaches(Table<O> child, ForeignKey<O, KeyCachesRecord> key) {
        super(child, key, KEY_CACHES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : InformationSchema.INFORMATION_SCHEMA;
    }

    @Override
    public KeyCaches as(String alias) {
        return new KeyCaches(DSL.name(alias), this);
    }

    @Override
    public KeyCaches as(Name alias) {
        return new KeyCaches(alias, this);
    }

    @Override
    public KeyCaches as(Table<?> alias) {
        return new KeyCaches(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public KeyCaches rename(String name) {
        return new KeyCaches(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public KeyCaches rename(Name name) {
        return new KeyCaches(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public KeyCaches rename(Table<?> name) {
        return new KeyCaches(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<String, UInteger, UInteger, ULong, ULong, ULong, ULong, ULong, ULong, ULong, ULong, ULong> fieldsRow() {
        return (Row12) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function12<? super String, ? super UInteger, ? super UInteger, ? super ULong, ? super ULong, ? super ULong, ? super ULong, ? super ULong, ? super ULong, ? super ULong, ? super ULong, ? super ULong, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function12<? super String, ? super UInteger, ? super UInteger, ? super ULong, ? super ULong, ? super ULong, ? super ULong, ? super ULong, ? super ULong, ? super ULong, ? super ULong, ? super ULong, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
