/*
 * This file is generated by jOOQ.
 */
package com.sweeti.lemon.information_schema.tables;


import com.sweeti.lemon.information_schema.InformationSchema;
import com.sweeti.lemon.information_schema.tables.records.IndexStatisticsRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IndexStatistics extends TableImpl<IndexStatisticsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>information_schema.INDEX_STATISTICS</code>
     */
    public static final IndexStatistics INDEX_STATISTICS = new IndexStatistics();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IndexStatisticsRecord> getRecordType() {
        return IndexStatisticsRecord.class;
    }

    /**
     * The column <code>information_schema.INDEX_STATISTICS.TABLE_SCHEMA</code>.
     */
    public final TableField<IndexStatisticsRecord, String> TABLE_SCHEMA = createField(DSL.name("TABLE_SCHEMA"), SQLDataType.VARCHAR(192).nullable(false), this, "");

    /**
     * The column <code>information_schema.INDEX_STATISTICS.TABLE_NAME</code>.
     */
    public final TableField<IndexStatisticsRecord, String> TABLE_NAME = createField(DSL.name("TABLE_NAME"), SQLDataType.VARCHAR(192).nullable(false), this, "");

    /**
     * The column <code>information_schema.INDEX_STATISTICS.INDEX_NAME</code>.
     */
    public final TableField<IndexStatisticsRecord, String> INDEX_NAME = createField(DSL.name("INDEX_NAME"), SQLDataType.VARCHAR(192).nullable(false), this, "");

    /**
     * The column <code>information_schema.INDEX_STATISTICS.ROWS_READ</code>.
     */
    public final TableField<IndexStatisticsRecord, Long> ROWS_READ = createField(DSL.name("ROWS_READ"), SQLDataType.BIGINT.nullable(false), this, "");

    private IndexStatistics(Name alias, Table<IndexStatisticsRecord> aliased) {
        this(alias, aliased, null);
    }

    private IndexStatistics(Name alias, Table<IndexStatisticsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>information_schema.INDEX_STATISTICS</code> table
     * reference
     */
    public IndexStatistics(String alias) {
        this(DSL.name(alias), INDEX_STATISTICS);
    }

    /**
     * Create an aliased <code>information_schema.INDEX_STATISTICS</code> table
     * reference
     */
    public IndexStatistics(Name alias) {
        this(alias, INDEX_STATISTICS);
    }

    /**
     * Create a <code>information_schema.INDEX_STATISTICS</code> table reference
     */
    public IndexStatistics() {
        this(DSL.name("INDEX_STATISTICS"), null);
    }

    public <O extends Record> IndexStatistics(Table<O> child, ForeignKey<O, IndexStatisticsRecord> key) {
        super(child, key, INDEX_STATISTICS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : InformationSchema.INFORMATION_SCHEMA;
    }

    @Override
    public IndexStatistics as(String alias) {
        return new IndexStatistics(DSL.name(alias), this);
    }

    @Override
    public IndexStatistics as(Name alias) {
        return new IndexStatistics(alias, this);
    }

    @Override
    public IndexStatistics as(Table<?> alias) {
        return new IndexStatistics(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public IndexStatistics rename(String name) {
        return new IndexStatistics(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public IndexStatistics rename(Name name) {
        return new IndexStatistics(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public IndexStatistics rename(Table<?> name) {
        return new IndexStatistics(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, Long> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super String, ? super String, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super String, ? super String, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
