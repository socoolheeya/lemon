/*
 * This file is generated by jOOQ.
 */
package com.sweeti.lemon.information_schema.tables.records;


import com.sweeti.lemon.information_schema.tables.Partitions;

import java.time.LocalDateTime;

import org.jooq.impl.TableRecordImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PartitionsRecord extends TableRecordImpl<PartitionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>information_schema.PARTITIONS.TABLE_CATALOG</code>.
     */
    public PartitionsRecord setTableCatalog(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>information_schema.PARTITIONS.TABLE_CATALOG</code>.
     */
    public String getTableCatalog() {
        return (String) get(0);
    }

    /**
     * Setter for <code>information_schema.PARTITIONS.TABLE_SCHEMA</code>.
     */
    public PartitionsRecord setTableSchema(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>information_schema.PARTITIONS.TABLE_SCHEMA</code>.
     */
    public String getTableSchema() {
        return (String) get(1);
    }

    /**
     * Setter for <code>information_schema.PARTITIONS.TABLE_NAME</code>.
     */
    public PartitionsRecord setTableName(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>information_schema.PARTITIONS.TABLE_NAME</code>.
     */
    public String getTableName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>information_schema.PARTITIONS.PARTITION_NAME</code>.
     */
    public PartitionsRecord setPartitionName(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>information_schema.PARTITIONS.PARTITION_NAME</code>.
     */
    public String getPartitionName() {
        return (String) get(3);
    }

    /**
     * Setter for <code>information_schema.PARTITIONS.SUBPARTITION_NAME</code>.
     */
    public PartitionsRecord setSubpartitionName(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>information_schema.PARTITIONS.SUBPARTITION_NAME</code>.
     */
    public String getSubpartitionName() {
        return (String) get(4);
    }

    /**
     * Setter for
     * <code>information_schema.PARTITIONS.PARTITION_ORDINAL_POSITION</code>.
     */
    public PartitionsRecord setPartitionOrdinalPosition(ULong value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for
     * <code>information_schema.PARTITIONS.PARTITION_ORDINAL_POSITION</code>.
     */
    public ULong getPartitionOrdinalPosition() {
        return (ULong) get(5);
    }

    /**
     * Setter for
     * <code>information_schema.PARTITIONS.SUBPARTITION_ORDINAL_POSITION</code>.
     */
    public PartitionsRecord setSubpartitionOrdinalPosition(ULong value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for
     * <code>information_schema.PARTITIONS.SUBPARTITION_ORDINAL_POSITION</code>.
     */
    public ULong getSubpartitionOrdinalPosition() {
        return (ULong) get(6);
    }

    /**
     * Setter for <code>information_schema.PARTITIONS.PARTITION_METHOD</code>.
     */
    public PartitionsRecord setPartitionMethod(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>information_schema.PARTITIONS.PARTITION_METHOD</code>.
     */
    public String getPartitionMethod() {
        return (String) get(7);
    }

    /**
     * Setter for
     * <code>information_schema.PARTITIONS.SUBPARTITION_METHOD</code>.
     */
    public PartitionsRecord setSubpartitionMethod(String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for
     * <code>information_schema.PARTITIONS.SUBPARTITION_METHOD</code>.
     */
    public String getSubpartitionMethod() {
        return (String) get(8);
    }

    /**
     * Setter for
     * <code>information_schema.PARTITIONS.PARTITION_EXPRESSION</code>.
     */
    public PartitionsRecord setPartitionExpression(String value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for
     * <code>information_schema.PARTITIONS.PARTITION_EXPRESSION</code>.
     */
    public String getPartitionExpression() {
        return (String) get(9);
    }

    /**
     * Setter for
     * <code>information_schema.PARTITIONS.SUBPARTITION_EXPRESSION</code>.
     */
    public PartitionsRecord setSubpartitionExpression(String value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for
     * <code>information_schema.PARTITIONS.SUBPARTITION_EXPRESSION</code>.
     */
    public String getSubpartitionExpression() {
        return (String) get(10);
    }

    /**
     * Setter for
     * <code>information_schema.PARTITIONS.PARTITION_DESCRIPTION</code>.
     */
    public PartitionsRecord setPartitionDescription(String value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for
     * <code>information_schema.PARTITIONS.PARTITION_DESCRIPTION</code>.
     */
    public String getPartitionDescription() {
        return (String) get(11);
    }

    /**
     * Setter for <code>information_schema.PARTITIONS.TABLE_ROWS</code>.
     */
    public PartitionsRecord setTableRows(ULong value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>information_schema.PARTITIONS.TABLE_ROWS</code>.
     */
    public ULong getTableRows() {
        return (ULong) get(12);
    }

    /**
     * Setter for <code>information_schema.PARTITIONS.AVG_ROW_LENGTH</code>.
     */
    public PartitionsRecord setAvgRowLength(ULong value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>information_schema.PARTITIONS.AVG_ROW_LENGTH</code>.
     */
    public ULong getAvgRowLength() {
        return (ULong) get(13);
    }

    /**
     * Setter for <code>information_schema.PARTITIONS.DATA_LENGTH</code>.
     */
    public PartitionsRecord setDataLength(ULong value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for <code>information_schema.PARTITIONS.DATA_LENGTH</code>.
     */
    public ULong getDataLength() {
        return (ULong) get(14);
    }

    /**
     * Setter for <code>information_schema.PARTITIONS.MAX_DATA_LENGTH</code>.
     */
    public PartitionsRecord setMaxDataLength(ULong value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for <code>information_schema.PARTITIONS.MAX_DATA_LENGTH</code>.
     */
    public ULong getMaxDataLength() {
        return (ULong) get(15);
    }

    /**
     * Setter for <code>information_schema.PARTITIONS.INDEX_LENGTH</code>.
     */
    public PartitionsRecord setIndexLength(ULong value) {
        set(16, value);
        return this;
    }

    /**
     * Getter for <code>information_schema.PARTITIONS.INDEX_LENGTH</code>.
     */
    public ULong getIndexLength() {
        return (ULong) get(16);
    }

    /**
     * Setter for <code>information_schema.PARTITIONS.DATA_FREE</code>.
     */
    public PartitionsRecord setDataFree(ULong value) {
        set(17, value);
        return this;
    }

    /**
     * Getter for <code>information_schema.PARTITIONS.DATA_FREE</code>.
     */
    public ULong getDataFree() {
        return (ULong) get(17);
    }

    /**
     * Setter for <code>information_schema.PARTITIONS.CREATE_TIME</code>.
     */
    public PartitionsRecord setCreateTime(LocalDateTime value) {
        set(18, value);
        return this;
    }

    /**
     * Getter for <code>information_schema.PARTITIONS.CREATE_TIME</code>.
     */
    public LocalDateTime getCreateTime() {
        return (LocalDateTime) get(18);
    }

    /**
     * Setter for <code>information_schema.PARTITIONS.UPDATE_TIME</code>.
     */
    public PartitionsRecord setUpdateTime(LocalDateTime value) {
        set(19, value);
        return this;
    }

    /**
     * Getter for <code>information_schema.PARTITIONS.UPDATE_TIME</code>.
     */
    public LocalDateTime getUpdateTime() {
        return (LocalDateTime) get(19);
    }

    /**
     * Setter for <code>information_schema.PARTITIONS.CHECK_TIME</code>.
     */
    public PartitionsRecord setCheckTime(LocalDateTime value) {
        set(20, value);
        return this;
    }

    /**
     * Getter for <code>information_schema.PARTITIONS.CHECK_TIME</code>.
     */
    public LocalDateTime getCheckTime() {
        return (LocalDateTime) get(20);
    }

    /**
     * Setter for <code>information_schema.PARTITIONS.CHECKSUM</code>.
     */
    public PartitionsRecord setChecksum(ULong value) {
        set(21, value);
        return this;
    }

    /**
     * Getter for <code>information_schema.PARTITIONS.CHECKSUM</code>.
     */
    public ULong getChecksum() {
        return (ULong) get(21);
    }

    /**
     * Setter for <code>information_schema.PARTITIONS.PARTITION_COMMENT</code>.
     */
    public PartitionsRecord setPartitionComment(String value) {
        set(22, value);
        return this;
    }

    /**
     * Getter for <code>information_schema.PARTITIONS.PARTITION_COMMENT</code>.
     */
    public String getPartitionComment() {
        return (String) get(22);
    }

    /**
     * Setter for <code>information_schema.PARTITIONS.NODEGROUP</code>.
     */
    public PartitionsRecord setNodegroup(String value) {
        set(23, value);
        return this;
    }

    /**
     * Getter for <code>information_schema.PARTITIONS.NODEGROUP</code>.
     */
    public String getNodegroup() {
        return (String) get(23);
    }

    /**
     * Setter for <code>information_schema.PARTITIONS.TABLESPACE_NAME</code>.
     */
    public PartitionsRecord setTablespaceName(String value) {
        set(24, value);
        return this;
    }

    /**
     * Getter for <code>information_schema.PARTITIONS.TABLESPACE_NAME</code>.
     */
    public String getTablespaceName() {
        return (String) get(24);
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PartitionsRecord
     */
    public PartitionsRecord() {
        super(Partitions.PARTITIONS);
    }

    /**
     * Create a detached, initialised PartitionsRecord
     */
    public PartitionsRecord(String tableCatalog, String tableSchema, String tableName, String partitionName, String subpartitionName, ULong partitionOrdinalPosition, ULong subpartitionOrdinalPosition, String partitionMethod, String subpartitionMethod, String partitionExpression, String subpartitionExpression, String partitionDescription, ULong tableRows, ULong avgRowLength, ULong dataLength, ULong maxDataLength, ULong indexLength, ULong dataFree, LocalDateTime createTime, LocalDateTime updateTime, LocalDateTime checkTime, ULong checksum, String partitionComment, String nodegroup, String tablespaceName) {
        super(Partitions.PARTITIONS);

        setTableCatalog(tableCatalog);
        setTableSchema(tableSchema);
        setTableName(tableName);
        setPartitionName(partitionName);
        setSubpartitionName(subpartitionName);
        setPartitionOrdinalPosition(partitionOrdinalPosition);
        setSubpartitionOrdinalPosition(subpartitionOrdinalPosition);
        setPartitionMethod(partitionMethod);
        setSubpartitionMethod(subpartitionMethod);
        setPartitionExpression(partitionExpression);
        setSubpartitionExpression(subpartitionExpression);
        setPartitionDescription(partitionDescription);
        setTableRows(tableRows);
        setAvgRowLength(avgRowLength);
        setDataLength(dataLength);
        setMaxDataLength(maxDataLength);
        setIndexLength(indexLength);
        setDataFree(dataFree);
        setCreateTime(createTime);
        setUpdateTime(updateTime);
        setCheckTime(checkTime);
        setChecksum(checksum);
        setPartitionComment(partitionComment);
        setNodegroup(nodegroup);
        setTablespaceName(tablespaceName);
    }

    /**
     * Create a detached, initialised PartitionsRecord
     */
    public PartitionsRecord(com.sweeti.lemon.information_schema.tables.pojos.Partitions value) {
        super(Partitions.PARTITIONS);

        if (value != null) {
            setTableCatalog(value.getTableCatalog());
            setTableSchema(value.getTableSchema());
            setTableName(value.getTableName());
            setPartitionName(value.getPartitionName());
            setSubpartitionName(value.getSubpartitionName());
            setPartitionOrdinalPosition(value.getPartitionOrdinalPosition());
            setSubpartitionOrdinalPosition(value.getSubpartitionOrdinalPosition());
            setPartitionMethod(value.getPartitionMethod());
            setSubpartitionMethod(value.getSubpartitionMethod());
            setPartitionExpression(value.getPartitionExpression());
            setSubpartitionExpression(value.getSubpartitionExpression());
            setPartitionDescription(value.getPartitionDescription());
            setTableRows(value.getTableRows());
            setAvgRowLength(value.getAvgRowLength());
            setDataLength(value.getDataLength());
            setMaxDataLength(value.getMaxDataLength());
            setIndexLength(value.getIndexLength());
            setDataFree(value.getDataFree());
            setCreateTime(value.getCreateTime());
            setUpdateTime(value.getUpdateTime());
            setCheckTime(value.getCheckTime());
            setChecksum(value.getChecksum());
            setPartitionComment(value.getPartitionComment());
            setNodegroup(value.getNodegroup());
            setTablespaceName(value.getTablespaceName());
        }
    }
}
