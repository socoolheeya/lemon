/*
 * This file is generated by jOOQ.
 */
package com.sweeti.lemon.information_schema.tables.pojos;


import java.io.Serializable;

import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserStatistics implements Serializable {

    private static final long serialVersionUID = 1L;

    private final String user;
    private final Integer totalConnections;
    private final Integer concurrentConnections;
    private final Integer connectedTime;
    private final Double busyTime;
    private final Double cpuTime;
    private final Long bytesReceived;
    private final Long bytesSent;
    private final Long binlogBytesWritten;
    private final Long rowsRead;
    private final Long rowsSent;
    private final Long rowsDeleted;
    private final Long rowsInserted;
    private final Long rowsUpdated;
    private final Long selectCommands;
    private final Long updateCommands;
    private final Long otherCommands;
    private final Long commitTransactions;
    private final Long rollbackTransactions;
    private final Long deniedConnections;
    private final Long lostConnections;
    private final Long accessDenied;
    private final Long emptyQueries;
    private final ULong totalSslConnections;
    private final Long maxStatementTimeExceeded;

    public UserStatistics(UserStatistics value) {
        this.user = value.user;
        this.totalConnections = value.totalConnections;
        this.concurrentConnections = value.concurrentConnections;
        this.connectedTime = value.connectedTime;
        this.busyTime = value.busyTime;
        this.cpuTime = value.cpuTime;
        this.bytesReceived = value.bytesReceived;
        this.bytesSent = value.bytesSent;
        this.binlogBytesWritten = value.binlogBytesWritten;
        this.rowsRead = value.rowsRead;
        this.rowsSent = value.rowsSent;
        this.rowsDeleted = value.rowsDeleted;
        this.rowsInserted = value.rowsInserted;
        this.rowsUpdated = value.rowsUpdated;
        this.selectCommands = value.selectCommands;
        this.updateCommands = value.updateCommands;
        this.otherCommands = value.otherCommands;
        this.commitTransactions = value.commitTransactions;
        this.rollbackTransactions = value.rollbackTransactions;
        this.deniedConnections = value.deniedConnections;
        this.lostConnections = value.lostConnections;
        this.accessDenied = value.accessDenied;
        this.emptyQueries = value.emptyQueries;
        this.totalSslConnections = value.totalSslConnections;
        this.maxStatementTimeExceeded = value.maxStatementTimeExceeded;
    }

    public UserStatistics(
        String user,
        Integer totalConnections,
        Integer concurrentConnections,
        Integer connectedTime,
        Double busyTime,
        Double cpuTime,
        Long bytesReceived,
        Long bytesSent,
        Long binlogBytesWritten,
        Long rowsRead,
        Long rowsSent,
        Long rowsDeleted,
        Long rowsInserted,
        Long rowsUpdated,
        Long selectCommands,
        Long updateCommands,
        Long otherCommands,
        Long commitTransactions,
        Long rollbackTransactions,
        Long deniedConnections,
        Long lostConnections,
        Long accessDenied,
        Long emptyQueries,
        ULong totalSslConnections,
        Long maxStatementTimeExceeded
    ) {
        this.user = user;
        this.totalConnections = totalConnections;
        this.concurrentConnections = concurrentConnections;
        this.connectedTime = connectedTime;
        this.busyTime = busyTime;
        this.cpuTime = cpuTime;
        this.bytesReceived = bytesReceived;
        this.bytesSent = bytesSent;
        this.binlogBytesWritten = binlogBytesWritten;
        this.rowsRead = rowsRead;
        this.rowsSent = rowsSent;
        this.rowsDeleted = rowsDeleted;
        this.rowsInserted = rowsInserted;
        this.rowsUpdated = rowsUpdated;
        this.selectCommands = selectCommands;
        this.updateCommands = updateCommands;
        this.otherCommands = otherCommands;
        this.commitTransactions = commitTransactions;
        this.rollbackTransactions = rollbackTransactions;
        this.deniedConnections = deniedConnections;
        this.lostConnections = lostConnections;
        this.accessDenied = accessDenied;
        this.emptyQueries = emptyQueries;
        this.totalSslConnections = totalSslConnections;
        this.maxStatementTimeExceeded = maxStatementTimeExceeded;
    }

    /**
     * Getter for <code>information_schema.USER_STATISTICS.USER</code>.
     */
    public String getUser() {
        return this.user;
    }

    /**
     * Getter for
     * <code>information_schema.USER_STATISTICS.TOTAL_CONNECTIONS</code>.
     */
    public Integer getTotalConnections() {
        return this.totalConnections;
    }

    /**
     * Getter for
     * <code>information_schema.USER_STATISTICS.CONCURRENT_CONNECTIONS</code>.
     */
    public Integer getConcurrentConnections() {
        return this.concurrentConnections;
    }

    /**
     * Getter for
     * <code>information_schema.USER_STATISTICS.CONNECTED_TIME</code>.
     */
    public Integer getConnectedTime() {
        return this.connectedTime;
    }

    /**
     * Getter for <code>information_schema.USER_STATISTICS.BUSY_TIME</code>.
     */
    public Double getBusyTime() {
        return this.busyTime;
    }

    /**
     * Getter for <code>information_schema.USER_STATISTICS.CPU_TIME</code>.
     */
    public Double getCpuTime() {
        return this.cpuTime;
    }

    /**
     * Getter for
     * <code>information_schema.USER_STATISTICS.BYTES_RECEIVED</code>.
     */
    public Long getBytesReceived() {
        return this.bytesReceived;
    }

    /**
     * Getter for <code>information_schema.USER_STATISTICS.BYTES_SENT</code>.
     */
    public Long getBytesSent() {
        return this.bytesSent;
    }

    /**
     * Getter for
     * <code>information_schema.USER_STATISTICS.BINLOG_BYTES_WRITTEN</code>.
     */
    public Long getBinlogBytesWritten() {
        return this.binlogBytesWritten;
    }

    /**
     * Getter for <code>information_schema.USER_STATISTICS.ROWS_READ</code>.
     */
    public Long getRowsRead() {
        return this.rowsRead;
    }

    /**
     * Getter for <code>information_schema.USER_STATISTICS.ROWS_SENT</code>.
     */
    public Long getRowsSent() {
        return this.rowsSent;
    }

    /**
     * Getter for <code>information_schema.USER_STATISTICS.ROWS_DELETED</code>.
     */
    public Long getRowsDeleted() {
        return this.rowsDeleted;
    }

    /**
     * Getter for <code>information_schema.USER_STATISTICS.ROWS_INSERTED</code>.
     */
    public Long getRowsInserted() {
        return this.rowsInserted;
    }

    /**
     * Getter for <code>information_schema.USER_STATISTICS.ROWS_UPDATED</code>.
     */
    public Long getRowsUpdated() {
        return this.rowsUpdated;
    }

    /**
     * Getter for
     * <code>information_schema.USER_STATISTICS.SELECT_COMMANDS</code>.
     */
    public Long getSelectCommands() {
        return this.selectCommands;
    }

    /**
     * Getter for
     * <code>information_schema.USER_STATISTICS.UPDATE_COMMANDS</code>.
     */
    public Long getUpdateCommands() {
        return this.updateCommands;
    }

    /**
     * Getter for
     * <code>information_schema.USER_STATISTICS.OTHER_COMMANDS</code>.
     */
    public Long getOtherCommands() {
        return this.otherCommands;
    }

    /**
     * Getter for
     * <code>information_schema.USER_STATISTICS.COMMIT_TRANSACTIONS</code>.
     */
    public Long getCommitTransactions() {
        return this.commitTransactions;
    }

    /**
     * Getter for
     * <code>information_schema.USER_STATISTICS.ROLLBACK_TRANSACTIONS</code>.
     */
    public Long getRollbackTransactions() {
        return this.rollbackTransactions;
    }

    /**
     * Getter for
     * <code>information_schema.USER_STATISTICS.DENIED_CONNECTIONS</code>.
     */
    public Long getDeniedConnections() {
        return this.deniedConnections;
    }

    /**
     * Getter for
     * <code>information_schema.USER_STATISTICS.LOST_CONNECTIONS</code>.
     */
    public Long getLostConnections() {
        return this.lostConnections;
    }

    /**
     * Getter for <code>information_schema.USER_STATISTICS.ACCESS_DENIED</code>.
     */
    public Long getAccessDenied() {
        return this.accessDenied;
    }

    /**
     * Getter for <code>information_schema.USER_STATISTICS.EMPTY_QUERIES</code>.
     */
    public Long getEmptyQueries() {
        return this.emptyQueries;
    }

    /**
     * Getter for
     * <code>information_schema.USER_STATISTICS.TOTAL_SSL_CONNECTIONS</code>.
     */
    public ULong getTotalSslConnections() {
        return this.totalSslConnections;
    }

    /**
     * Getter for
     * <code>information_schema.USER_STATISTICS.MAX_STATEMENT_TIME_EXCEEDED</code>.
     */
    public Long getMaxStatementTimeExceeded() {
        return this.maxStatementTimeExceeded;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final UserStatistics other = (UserStatistics) obj;
        if (this.user == null) {
            if (other.user != null)
                return false;
        }
        else if (!this.user.equals(other.user))
            return false;
        if (this.totalConnections == null) {
            if (other.totalConnections != null)
                return false;
        }
        else if (!this.totalConnections.equals(other.totalConnections))
            return false;
        if (this.concurrentConnections == null) {
            if (other.concurrentConnections != null)
                return false;
        }
        else if (!this.concurrentConnections.equals(other.concurrentConnections))
            return false;
        if (this.connectedTime == null) {
            if (other.connectedTime != null)
                return false;
        }
        else if (!this.connectedTime.equals(other.connectedTime))
            return false;
        if (this.busyTime == null) {
            if (other.busyTime != null)
                return false;
        }
        else if (!this.busyTime.equals(other.busyTime))
            return false;
        if (this.cpuTime == null) {
            if (other.cpuTime != null)
                return false;
        }
        else if (!this.cpuTime.equals(other.cpuTime))
            return false;
        if (this.bytesReceived == null) {
            if (other.bytesReceived != null)
                return false;
        }
        else if (!this.bytesReceived.equals(other.bytesReceived))
            return false;
        if (this.bytesSent == null) {
            if (other.bytesSent != null)
                return false;
        }
        else if (!this.bytesSent.equals(other.bytesSent))
            return false;
        if (this.binlogBytesWritten == null) {
            if (other.binlogBytesWritten != null)
                return false;
        }
        else if (!this.binlogBytesWritten.equals(other.binlogBytesWritten))
            return false;
        if (this.rowsRead == null) {
            if (other.rowsRead != null)
                return false;
        }
        else if (!this.rowsRead.equals(other.rowsRead))
            return false;
        if (this.rowsSent == null) {
            if (other.rowsSent != null)
                return false;
        }
        else if (!this.rowsSent.equals(other.rowsSent))
            return false;
        if (this.rowsDeleted == null) {
            if (other.rowsDeleted != null)
                return false;
        }
        else if (!this.rowsDeleted.equals(other.rowsDeleted))
            return false;
        if (this.rowsInserted == null) {
            if (other.rowsInserted != null)
                return false;
        }
        else if (!this.rowsInserted.equals(other.rowsInserted))
            return false;
        if (this.rowsUpdated == null) {
            if (other.rowsUpdated != null)
                return false;
        }
        else if (!this.rowsUpdated.equals(other.rowsUpdated))
            return false;
        if (this.selectCommands == null) {
            if (other.selectCommands != null)
                return false;
        }
        else if (!this.selectCommands.equals(other.selectCommands))
            return false;
        if (this.updateCommands == null) {
            if (other.updateCommands != null)
                return false;
        }
        else if (!this.updateCommands.equals(other.updateCommands))
            return false;
        if (this.otherCommands == null) {
            if (other.otherCommands != null)
                return false;
        }
        else if (!this.otherCommands.equals(other.otherCommands))
            return false;
        if (this.commitTransactions == null) {
            if (other.commitTransactions != null)
                return false;
        }
        else if (!this.commitTransactions.equals(other.commitTransactions))
            return false;
        if (this.rollbackTransactions == null) {
            if (other.rollbackTransactions != null)
                return false;
        }
        else if (!this.rollbackTransactions.equals(other.rollbackTransactions))
            return false;
        if (this.deniedConnections == null) {
            if (other.deniedConnections != null)
                return false;
        }
        else if (!this.deniedConnections.equals(other.deniedConnections))
            return false;
        if (this.lostConnections == null) {
            if (other.lostConnections != null)
                return false;
        }
        else if (!this.lostConnections.equals(other.lostConnections))
            return false;
        if (this.accessDenied == null) {
            if (other.accessDenied != null)
                return false;
        }
        else if (!this.accessDenied.equals(other.accessDenied))
            return false;
        if (this.emptyQueries == null) {
            if (other.emptyQueries != null)
                return false;
        }
        else if (!this.emptyQueries.equals(other.emptyQueries))
            return false;
        if (this.totalSslConnections == null) {
            if (other.totalSslConnections != null)
                return false;
        }
        else if (!this.totalSslConnections.equals(other.totalSslConnections))
            return false;
        if (this.maxStatementTimeExceeded == null) {
            if (other.maxStatementTimeExceeded != null)
                return false;
        }
        else if (!this.maxStatementTimeExceeded.equals(other.maxStatementTimeExceeded))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.user == null) ? 0 : this.user.hashCode());
        result = prime * result + ((this.totalConnections == null) ? 0 : this.totalConnections.hashCode());
        result = prime * result + ((this.concurrentConnections == null) ? 0 : this.concurrentConnections.hashCode());
        result = prime * result + ((this.connectedTime == null) ? 0 : this.connectedTime.hashCode());
        result = prime * result + ((this.busyTime == null) ? 0 : this.busyTime.hashCode());
        result = prime * result + ((this.cpuTime == null) ? 0 : this.cpuTime.hashCode());
        result = prime * result + ((this.bytesReceived == null) ? 0 : this.bytesReceived.hashCode());
        result = prime * result + ((this.bytesSent == null) ? 0 : this.bytesSent.hashCode());
        result = prime * result + ((this.binlogBytesWritten == null) ? 0 : this.binlogBytesWritten.hashCode());
        result = prime * result + ((this.rowsRead == null) ? 0 : this.rowsRead.hashCode());
        result = prime * result + ((this.rowsSent == null) ? 0 : this.rowsSent.hashCode());
        result = prime * result + ((this.rowsDeleted == null) ? 0 : this.rowsDeleted.hashCode());
        result = prime * result + ((this.rowsInserted == null) ? 0 : this.rowsInserted.hashCode());
        result = prime * result + ((this.rowsUpdated == null) ? 0 : this.rowsUpdated.hashCode());
        result = prime * result + ((this.selectCommands == null) ? 0 : this.selectCommands.hashCode());
        result = prime * result + ((this.updateCommands == null) ? 0 : this.updateCommands.hashCode());
        result = prime * result + ((this.otherCommands == null) ? 0 : this.otherCommands.hashCode());
        result = prime * result + ((this.commitTransactions == null) ? 0 : this.commitTransactions.hashCode());
        result = prime * result + ((this.rollbackTransactions == null) ? 0 : this.rollbackTransactions.hashCode());
        result = prime * result + ((this.deniedConnections == null) ? 0 : this.deniedConnections.hashCode());
        result = prime * result + ((this.lostConnections == null) ? 0 : this.lostConnections.hashCode());
        result = prime * result + ((this.accessDenied == null) ? 0 : this.accessDenied.hashCode());
        result = prime * result + ((this.emptyQueries == null) ? 0 : this.emptyQueries.hashCode());
        result = prime * result + ((this.totalSslConnections == null) ? 0 : this.totalSslConnections.hashCode());
        result = prime * result + ((this.maxStatementTimeExceeded == null) ? 0 : this.maxStatementTimeExceeded.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("UserStatistics (");

        sb.append(user);
        sb.append(", ").append(totalConnections);
        sb.append(", ").append(concurrentConnections);
        sb.append(", ").append(connectedTime);
        sb.append(", ").append(busyTime);
        sb.append(", ").append(cpuTime);
        sb.append(", ").append(bytesReceived);
        sb.append(", ").append(bytesSent);
        sb.append(", ").append(binlogBytesWritten);
        sb.append(", ").append(rowsRead);
        sb.append(", ").append(rowsSent);
        sb.append(", ").append(rowsDeleted);
        sb.append(", ").append(rowsInserted);
        sb.append(", ").append(rowsUpdated);
        sb.append(", ").append(selectCommands);
        sb.append(", ").append(updateCommands);
        sb.append(", ").append(otherCommands);
        sb.append(", ").append(commitTransactions);
        sb.append(", ").append(rollbackTransactions);
        sb.append(", ").append(deniedConnections);
        sb.append(", ").append(lostConnections);
        sb.append(", ").append(accessDenied);
        sb.append(", ").append(emptyQueries);
        sb.append(", ").append(totalSslConnections);
        sb.append(", ").append(maxStatementTimeExceeded);

        sb.append(")");
        return sb.toString();
    }
}
