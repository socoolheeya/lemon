/*
 * This file is generated by jOOQ.
 */
package com.sweeti.lemon.information_schema.tables.records;


import com.sweeti.lemon.information_schema.tables.ClientStatistics;

import org.jooq.impl.TableRecordImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ClientStatisticsRecord extends TableRecordImpl<ClientStatisticsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>information_schema.CLIENT_STATISTICS.CLIENT</code>.
     */
    public ClientStatisticsRecord setClient(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>information_schema.CLIENT_STATISTICS.CLIENT</code>.
     */
    public String getClient() {
        return (String) get(0);
    }

    /**
     * Setter for
     * <code>information_schema.CLIENT_STATISTICS.TOTAL_CONNECTIONS</code>.
     */
    public ClientStatisticsRecord setTotalConnections(Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for
     * <code>information_schema.CLIENT_STATISTICS.TOTAL_CONNECTIONS</code>.
     */
    public Long getTotalConnections() {
        return (Long) get(1);
    }

    /**
     * Setter for
     * <code>information_schema.CLIENT_STATISTICS.CONCURRENT_CONNECTIONS</code>.
     */
    public ClientStatisticsRecord setConcurrentConnections(Long value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for
     * <code>information_schema.CLIENT_STATISTICS.CONCURRENT_CONNECTIONS</code>.
     */
    public Long getConcurrentConnections() {
        return (Long) get(2);
    }

    /**
     * Setter for
     * <code>information_schema.CLIENT_STATISTICS.CONNECTED_TIME</code>.
     */
    public ClientStatisticsRecord setConnectedTime(Long value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for
     * <code>information_schema.CLIENT_STATISTICS.CONNECTED_TIME</code>.
     */
    public Long getConnectedTime() {
        return (Long) get(3);
    }

    /**
     * Setter for <code>information_schema.CLIENT_STATISTICS.BUSY_TIME</code>.
     */
    public ClientStatisticsRecord setBusyTime(Double value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>information_schema.CLIENT_STATISTICS.BUSY_TIME</code>.
     */
    public Double getBusyTime() {
        return (Double) get(4);
    }

    /**
     * Setter for <code>information_schema.CLIENT_STATISTICS.CPU_TIME</code>.
     */
    public ClientStatisticsRecord setCpuTime(Double value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>information_schema.CLIENT_STATISTICS.CPU_TIME</code>.
     */
    public Double getCpuTime() {
        return (Double) get(5);
    }

    /**
     * Setter for
     * <code>information_schema.CLIENT_STATISTICS.BYTES_RECEIVED</code>.
     */
    public ClientStatisticsRecord setBytesReceived(Long value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for
     * <code>information_schema.CLIENT_STATISTICS.BYTES_RECEIVED</code>.
     */
    public Long getBytesReceived() {
        return (Long) get(6);
    }

    /**
     * Setter for <code>information_schema.CLIENT_STATISTICS.BYTES_SENT</code>.
     */
    public ClientStatisticsRecord setBytesSent(Long value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>information_schema.CLIENT_STATISTICS.BYTES_SENT</code>.
     */
    public Long getBytesSent() {
        return (Long) get(7);
    }

    /**
     * Setter for
     * <code>information_schema.CLIENT_STATISTICS.BINLOG_BYTES_WRITTEN</code>.
     */
    public ClientStatisticsRecord setBinlogBytesWritten(Long value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for
     * <code>information_schema.CLIENT_STATISTICS.BINLOG_BYTES_WRITTEN</code>.
     */
    public Long getBinlogBytesWritten() {
        return (Long) get(8);
    }

    /**
     * Setter for <code>information_schema.CLIENT_STATISTICS.ROWS_READ</code>.
     */
    public ClientStatisticsRecord setRowsRead(Long value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>information_schema.CLIENT_STATISTICS.ROWS_READ</code>.
     */
    public Long getRowsRead() {
        return (Long) get(9);
    }

    /**
     * Setter for <code>information_schema.CLIENT_STATISTICS.ROWS_SENT</code>.
     */
    public ClientStatisticsRecord setRowsSent(Long value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>information_schema.CLIENT_STATISTICS.ROWS_SENT</code>.
     */
    public Long getRowsSent() {
        return (Long) get(10);
    }

    /**
     * Setter for
     * <code>information_schema.CLIENT_STATISTICS.ROWS_DELETED</code>.
     */
    public ClientStatisticsRecord setRowsDeleted(Long value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for
     * <code>information_schema.CLIENT_STATISTICS.ROWS_DELETED</code>.
     */
    public Long getRowsDeleted() {
        return (Long) get(11);
    }

    /**
     * Setter for
     * <code>information_schema.CLIENT_STATISTICS.ROWS_INSERTED</code>.
     */
    public ClientStatisticsRecord setRowsInserted(Long value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for
     * <code>information_schema.CLIENT_STATISTICS.ROWS_INSERTED</code>.
     */
    public Long getRowsInserted() {
        return (Long) get(12);
    }

    /**
     * Setter for
     * <code>information_schema.CLIENT_STATISTICS.ROWS_UPDATED</code>.
     */
    public ClientStatisticsRecord setRowsUpdated(Long value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for
     * <code>information_schema.CLIENT_STATISTICS.ROWS_UPDATED</code>.
     */
    public Long getRowsUpdated() {
        return (Long) get(13);
    }

    /**
     * Setter for
     * <code>information_schema.CLIENT_STATISTICS.SELECT_COMMANDS</code>.
     */
    public ClientStatisticsRecord setSelectCommands(Long value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for
     * <code>information_schema.CLIENT_STATISTICS.SELECT_COMMANDS</code>.
     */
    public Long getSelectCommands() {
        return (Long) get(14);
    }

    /**
     * Setter for
     * <code>information_schema.CLIENT_STATISTICS.UPDATE_COMMANDS</code>.
     */
    public ClientStatisticsRecord setUpdateCommands(Long value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for
     * <code>information_schema.CLIENT_STATISTICS.UPDATE_COMMANDS</code>.
     */
    public Long getUpdateCommands() {
        return (Long) get(15);
    }

    /**
     * Setter for
     * <code>information_schema.CLIENT_STATISTICS.OTHER_COMMANDS</code>.
     */
    public ClientStatisticsRecord setOtherCommands(Long value) {
        set(16, value);
        return this;
    }

    /**
     * Getter for
     * <code>information_schema.CLIENT_STATISTICS.OTHER_COMMANDS</code>.
     */
    public Long getOtherCommands() {
        return (Long) get(16);
    }

    /**
     * Setter for
     * <code>information_schema.CLIENT_STATISTICS.COMMIT_TRANSACTIONS</code>.
     */
    public ClientStatisticsRecord setCommitTransactions(Long value) {
        set(17, value);
        return this;
    }

    /**
     * Getter for
     * <code>information_schema.CLIENT_STATISTICS.COMMIT_TRANSACTIONS</code>.
     */
    public Long getCommitTransactions() {
        return (Long) get(17);
    }

    /**
     * Setter for
     * <code>information_schema.CLIENT_STATISTICS.ROLLBACK_TRANSACTIONS</code>.
     */
    public ClientStatisticsRecord setRollbackTransactions(Long value) {
        set(18, value);
        return this;
    }

    /**
     * Getter for
     * <code>information_schema.CLIENT_STATISTICS.ROLLBACK_TRANSACTIONS</code>.
     */
    public Long getRollbackTransactions() {
        return (Long) get(18);
    }

    /**
     * Setter for
     * <code>information_schema.CLIENT_STATISTICS.DENIED_CONNECTIONS</code>.
     */
    public ClientStatisticsRecord setDeniedConnections(Long value) {
        set(19, value);
        return this;
    }

    /**
     * Getter for
     * <code>information_schema.CLIENT_STATISTICS.DENIED_CONNECTIONS</code>.
     */
    public Long getDeniedConnections() {
        return (Long) get(19);
    }

    /**
     * Setter for
     * <code>information_schema.CLIENT_STATISTICS.LOST_CONNECTIONS</code>.
     */
    public ClientStatisticsRecord setLostConnections(Long value) {
        set(20, value);
        return this;
    }

    /**
     * Getter for
     * <code>information_schema.CLIENT_STATISTICS.LOST_CONNECTIONS</code>.
     */
    public Long getLostConnections() {
        return (Long) get(20);
    }

    /**
     * Setter for
     * <code>information_schema.CLIENT_STATISTICS.ACCESS_DENIED</code>.
     */
    public ClientStatisticsRecord setAccessDenied(Long value) {
        set(21, value);
        return this;
    }

    /**
     * Getter for
     * <code>information_schema.CLIENT_STATISTICS.ACCESS_DENIED</code>.
     */
    public Long getAccessDenied() {
        return (Long) get(21);
    }

    /**
     * Setter for
     * <code>information_schema.CLIENT_STATISTICS.EMPTY_QUERIES</code>.
     */
    public ClientStatisticsRecord setEmptyQueries(Long value) {
        set(22, value);
        return this;
    }

    /**
     * Getter for
     * <code>information_schema.CLIENT_STATISTICS.EMPTY_QUERIES</code>.
     */
    public Long getEmptyQueries() {
        return (Long) get(22);
    }

    /**
     * Setter for
     * <code>information_schema.CLIENT_STATISTICS.TOTAL_SSL_CONNECTIONS</code>.
     */
    public ClientStatisticsRecord setTotalSslConnections(ULong value) {
        set(23, value);
        return this;
    }

    /**
     * Getter for
     * <code>information_schema.CLIENT_STATISTICS.TOTAL_SSL_CONNECTIONS</code>.
     */
    public ULong getTotalSslConnections() {
        return (ULong) get(23);
    }

    /**
     * Setter for
     * <code>information_schema.CLIENT_STATISTICS.MAX_STATEMENT_TIME_EXCEEDED</code>.
     */
    public ClientStatisticsRecord setMaxStatementTimeExceeded(Long value) {
        set(24, value);
        return this;
    }

    /**
     * Getter for
     * <code>information_schema.CLIENT_STATISTICS.MAX_STATEMENT_TIME_EXCEEDED</code>.
     */
    public Long getMaxStatementTimeExceeded() {
        return (Long) get(24);
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ClientStatisticsRecord
     */
    public ClientStatisticsRecord() {
        super(ClientStatistics.CLIENT_STATISTICS);
    }

    /**
     * Create a detached, initialised ClientStatisticsRecord
     */
    public ClientStatisticsRecord(String client, Long totalConnections, Long concurrentConnections, Long connectedTime, Double busyTime, Double cpuTime, Long bytesReceived, Long bytesSent, Long binlogBytesWritten, Long rowsRead, Long rowsSent, Long rowsDeleted, Long rowsInserted, Long rowsUpdated, Long selectCommands, Long updateCommands, Long otherCommands, Long commitTransactions, Long rollbackTransactions, Long deniedConnections, Long lostConnections, Long accessDenied, Long emptyQueries, ULong totalSslConnections, Long maxStatementTimeExceeded) {
        super(ClientStatistics.CLIENT_STATISTICS);

        setClient(client);
        setTotalConnections(totalConnections);
        setConcurrentConnections(concurrentConnections);
        setConnectedTime(connectedTime);
        setBusyTime(busyTime);
        setCpuTime(cpuTime);
        setBytesReceived(bytesReceived);
        setBytesSent(bytesSent);
        setBinlogBytesWritten(binlogBytesWritten);
        setRowsRead(rowsRead);
        setRowsSent(rowsSent);
        setRowsDeleted(rowsDeleted);
        setRowsInserted(rowsInserted);
        setRowsUpdated(rowsUpdated);
        setSelectCommands(selectCommands);
        setUpdateCommands(updateCommands);
        setOtherCommands(otherCommands);
        setCommitTransactions(commitTransactions);
        setRollbackTransactions(rollbackTransactions);
        setDeniedConnections(deniedConnections);
        setLostConnections(lostConnections);
        setAccessDenied(accessDenied);
        setEmptyQueries(emptyQueries);
        setTotalSslConnections(totalSslConnections);
        setMaxStatementTimeExceeded(maxStatementTimeExceeded);
    }

    /**
     * Create a detached, initialised ClientStatisticsRecord
     */
    public ClientStatisticsRecord(com.sweeti.lemon.information_schema.tables.pojos.ClientStatistics value) {
        super(ClientStatistics.CLIENT_STATISTICS);

        if (value != null) {
            setClient(value.getClient());
            setTotalConnections(value.getTotalConnections());
            setConcurrentConnections(value.getConcurrentConnections());
            setConnectedTime(value.getConnectedTime());
            setBusyTime(value.getBusyTime());
            setCpuTime(value.getCpuTime());
            setBytesReceived(value.getBytesReceived());
            setBytesSent(value.getBytesSent());
            setBinlogBytesWritten(value.getBinlogBytesWritten());
            setRowsRead(value.getRowsRead());
            setRowsSent(value.getRowsSent());
            setRowsDeleted(value.getRowsDeleted());
            setRowsInserted(value.getRowsInserted());
            setRowsUpdated(value.getRowsUpdated());
            setSelectCommands(value.getSelectCommands());
            setUpdateCommands(value.getUpdateCommands());
            setOtherCommands(value.getOtherCommands());
            setCommitTransactions(value.getCommitTransactions());
            setRollbackTransactions(value.getRollbackTransactions());
            setDeniedConnections(value.getDeniedConnections());
            setLostConnections(value.getLostConnections());
            setAccessDenied(value.getAccessDenied());
            setEmptyQueries(value.getEmptyQueries());
            setTotalSslConnections(value.getTotalSslConnections());
            setMaxStatementTimeExceeded(value.getMaxStatementTimeExceeded());
        }
    }
}
