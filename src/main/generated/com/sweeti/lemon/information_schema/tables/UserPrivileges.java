/*
 * This file is generated by jOOQ.
 */
package com.sweeti.lemon.information_schema.tables;


import com.sweeti.lemon.information_schema.InformationSchema;
import com.sweeti.lemon.information_schema.tables.records.UserPrivilegesRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserPrivileges extends TableImpl<UserPrivilegesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>information_schema.USER_PRIVILEGES</code>
     */
    public static final UserPrivileges USER_PRIVILEGES = new UserPrivileges();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserPrivilegesRecord> getRecordType() {
        return UserPrivilegesRecord.class;
    }

    /**
     * The column <code>information_schema.USER_PRIVILEGES.GRANTEE</code>.
     */
    public final TableField<UserPrivilegesRecord, String> GRANTEE = createField(DSL.name("GRANTEE"), SQLDataType.VARCHAR(385).nullable(false), this, "");

    /**
     * The column <code>information_schema.USER_PRIVILEGES.TABLE_CATALOG</code>.
     */
    public final TableField<UserPrivilegesRecord, String> TABLE_CATALOG = createField(DSL.name("TABLE_CATALOG"), SQLDataType.VARCHAR(512).nullable(false), this, "");

    /**
     * The column
     * <code>information_schema.USER_PRIVILEGES.PRIVILEGE_TYPE</code>.
     */
    public final TableField<UserPrivilegesRecord, String> PRIVILEGE_TYPE = createField(DSL.name("PRIVILEGE_TYPE"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>information_schema.USER_PRIVILEGES.IS_GRANTABLE</code>.
     */
    public final TableField<UserPrivilegesRecord, String> IS_GRANTABLE = createField(DSL.name("IS_GRANTABLE"), SQLDataType.VARCHAR(3).nullable(false), this, "");

    private UserPrivileges(Name alias, Table<UserPrivilegesRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserPrivileges(Name alias, Table<UserPrivilegesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>information_schema.USER_PRIVILEGES</code> table
     * reference
     */
    public UserPrivileges(String alias) {
        this(DSL.name(alias), USER_PRIVILEGES);
    }

    /**
     * Create an aliased <code>information_schema.USER_PRIVILEGES</code> table
     * reference
     */
    public UserPrivileges(Name alias) {
        this(alias, USER_PRIVILEGES);
    }

    /**
     * Create a <code>information_schema.USER_PRIVILEGES</code> table reference
     */
    public UserPrivileges() {
        this(DSL.name("USER_PRIVILEGES"), null);
    }

    public <O extends Record> UserPrivileges(Table<O> child, ForeignKey<O, UserPrivilegesRecord> key) {
        super(child, key, USER_PRIVILEGES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : InformationSchema.INFORMATION_SCHEMA;
    }

    @Override
    public UserPrivileges as(String alias) {
        return new UserPrivileges(DSL.name(alias), this);
    }

    @Override
    public UserPrivileges as(Name alias) {
        return new UserPrivileges(alias, this);
    }

    @Override
    public UserPrivileges as(Table<?> alias) {
        return new UserPrivileges(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserPrivileges rename(String name) {
        return new UserPrivileges(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserPrivileges rename(Name name) {
        return new UserPrivileges(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserPrivileges rename(Table<?> name) {
        return new UserPrivileges(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
