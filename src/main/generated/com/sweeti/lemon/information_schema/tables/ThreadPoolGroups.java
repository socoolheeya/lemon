/*
 * This file is generated by jOOQ.
 */
package com.sweeti.lemon.information_schema.tables;


import com.sweeti.lemon.information_schema.InformationSchema;
import com.sweeti.lemon.information_schema.tables.records.ThreadPoolGroupsRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ThreadPoolGroups extends TableImpl<ThreadPoolGroupsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>information_schema.THREAD_POOL_GROUPS</code>
     */
    public static final ThreadPoolGroups THREAD_POOL_GROUPS = new ThreadPoolGroups();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ThreadPoolGroupsRecord> getRecordType() {
        return ThreadPoolGroupsRecord.class;
    }

    /**
     * The column <code>information_schema.THREAD_POOL_GROUPS.GROUP_ID</code>.
     */
    public final TableField<ThreadPoolGroupsRecord, Integer> GROUP_ID = createField(DSL.name("GROUP_ID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>information_schema.THREAD_POOL_GROUPS.CONNECTIONS</code>.
     */
    public final TableField<ThreadPoolGroupsRecord, Integer> CONNECTIONS = createField(DSL.name("CONNECTIONS"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>information_schema.THREAD_POOL_GROUPS.THREADS</code>.
     */
    public final TableField<ThreadPoolGroupsRecord, Integer> THREADS = createField(DSL.name("THREADS"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>information_schema.THREAD_POOL_GROUPS.ACTIVE_THREADS</code>.
     */
    public final TableField<ThreadPoolGroupsRecord, Integer> ACTIVE_THREADS = createField(DSL.name("ACTIVE_THREADS"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>information_schema.THREAD_POOL_GROUPS.STANDBY_THREADS</code>.
     */
    public final TableField<ThreadPoolGroupsRecord, Integer> STANDBY_THREADS = createField(DSL.name("STANDBY_THREADS"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>information_schema.THREAD_POOL_GROUPS.QUEUE_LENGTH</code>.
     */
    public final TableField<ThreadPoolGroupsRecord, Integer> QUEUE_LENGTH = createField(DSL.name("QUEUE_LENGTH"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>information_schema.THREAD_POOL_GROUPS.HAS_LISTENER</code>.
     */
    public final TableField<ThreadPoolGroupsRecord, Byte> HAS_LISTENER = createField(DSL.name("HAS_LISTENER"), SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>information_schema.THREAD_POOL_GROUPS.IS_STALLED</code>.
     */
    public final TableField<ThreadPoolGroupsRecord, Byte> IS_STALLED = createField(DSL.name("IS_STALLED"), SQLDataType.TINYINT.nullable(false), this, "");

    private ThreadPoolGroups(Name alias, Table<ThreadPoolGroupsRecord> aliased) {
        this(alias, aliased, null);
    }

    private ThreadPoolGroups(Name alias, Table<ThreadPoolGroupsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>information_schema.THREAD_POOL_GROUPS</code>
     * table reference
     */
    public ThreadPoolGroups(String alias) {
        this(DSL.name(alias), THREAD_POOL_GROUPS);
    }

    /**
     * Create an aliased <code>information_schema.THREAD_POOL_GROUPS</code>
     * table reference
     */
    public ThreadPoolGroups(Name alias) {
        this(alias, THREAD_POOL_GROUPS);
    }

    /**
     * Create a <code>information_schema.THREAD_POOL_GROUPS</code> table
     * reference
     */
    public ThreadPoolGroups() {
        this(DSL.name("THREAD_POOL_GROUPS"), null);
    }

    public <O extends Record> ThreadPoolGroups(Table<O> child, ForeignKey<O, ThreadPoolGroupsRecord> key) {
        super(child, key, THREAD_POOL_GROUPS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : InformationSchema.INFORMATION_SCHEMA;
    }

    @Override
    public ThreadPoolGroups as(String alias) {
        return new ThreadPoolGroups(DSL.name(alias), this);
    }

    @Override
    public ThreadPoolGroups as(Name alias) {
        return new ThreadPoolGroups(alias, this);
    }

    @Override
    public ThreadPoolGroups as(Table<?> alias) {
        return new ThreadPoolGroups(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ThreadPoolGroups rename(String name) {
        return new ThreadPoolGroups(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ThreadPoolGroups rename(Name name) {
        return new ThreadPoolGroups(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ThreadPoolGroups rename(Table<?> name) {
        return new ThreadPoolGroups(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, Integer, Integer, Integer, Integer, Integer, Byte, Byte> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Byte, ? super Byte, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Byte, ? super Byte, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
