/*
 * This file is generated by jOOQ.
 */
package com.sweeti.lemon.information_schema.tables.pojos;


import com.sweeti.lemon.information_schema.enums.InnodbTrxTrxIsolationLevel;

import java.io.Serializable;
import java.time.LocalDateTime;

import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InnodbTrx implements Serializable {

    private static final long serialVersionUID = 1L;

    private final ULong trxId;
    private final String trxState;
    private final LocalDateTime trxStarted;
    private final String trxRequestedLockId;
    private final LocalDateTime trxWaitStarted;
    private final ULong trxWeight;
    private final ULong trxMysqlThreadId;
    private final String trxQuery;
    private final String trxOperationState;
    private final ULong trxTablesInUse;
    private final ULong trxTablesLocked;
    private final ULong trxLockStructs;
    private final ULong trxLockMemoryBytes;
    private final ULong trxRowsLocked;
    private final ULong trxRowsModified;
    private final ULong trxConcurrencyTickets;
    private final InnodbTrxTrxIsolationLevel trxIsolationLevel;
    private final Integer trxUniqueChecks;
    private final Integer trxForeignKeyChecks;
    private final String trxLastForeignKeyError;
    private final Integer trxIsReadOnly;
    private final Integer trxAutocommitNonLocking;

    public InnodbTrx(InnodbTrx value) {
        this.trxId = value.trxId;
        this.trxState = value.trxState;
        this.trxStarted = value.trxStarted;
        this.trxRequestedLockId = value.trxRequestedLockId;
        this.trxWaitStarted = value.trxWaitStarted;
        this.trxWeight = value.trxWeight;
        this.trxMysqlThreadId = value.trxMysqlThreadId;
        this.trxQuery = value.trxQuery;
        this.trxOperationState = value.trxOperationState;
        this.trxTablesInUse = value.trxTablesInUse;
        this.trxTablesLocked = value.trxTablesLocked;
        this.trxLockStructs = value.trxLockStructs;
        this.trxLockMemoryBytes = value.trxLockMemoryBytes;
        this.trxRowsLocked = value.trxRowsLocked;
        this.trxRowsModified = value.trxRowsModified;
        this.trxConcurrencyTickets = value.trxConcurrencyTickets;
        this.trxIsolationLevel = value.trxIsolationLevel;
        this.trxUniqueChecks = value.trxUniqueChecks;
        this.trxForeignKeyChecks = value.trxForeignKeyChecks;
        this.trxLastForeignKeyError = value.trxLastForeignKeyError;
        this.trxIsReadOnly = value.trxIsReadOnly;
        this.trxAutocommitNonLocking = value.trxAutocommitNonLocking;
    }

    public InnodbTrx(
        ULong trxId,
        String trxState,
        LocalDateTime trxStarted,
        String trxRequestedLockId,
        LocalDateTime trxWaitStarted,
        ULong trxWeight,
        ULong trxMysqlThreadId,
        String trxQuery,
        String trxOperationState,
        ULong trxTablesInUse,
        ULong trxTablesLocked,
        ULong trxLockStructs,
        ULong trxLockMemoryBytes,
        ULong trxRowsLocked,
        ULong trxRowsModified,
        ULong trxConcurrencyTickets,
        InnodbTrxTrxIsolationLevel trxIsolationLevel,
        Integer trxUniqueChecks,
        Integer trxForeignKeyChecks,
        String trxLastForeignKeyError,
        Integer trxIsReadOnly,
        Integer trxAutocommitNonLocking
    ) {
        this.trxId = trxId;
        this.trxState = trxState;
        this.trxStarted = trxStarted;
        this.trxRequestedLockId = trxRequestedLockId;
        this.trxWaitStarted = trxWaitStarted;
        this.trxWeight = trxWeight;
        this.trxMysqlThreadId = trxMysqlThreadId;
        this.trxQuery = trxQuery;
        this.trxOperationState = trxOperationState;
        this.trxTablesInUse = trxTablesInUse;
        this.trxTablesLocked = trxTablesLocked;
        this.trxLockStructs = trxLockStructs;
        this.trxLockMemoryBytes = trxLockMemoryBytes;
        this.trxRowsLocked = trxRowsLocked;
        this.trxRowsModified = trxRowsModified;
        this.trxConcurrencyTickets = trxConcurrencyTickets;
        this.trxIsolationLevel = trxIsolationLevel;
        this.trxUniqueChecks = trxUniqueChecks;
        this.trxForeignKeyChecks = trxForeignKeyChecks;
        this.trxLastForeignKeyError = trxLastForeignKeyError;
        this.trxIsReadOnly = trxIsReadOnly;
        this.trxAutocommitNonLocking = trxAutocommitNonLocking;
    }

    /**
     * Getter for <code>information_schema.INNODB_TRX.trx_id</code>.
     */
    public ULong getTrxId() {
        return this.trxId;
    }

    /**
     * Getter for <code>information_schema.INNODB_TRX.trx_state</code>.
     */
    public String getTrxState() {
        return this.trxState;
    }

    /**
     * Getter for <code>information_schema.INNODB_TRX.trx_started</code>.
     */
    public LocalDateTime getTrxStarted() {
        return this.trxStarted;
    }

    /**
     * Getter for
     * <code>information_schema.INNODB_TRX.trx_requested_lock_id</code>.
     */
    public String getTrxRequestedLockId() {
        return this.trxRequestedLockId;
    }

    /**
     * Getter for <code>information_schema.INNODB_TRX.trx_wait_started</code>.
     */
    public LocalDateTime getTrxWaitStarted() {
        return this.trxWaitStarted;
    }

    /**
     * Getter for <code>information_schema.INNODB_TRX.trx_weight</code>.
     */
    public ULong getTrxWeight() {
        return this.trxWeight;
    }

    /**
     * Getter for
     * <code>information_schema.INNODB_TRX.trx_mysql_thread_id</code>.
     */
    public ULong getTrxMysqlThreadId() {
        return this.trxMysqlThreadId;
    }

    /**
     * Getter for <code>information_schema.INNODB_TRX.trx_query</code>.
     */
    public String getTrxQuery() {
        return this.trxQuery;
    }

    /**
     * Getter for
     * <code>information_schema.INNODB_TRX.trx_operation_state</code>.
     */
    public String getTrxOperationState() {
        return this.trxOperationState;
    }

    /**
     * Getter for <code>information_schema.INNODB_TRX.trx_tables_in_use</code>.
     */
    public ULong getTrxTablesInUse() {
        return this.trxTablesInUse;
    }

    /**
     * Getter for <code>information_schema.INNODB_TRX.trx_tables_locked</code>.
     */
    public ULong getTrxTablesLocked() {
        return this.trxTablesLocked;
    }

    /**
     * Getter for <code>information_schema.INNODB_TRX.trx_lock_structs</code>.
     */
    public ULong getTrxLockStructs() {
        return this.trxLockStructs;
    }

    /**
     * Getter for
     * <code>information_schema.INNODB_TRX.trx_lock_memory_bytes</code>.
     */
    public ULong getTrxLockMemoryBytes() {
        return this.trxLockMemoryBytes;
    }

    /**
     * Getter for <code>information_schema.INNODB_TRX.trx_rows_locked</code>.
     */
    public ULong getTrxRowsLocked() {
        return this.trxRowsLocked;
    }

    /**
     * Getter for <code>information_schema.INNODB_TRX.trx_rows_modified</code>.
     */
    public ULong getTrxRowsModified() {
        return this.trxRowsModified;
    }

    /**
     * Getter for
     * <code>information_schema.INNODB_TRX.trx_concurrency_tickets</code>.
     */
    public ULong getTrxConcurrencyTickets() {
        return this.trxConcurrencyTickets;
    }

    /**
     * Getter for
     * <code>information_schema.INNODB_TRX.trx_isolation_level</code>.
     */
    public InnodbTrxTrxIsolationLevel getTrxIsolationLevel() {
        return this.trxIsolationLevel;
    }

    /**
     * Getter for <code>information_schema.INNODB_TRX.trx_unique_checks</code>.
     */
    public Integer getTrxUniqueChecks() {
        return this.trxUniqueChecks;
    }

    /**
     * Getter for
     * <code>information_schema.INNODB_TRX.trx_foreign_key_checks</code>.
     */
    public Integer getTrxForeignKeyChecks() {
        return this.trxForeignKeyChecks;
    }

    /**
     * Getter for
     * <code>information_schema.INNODB_TRX.trx_last_foreign_key_error</code>.
     */
    public String getTrxLastForeignKeyError() {
        return this.trxLastForeignKeyError;
    }

    /**
     * Getter for <code>information_schema.INNODB_TRX.trx_is_read_only</code>.
     */
    public Integer getTrxIsReadOnly() {
        return this.trxIsReadOnly;
    }

    /**
     * Getter for
     * <code>information_schema.INNODB_TRX.trx_autocommit_non_locking</code>.
     */
    public Integer getTrxAutocommitNonLocking() {
        return this.trxAutocommitNonLocking;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final InnodbTrx other = (InnodbTrx) obj;
        if (this.trxId == null) {
            if (other.trxId != null)
                return false;
        }
        else if (!this.trxId.equals(other.trxId))
            return false;
        if (this.trxState == null) {
            if (other.trxState != null)
                return false;
        }
        else if (!this.trxState.equals(other.trxState))
            return false;
        if (this.trxStarted == null) {
            if (other.trxStarted != null)
                return false;
        }
        else if (!this.trxStarted.equals(other.trxStarted))
            return false;
        if (this.trxRequestedLockId == null) {
            if (other.trxRequestedLockId != null)
                return false;
        }
        else if (!this.trxRequestedLockId.equals(other.trxRequestedLockId))
            return false;
        if (this.trxWaitStarted == null) {
            if (other.trxWaitStarted != null)
                return false;
        }
        else if (!this.trxWaitStarted.equals(other.trxWaitStarted))
            return false;
        if (this.trxWeight == null) {
            if (other.trxWeight != null)
                return false;
        }
        else if (!this.trxWeight.equals(other.trxWeight))
            return false;
        if (this.trxMysqlThreadId == null) {
            if (other.trxMysqlThreadId != null)
                return false;
        }
        else if (!this.trxMysqlThreadId.equals(other.trxMysqlThreadId))
            return false;
        if (this.trxQuery == null) {
            if (other.trxQuery != null)
                return false;
        }
        else if (!this.trxQuery.equals(other.trxQuery))
            return false;
        if (this.trxOperationState == null) {
            if (other.trxOperationState != null)
                return false;
        }
        else if (!this.trxOperationState.equals(other.trxOperationState))
            return false;
        if (this.trxTablesInUse == null) {
            if (other.trxTablesInUse != null)
                return false;
        }
        else if (!this.trxTablesInUse.equals(other.trxTablesInUse))
            return false;
        if (this.trxTablesLocked == null) {
            if (other.trxTablesLocked != null)
                return false;
        }
        else if (!this.trxTablesLocked.equals(other.trxTablesLocked))
            return false;
        if (this.trxLockStructs == null) {
            if (other.trxLockStructs != null)
                return false;
        }
        else if (!this.trxLockStructs.equals(other.trxLockStructs))
            return false;
        if (this.trxLockMemoryBytes == null) {
            if (other.trxLockMemoryBytes != null)
                return false;
        }
        else if (!this.trxLockMemoryBytes.equals(other.trxLockMemoryBytes))
            return false;
        if (this.trxRowsLocked == null) {
            if (other.trxRowsLocked != null)
                return false;
        }
        else if (!this.trxRowsLocked.equals(other.trxRowsLocked))
            return false;
        if (this.trxRowsModified == null) {
            if (other.trxRowsModified != null)
                return false;
        }
        else if (!this.trxRowsModified.equals(other.trxRowsModified))
            return false;
        if (this.trxConcurrencyTickets == null) {
            if (other.trxConcurrencyTickets != null)
                return false;
        }
        else if (!this.trxConcurrencyTickets.equals(other.trxConcurrencyTickets))
            return false;
        if (this.trxIsolationLevel == null) {
            if (other.trxIsolationLevel != null)
                return false;
        }
        else if (!this.trxIsolationLevel.equals(other.trxIsolationLevel))
            return false;
        if (this.trxUniqueChecks == null) {
            if (other.trxUniqueChecks != null)
                return false;
        }
        else if (!this.trxUniqueChecks.equals(other.trxUniqueChecks))
            return false;
        if (this.trxForeignKeyChecks == null) {
            if (other.trxForeignKeyChecks != null)
                return false;
        }
        else if (!this.trxForeignKeyChecks.equals(other.trxForeignKeyChecks))
            return false;
        if (this.trxLastForeignKeyError == null) {
            if (other.trxLastForeignKeyError != null)
                return false;
        }
        else if (!this.trxLastForeignKeyError.equals(other.trxLastForeignKeyError))
            return false;
        if (this.trxIsReadOnly == null) {
            if (other.trxIsReadOnly != null)
                return false;
        }
        else if (!this.trxIsReadOnly.equals(other.trxIsReadOnly))
            return false;
        if (this.trxAutocommitNonLocking == null) {
            if (other.trxAutocommitNonLocking != null)
                return false;
        }
        else if (!this.trxAutocommitNonLocking.equals(other.trxAutocommitNonLocking))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.trxId == null) ? 0 : this.trxId.hashCode());
        result = prime * result + ((this.trxState == null) ? 0 : this.trxState.hashCode());
        result = prime * result + ((this.trxStarted == null) ? 0 : this.trxStarted.hashCode());
        result = prime * result + ((this.trxRequestedLockId == null) ? 0 : this.trxRequestedLockId.hashCode());
        result = prime * result + ((this.trxWaitStarted == null) ? 0 : this.trxWaitStarted.hashCode());
        result = prime * result + ((this.trxWeight == null) ? 0 : this.trxWeight.hashCode());
        result = prime * result + ((this.trxMysqlThreadId == null) ? 0 : this.trxMysqlThreadId.hashCode());
        result = prime * result + ((this.trxQuery == null) ? 0 : this.trxQuery.hashCode());
        result = prime * result + ((this.trxOperationState == null) ? 0 : this.trxOperationState.hashCode());
        result = prime * result + ((this.trxTablesInUse == null) ? 0 : this.trxTablesInUse.hashCode());
        result = prime * result + ((this.trxTablesLocked == null) ? 0 : this.trxTablesLocked.hashCode());
        result = prime * result + ((this.trxLockStructs == null) ? 0 : this.trxLockStructs.hashCode());
        result = prime * result + ((this.trxLockMemoryBytes == null) ? 0 : this.trxLockMemoryBytes.hashCode());
        result = prime * result + ((this.trxRowsLocked == null) ? 0 : this.trxRowsLocked.hashCode());
        result = prime * result + ((this.trxRowsModified == null) ? 0 : this.trxRowsModified.hashCode());
        result = prime * result + ((this.trxConcurrencyTickets == null) ? 0 : this.trxConcurrencyTickets.hashCode());
        result = prime * result + ((this.trxIsolationLevel == null) ? 0 : this.trxIsolationLevel.hashCode());
        result = prime * result + ((this.trxUniqueChecks == null) ? 0 : this.trxUniqueChecks.hashCode());
        result = prime * result + ((this.trxForeignKeyChecks == null) ? 0 : this.trxForeignKeyChecks.hashCode());
        result = prime * result + ((this.trxLastForeignKeyError == null) ? 0 : this.trxLastForeignKeyError.hashCode());
        result = prime * result + ((this.trxIsReadOnly == null) ? 0 : this.trxIsReadOnly.hashCode());
        result = prime * result + ((this.trxAutocommitNonLocking == null) ? 0 : this.trxAutocommitNonLocking.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("InnodbTrx (");

        sb.append(trxId);
        sb.append(", ").append(trxState);
        sb.append(", ").append(trxStarted);
        sb.append(", ").append(trxRequestedLockId);
        sb.append(", ").append(trxWaitStarted);
        sb.append(", ").append(trxWeight);
        sb.append(", ").append(trxMysqlThreadId);
        sb.append(", ").append(trxQuery);
        sb.append(", ").append(trxOperationState);
        sb.append(", ").append(trxTablesInUse);
        sb.append(", ").append(trxTablesLocked);
        sb.append(", ").append(trxLockStructs);
        sb.append(", ").append(trxLockMemoryBytes);
        sb.append(", ").append(trxRowsLocked);
        sb.append(", ").append(trxRowsModified);
        sb.append(", ").append(trxConcurrencyTickets);
        sb.append(", ").append(trxIsolationLevel);
        sb.append(", ").append(trxUniqueChecks);
        sb.append(", ").append(trxForeignKeyChecks);
        sb.append(", ").append(trxLastForeignKeyError);
        sb.append(", ").append(trxIsReadOnly);
        sb.append(", ").append(trxAutocommitNonLocking);

        sb.append(")");
        return sb.toString();
    }
}
