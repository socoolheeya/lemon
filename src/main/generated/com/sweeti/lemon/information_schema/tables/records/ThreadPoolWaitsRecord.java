/*
 * This file is generated by jOOQ.
 */
package com.sweeti.lemon.information_schema.tables.records;


import com.sweeti.lemon.information_schema.tables.ThreadPoolWaits;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ThreadPoolWaitsRecord extends TableRecordImpl<ThreadPoolWaitsRecord> implements Record2<String, Long> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>information_schema.THREAD_POOL_WAITS.REASON</code>.
     */
    public ThreadPoolWaitsRecord setReason(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>information_schema.THREAD_POOL_WAITS.REASON</code>.
     */
    public String getReason() {
        return (String) get(0);
    }

    /**
     * Setter for <code>information_schema.THREAD_POOL_WAITS.COUNT</code>.
     */
    public ThreadPoolWaitsRecord setCount(Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>information_schema.THREAD_POOL_WAITS.COUNT</code>.
     */
    public Long getCount() {
        return (Long) get(1);
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<String, Long> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return ThreadPoolWaits.THREAD_POOL_WAITS.REASON;
    }

    @Override
    public Field<Long> field2() {
        return ThreadPoolWaits.THREAD_POOL_WAITS.COUNT;
    }

    @Override
    public String component1() {
        return getReason();
    }

    @Override
    public Long component2() {
        return getCount();
    }

    @Override
    public String value1() {
        return getReason();
    }

    @Override
    public Long value2() {
        return getCount();
    }

    @Override
    public ThreadPoolWaitsRecord value1(String value) {
        setReason(value);
        return this;
    }

    @Override
    public ThreadPoolWaitsRecord value2(Long value) {
        setCount(value);
        return this;
    }

    @Override
    public ThreadPoolWaitsRecord values(String value1, Long value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ThreadPoolWaitsRecord
     */
    public ThreadPoolWaitsRecord() {
        super(ThreadPoolWaits.THREAD_POOL_WAITS);
    }

    /**
     * Create a detached, initialised ThreadPoolWaitsRecord
     */
    public ThreadPoolWaitsRecord(String reason, Long count) {
        super(ThreadPoolWaits.THREAD_POOL_WAITS);

        setReason(reason);
        setCount(count);
    }

    /**
     * Create a detached, initialised ThreadPoolWaitsRecord
     */
    public ThreadPoolWaitsRecord(com.sweeti.lemon.information_schema.tables.pojos.ThreadPoolWaits value) {
        super(ThreadPoolWaits.THREAD_POOL_WAITS);

        if (value != null) {
            setReason(value.getReason());
            setCount(value.getCount());
        }
    }
}
