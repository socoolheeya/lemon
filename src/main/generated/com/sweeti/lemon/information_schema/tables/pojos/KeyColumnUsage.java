/*
 * This file is generated by jOOQ.
 */
package com.sweeti.lemon.information_schema.tables.pojos;


import java.io.Serializable;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class KeyColumnUsage implements Serializable {

    private static final long serialVersionUID = 1L;

    private final String constraintCatalog;
    private final String constraintSchema;
    private final String constraintName;
    private final String tableCatalog;
    private final String tableSchema;
    private final String tableName;
    private final String columnName;
    private final Long ordinalPosition;
    private final Long positionInUniqueConstraint;
    private final String referencedTableSchema;
    private final String referencedTableName;
    private final String referencedColumnName;

    public KeyColumnUsage(KeyColumnUsage value) {
        this.constraintCatalog = value.constraintCatalog;
        this.constraintSchema = value.constraintSchema;
        this.constraintName = value.constraintName;
        this.tableCatalog = value.tableCatalog;
        this.tableSchema = value.tableSchema;
        this.tableName = value.tableName;
        this.columnName = value.columnName;
        this.ordinalPosition = value.ordinalPosition;
        this.positionInUniqueConstraint = value.positionInUniqueConstraint;
        this.referencedTableSchema = value.referencedTableSchema;
        this.referencedTableName = value.referencedTableName;
        this.referencedColumnName = value.referencedColumnName;
    }

    public KeyColumnUsage(
        String constraintCatalog,
        String constraintSchema,
        String constraintName,
        String tableCatalog,
        String tableSchema,
        String tableName,
        String columnName,
        Long ordinalPosition,
        Long positionInUniqueConstraint,
        String referencedTableSchema,
        String referencedTableName,
        String referencedColumnName
    ) {
        this.constraintCatalog = constraintCatalog;
        this.constraintSchema = constraintSchema;
        this.constraintName = constraintName;
        this.tableCatalog = tableCatalog;
        this.tableSchema = tableSchema;
        this.tableName = tableName;
        this.columnName = columnName;
        this.ordinalPosition = ordinalPosition;
        this.positionInUniqueConstraint = positionInUniqueConstraint;
        this.referencedTableSchema = referencedTableSchema;
        this.referencedTableName = referencedTableName;
        this.referencedColumnName = referencedColumnName;
    }

    /**
     * Getter for
     * <code>information_schema.KEY_COLUMN_USAGE.CONSTRAINT_CATALOG</code>.
     */
    public String getConstraintCatalog() {
        return this.constraintCatalog;
    }

    /**
     * Getter for
     * <code>information_schema.KEY_COLUMN_USAGE.CONSTRAINT_SCHEMA</code>.
     */
    public String getConstraintSchema() {
        return this.constraintSchema;
    }

    /**
     * Getter for
     * <code>information_schema.KEY_COLUMN_USAGE.CONSTRAINT_NAME</code>.
     */
    public String getConstraintName() {
        return this.constraintName;
    }

    /**
     * Getter for
     * <code>information_schema.KEY_COLUMN_USAGE.TABLE_CATALOG</code>.
     */
    public String getTableCatalog() {
        return this.tableCatalog;
    }

    /**
     * Getter for <code>information_schema.KEY_COLUMN_USAGE.TABLE_SCHEMA</code>.
     */
    public String getTableSchema() {
        return this.tableSchema;
    }

    /**
     * Getter for <code>information_schema.KEY_COLUMN_USAGE.TABLE_NAME</code>.
     */
    public String getTableName() {
        return this.tableName;
    }

    /**
     * Getter for <code>information_schema.KEY_COLUMN_USAGE.COLUMN_NAME</code>.
     */
    public String getColumnName() {
        return this.columnName;
    }

    /**
     * Getter for
     * <code>information_schema.KEY_COLUMN_USAGE.ORDINAL_POSITION</code>.
     */
    public Long getOrdinalPosition() {
        return this.ordinalPosition;
    }

    /**
     * Getter for
     * <code>information_schema.KEY_COLUMN_USAGE.POSITION_IN_UNIQUE_CONSTRAINT</code>.
     */
    public Long getPositionInUniqueConstraint() {
        return this.positionInUniqueConstraint;
    }

    /**
     * Getter for
     * <code>information_schema.KEY_COLUMN_USAGE.REFERENCED_TABLE_SCHEMA</code>.
     */
    public String getReferencedTableSchema() {
        return this.referencedTableSchema;
    }

    /**
     * Getter for
     * <code>information_schema.KEY_COLUMN_USAGE.REFERENCED_TABLE_NAME</code>.
     */
    public String getReferencedTableName() {
        return this.referencedTableName;
    }

    /**
     * Getter for
     * <code>information_schema.KEY_COLUMN_USAGE.REFERENCED_COLUMN_NAME</code>.
     */
    public String getReferencedColumnName() {
        return this.referencedColumnName;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final KeyColumnUsage other = (KeyColumnUsage) obj;
        if (this.constraintCatalog == null) {
            if (other.constraintCatalog != null)
                return false;
        }
        else if (!this.constraintCatalog.equals(other.constraintCatalog))
            return false;
        if (this.constraintSchema == null) {
            if (other.constraintSchema != null)
                return false;
        }
        else if (!this.constraintSchema.equals(other.constraintSchema))
            return false;
        if (this.constraintName == null) {
            if (other.constraintName != null)
                return false;
        }
        else if (!this.constraintName.equals(other.constraintName))
            return false;
        if (this.tableCatalog == null) {
            if (other.tableCatalog != null)
                return false;
        }
        else if (!this.tableCatalog.equals(other.tableCatalog))
            return false;
        if (this.tableSchema == null) {
            if (other.tableSchema != null)
                return false;
        }
        else if (!this.tableSchema.equals(other.tableSchema))
            return false;
        if (this.tableName == null) {
            if (other.tableName != null)
                return false;
        }
        else if (!this.tableName.equals(other.tableName))
            return false;
        if (this.columnName == null) {
            if (other.columnName != null)
                return false;
        }
        else if (!this.columnName.equals(other.columnName))
            return false;
        if (this.ordinalPosition == null) {
            if (other.ordinalPosition != null)
                return false;
        }
        else if (!this.ordinalPosition.equals(other.ordinalPosition))
            return false;
        if (this.positionInUniqueConstraint == null) {
            if (other.positionInUniqueConstraint != null)
                return false;
        }
        else if (!this.positionInUniqueConstraint.equals(other.positionInUniqueConstraint))
            return false;
        if (this.referencedTableSchema == null) {
            if (other.referencedTableSchema != null)
                return false;
        }
        else if (!this.referencedTableSchema.equals(other.referencedTableSchema))
            return false;
        if (this.referencedTableName == null) {
            if (other.referencedTableName != null)
                return false;
        }
        else if (!this.referencedTableName.equals(other.referencedTableName))
            return false;
        if (this.referencedColumnName == null) {
            if (other.referencedColumnName != null)
                return false;
        }
        else if (!this.referencedColumnName.equals(other.referencedColumnName))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.constraintCatalog == null) ? 0 : this.constraintCatalog.hashCode());
        result = prime * result + ((this.constraintSchema == null) ? 0 : this.constraintSchema.hashCode());
        result = prime * result + ((this.constraintName == null) ? 0 : this.constraintName.hashCode());
        result = prime * result + ((this.tableCatalog == null) ? 0 : this.tableCatalog.hashCode());
        result = prime * result + ((this.tableSchema == null) ? 0 : this.tableSchema.hashCode());
        result = prime * result + ((this.tableName == null) ? 0 : this.tableName.hashCode());
        result = prime * result + ((this.columnName == null) ? 0 : this.columnName.hashCode());
        result = prime * result + ((this.ordinalPosition == null) ? 0 : this.ordinalPosition.hashCode());
        result = prime * result + ((this.positionInUniqueConstraint == null) ? 0 : this.positionInUniqueConstraint.hashCode());
        result = prime * result + ((this.referencedTableSchema == null) ? 0 : this.referencedTableSchema.hashCode());
        result = prime * result + ((this.referencedTableName == null) ? 0 : this.referencedTableName.hashCode());
        result = prime * result + ((this.referencedColumnName == null) ? 0 : this.referencedColumnName.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("KeyColumnUsage (");

        sb.append(constraintCatalog);
        sb.append(", ").append(constraintSchema);
        sb.append(", ").append(constraintName);
        sb.append(", ").append(tableCatalog);
        sb.append(", ").append(tableSchema);
        sb.append(", ").append(tableName);
        sb.append(", ").append(columnName);
        sb.append(", ").append(ordinalPosition);
        sb.append(", ").append(positionInUniqueConstraint);
        sb.append(", ").append(referencedTableSchema);
        sb.append(", ").append(referencedTableName);
        sb.append(", ").append(referencedColumnName);

        sb.append(")");
        return sb.toString();
    }
}
