/*
 * This file is generated by jOOQ.
 */
package com.sweeti.lemon.information_schema.tables.pojos;


import com.sweeti.lemon.information_schema.enums.InnodbMetricsType;

import java.io.Serializable;
import java.time.LocalDateTime;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InnodbMetrics implements Serializable {

    private static final long serialVersionUID = 1L;

    private final String name;
    private final String subsystem;
    private final Long count;
    private final Long maxCount;
    private final Long minCount;
    private final Double avgCount;
    private final Long countReset;
    private final Long maxCountReset;
    private final Long minCountReset;
    private final Double avgCountReset;
    private final LocalDateTime timeEnabled;
    private final LocalDateTime timeDisabled;
    private final Long timeElapsed;
    private final LocalDateTime timeReset;
    private final Integer enabled;
    private final InnodbMetricsType type;
    private final String comment;

    public InnodbMetrics(InnodbMetrics value) {
        this.name = value.name;
        this.subsystem = value.subsystem;
        this.count = value.count;
        this.maxCount = value.maxCount;
        this.minCount = value.minCount;
        this.avgCount = value.avgCount;
        this.countReset = value.countReset;
        this.maxCountReset = value.maxCountReset;
        this.minCountReset = value.minCountReset;
        this.avgCountReset = value.avgCountReset;
        this.timeEnabled = value.timeEnabled;
        this.timeDisabled = value.timeDisabled;
        this.timeElapsed = value.timeElapsed;
        this.timeReset = value.timeReset;
        this.enabled = value.enabled;
        this.type = value.type;
        this.comment = value.comment;
    }

    public InnodbMetrics(
        String name,
        String subsystem,
        Long count,
        Long maxCount,
        Long minCount,
        Double avgCount,
        Long countReset,
        Long maxCountReset,
        Long minCountReset,
        Double avgCountReset,
        LocalDateTime timeEnabled,
        LocalDateTime timeDisabled,
        Long timeElapsed,
        LocalDateTime timeReset,
        Integer enabled,
        InnodbMetricsType type,
        String comment
    ) {
        this.name = name;
        this.subsystem = subsystem;
        this.count = count;
        this.maxCount = maxCount;
        this.minCount = minCount;
        this.avgCount = avgCount;
        this.countReset = countReset;
        this.maxCountReset = maxCountReset;
        this.minCountReset = minCountReset;
        this.avgCountReset = avgCountReset;
        this.timeEnabled = timeEnabled;
        this.timeDisabled = timeDisabled;
        this.timeElapsed = timeElapsed;
        this.timeReset = timeReset;
        this.enabled = enabled;
        this.type = type;
        this.comment = comment;
    }

    /**
     * Getter for <code>information_schema.INNODB_METRICS.NAME</code>.
     */
    public String getName() {
        return this.name;
    }

    /**
     * Getter for <code>information_schema.INNODB_METRICS.SUBSYSTEM</code>.
     */
    public String getSubsystem() {
        return this.subsystem;
    }

    /**
     * Getter for <code>information_schema.INNODB_METRICS.COUNT</code>.
     */
    public Long getCount() {
        return this.count;
    }

    /**
     * Getter for <code>information_schema.INNODB_METRICS.MAX_COUNT</code>.
     */
    public Long getMaxCount() {
        return this.maxCount;
    }

    /**
     * Getter for <code>information_schema.INNODB_METRICS.MIN_COUNT</code>.
     */
    public Long getMinCount() {
        return this.minCount;
    }

    /**
     * Getter for <code>information_schema.INNODB_METRICS.AVG_COUNT</code>.
     */
    public Double getAvgCount() {
        return this.avgCount;
    }

    /**
     * Getter for <code>information_schema.INNODB_METRICS.COUNT_RESET</code>.
     */
    public Long getCountReset() {
        return this.countReset;
    }

    /**
     * Getter for
     * <code>information_schema.INNODB_METRICS.MAX_COUNT_RESET</code>.
     */
    public Long getMaxCountReset() {
        return this.maxCountReset;
    }

    /**
     * Getter for
     * <code>information_schema.INNODB_METRICS.MIN_COUNT_RESET</code>.
     */
    public Long getMinCountReset() {
        return this.minCountReset;
    }

    /**
     * Getter for
     * <code>information_schema.INNODB_METRICS.AVG_COUNT_RESET</code>.
     */
    public Double getAvgCountReset() {
        return this.avgCountReset;
    }

    /**
     * Getter for <code>information_schema.INNODB_METRICS.TIME_ENABLED</code>.
     */
    public LocalDateTime getTimeEnabled() {
        return this.timeEnabled;
    }

    /**
     * Getter for <code>information_schema.INNODB_METRICS.TIME_DISABLED</code>.
     */
    public LocalDateTime getTimeDisabled() {
        return this.timeDisabled;
    }

    /**
     * Getter for <code>information_schema.INNODB_METRICS.TIME_ELAPSED</code>.
     */
    public Long getTimeElapsed() {
        return this.timeElapsed;
    }

    /**
     * Getter for <code>information_schema.INNODB_METRICS.TIME_RESET</code>.
     */
    public LocalDateTime getTimeReset() {
        return this.timeReset;
    }

    /**
     * Getter for <code>information_schema.INNODB_METRICS.ENABLED</code>.
     */
    public Integer getEnabled() {
        return this.enabled;
    }

    /**
     * Getter for <code>information_schema.INNODB_METRICS.TYPE</code>.
     */
    public InnodbMetricsType getType() {
        return this.type;
    }

    /**
     * Getter for <code>information_schema.INNODB_METRICS.COMMENT</code>.
     */
    public String getComment() {
        return this.comment;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final InnodbMetrics other = (InnodbMetrics) obj;
        if (this.name == null) {
            if (other.name != null)
                return false;
        }
        else if (!this.name.equals(other.name))
            return false;
        if (this.subsystem == null) {
            if (other.subsystem != null)
                return false;
        }
        else if (!this.subsystem.equals(other.subsystem))
            return false;
        if (this.count == null) {
            if (other.count != null)
                return false;
        }
        else if (!this.count.equals(other.count))
            return false;
        if (this.maxCount == null) {
            if (other.maxCount != null)
                return false;
        }
        else if (!this.maxCount.equals(other.maxCount))
            return false;
        if (this.minCount == null) {
            if (other.minCount != null)
                return false;
        }
        else if (!this.minCount.equals(other.minCount))
            return false;
        if (this.avgCount == null) {
            if (other.avgCount != null)
                return false;
        }
        else if (!this.avgCount.equals(other.avgCount))
            return false;
        if (this.countReset == null) {
            if (other.countReset != null)
                return false;
        }
        else if (!this.countReset.equals(other.countReset))
            return false;
        if (this.maxCountReset == null) {
            if (other.maxCountReset != null)
                return false;
        }
        else if (!this.maxCountReset.equals(other.maxCountReset))
            return false;
        if (this.minCountReset == null) {
            if (other.minCountReset != null)
                return false;
        }
        else if (!this.minCountReset.equals(other.minCountReset))
            return false;
        if (this.avgCountReset == null) {
            if (other.avgCountReset != null)
                return false;
        }
        else if (!this.avgCountReset.equals(other.avgCountReset))
            return false;
        if (this.timeEnabled == null) {
            if (other.timeEnabled != null)
                return false;
        }
        else if (!this.timeEnabled.equals(other.timeEnabled))
            return false;
        if (this.timeDisabled == null) {
            if (other.timeDisabled != null)
                return false;
        }
        else if (!this.timeDisabled.equals(other.timeDisabled))
            return false;
        if (this.timeElapsed == null) {
            if (other.timeElapsed != null)
                return false;
        }
        else if (!this.timeElapsed.equals(other.timeElapsed))
            return false;
        if (this.timeReset == null) {
            if (other.timeReset != null)
                return false;
        }
        else if (!this.timeReset.equals(other.timeReset))
            return false;
        if (this.enabled == null) {
            if (other.enabled != null)
                return false;
        }
        else if (!this.enabled.equals(other.enabled))
            return false;
        if (this.type == null) {
            if (other.type != null)
                return false;
        }
        else if (!this.type.equals(other.type))
            return false;
        if (this.comment == null) {
            if (other.comment != null)
                return false;
        }
        else if (!this.comment.equals(other.comment))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.name == null) ? 0 : this.name.hashCode());
        result = prime * result + ((this.subsystem == null) ? 0 : this.subsystem.hashCode());
        result = prime * result + ((this.count == null) ? 0 : this.count.hashCode());
        result = prime * result + ((this.maxCount == null) ? 0 : this.maxCount.hashCode());
        result = prime * result + ((this.minCount == null) ? 0 : this.minCount.hashCode());
        result = prime * result + ((this.avgCount == null) ? 0 : this.avgCount.hashCode());
        result = prime * result + ((this.countReset == null) ? 0 : this.countReset.hashCode());
        result = prime * result + ((this.maxCountReset == null) ? 0 : this.maxCountReset.hashCode());
        result = prime * result + ((this.minCountReset == null) ? 0 : this.minCountReset.hashCode());
        result = prime * result + ((this.avgCountReset == null) ? 0 : this.avgCountReset.hashCode());
        result = prime * result + ((this.timeEnabled == null) ? 0 : this.timeEnabled.hashCode());
        result = prime * result + ((this.timeDisabled == null) ? 0 : this.timeDisabled.hashCode());
        result = prime * result + ((this.timeElapsed == null) ? 0 : this.timeElapsed.hashCode());
        result = prime * result + ((this.timeReset == null) ? 0 : this.timeReset.hashCode());
        result = prime * result + ((this.enabled == null) ? 0 : this.enabled.hashCode());
        result = prime * result + ((this.type == null) ? 0 : this.type.hashCode());
        result = prime * result + ((this.comment == null) ? 0 : this.comment.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("InnodbMetrics (");

        sb.append(name);
        sb.append(", ").append(subsystem);
        sb.append(", ").append(count);
        sb.append(", ").append(maxCount);
        sb.append(", ").append(minCount);
        sb.append(", ").append(avgCount);
        sb.append(", ").append(countReset);
        sb.append(", ").append(maxCountReset);
        sb.append(", ").append(minCountReset);
        sb.append(", ").append(avgCountReset);
        sb.append(", ").append(timeEnabled);
        sb.append(", ").append(timeDisabled);
        sb.append(", ").append(timeElapsed);
        sb.append(", ").append(timeReset);
        sb.append(", ").append(enabled);
        sb.append(", ").append(type);
        sb.append(", ").append(comment);

        sb.append(")");
        return sb.toString();
    }
}
