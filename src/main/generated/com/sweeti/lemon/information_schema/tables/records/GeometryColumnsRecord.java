/*
 * This file is generated by jOOQ.
 */
package com.sweeti.lemon.information_schema.tables.records;


import com.sweeti.lemon.information_schema.tables.GeometryColumns;

import org.jooq.Field;
import org.jooq.Record13;
import org.jooq.Row13;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GeometryColumnsRecord extends TableRecordImpl<GeometryColumnsRecord> implements Record13<String, String, String, String, String, String, String, String, Byte, Integer, Byte, Byte, Short> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for
     * <code>information_schema.GEOMETRY_COLUMNS.F_TABLE_CATALOG</code>.
     */
    public GeometryColumnsRecord setFTableCatalog(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for
     * <code>information_schema.GEOMETRY_COLUMNS.F_TABLE_CATALOG</code>.
     */
    public String getFTableCatalog() {
        return (String) get(0);
    }

    /**
     * Setter for
     * <code>information_schema.GEOMETRY_COLUMNS.F_TABLE_SCHEMA</code>.
     */
    public GeometryColumnsRecord setFTableSchema(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for
     * <code>information_schema.GEOMETRY_COLUMNS.F_TABLE_SCHEMA</code>.
     */
    public String getFTableSchema() {
        return (String) get(1);
    }

    /**
     * Setter for <code>information_schema.GEOMETRY_COLUMNS.F_TABLE_NAME</code>.
     */
    public GeometryColumnsRecord setFTableName(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>information_schema.GEOMETRY_COLUMNS.F_TABLE_NAME</code>.
     */
    public String getFTableName() {
        return (String) get(2);
    }

    /**
     * Setter for
     * <code>information_schema.GEOMETRY_COLUMNS.F_GEOMETRY_COLUMN</code>.
     */
    public GeometryColumnsRecord setFGeometryColumn(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for
     * <code>information_schema.GEOMETRY_COLUMNS.F_GEOMETRY_COLUMN</code>.
     */
    public String getFGeometryColumn() {
        return (String) get(3);
    }

    /**
     * Setter for
     * <code>information_schema.GEOMETRY_COLUMNS.G_TABLE_CATALOG</code>.
     */
    public GeometryColumnsRecord setGTableCatalog(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for
     * <code>information_schema.GEOMETRY_COLUMNS.G_TABLE_CATALOG</code>.
     */
    public String getGTableCatalog() {
        return (String) get(4);
    }

    /**
     * Setter for
     * <code>information_schema.GEOMETRY_COLUMNS.G_TABLE_SCHEMA</code>.
     */
    public GeometryColumnsRecord setGTableSchema(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for
     * <code>information_schema.GEOMETRY_COLUMNS.G_TABLE_SCHEMA</code>.
     */
    public String getGTableSchema() {
        return (String) get(5);
    }

    /**
     * Setter for <code>information_schema.GEOMETRY_COLUMNS.G_TABLE_NAME</code>.
     */
    public GeometryColumnsRecord setGTableName(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>information_schema.GEOMETRY_COLUMNS.G_TABLE_NAME</code>.
     */
    public String getGTableName() {
        return (String) get(6);
    }

    /**
     * Setter for
     * <code>information_schema.GEOMETRY_COLUMNS.G_GEOMETRY_COLUMN</code>.
     */
    public GeometryColumnsRecord setGGeometryColumn(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for
     * <code>information_schema.GEOMETRY_COLUMNS.G_GEOMETRY_COLUMN</code>.
     */
    public String getGGeometryColumn() {
        return (String) get(7);
    }

    /**
     * Setter for <code>information_schema.GEOMETRY_COLUMNS.STORAGE_TYPE</code>.
     */
    public GeometryColumnsRecord setStorageType(Byte value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>information_schema.GEOMETRY_COLUMNS.STORAGE_TYPE</code>.
     */
    public Byte getStorageType() {
        return (Byte) get(8);
    }

    /**
     * Setter for
     * <code>information_schema.GEOMETRY_COLUMNS.GEOMETRY_TYPE</code>.
     */
    public GeometryColumnsRecord setGeometryType(Integer value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for
     * <code>information_schema.GEOMETRY_COLUMNS.GEOMETRY_TYPE</code>.
     */
    public Integer getGeometryType() {
        return (Integer) get(9);
    }

    /**
     * Setter for
     * <code>information_schema.GEOMETRY_COLUMNS.COORD_DIMENSION</code>.
     */
    public GeometryColumnsRecord setCoordDimension(Byte value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for
     * <code>information_schema.GEOMETRY_COLUMNS.COORD_DIMENSION</code>.
     */
    public Byte getCoordDimension() {
        return (Byte) get(10);
    }

    /**
     * Setter for <code>information_schema.GEOMETRY_COLUMNS.MAX_PPR</code>.
     */
    public GeometryColumnsRecord setMaxPpr(Byte value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>information_schema.GEOMETRY_COLUMNS.MAX_PPR</code>.
     */
    public Byte getMaxPpr() {
        return (Byte) get(11);
    }

    /**
     * Setter for <code>information_schema.GEOMETRY_COLUMNS.SRID</code>.
     */
    public GeometryColumnsRecord setSrid(Short value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>information_schema.GEOMETRY_COLUMNS.SRID</code>.
     */
    public Short getSrid() {
        return (Short) get(12);
    }

    // -------------------------------------------------------------------------
    // Record13 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row13<String, String, String, String, String, String, String, String, Byte, Integer, Byte, Byte, Short> fieldsRow() {
        return (Row13) super.fieldsRow();
    }

    @Override
    public Row13<String, String, String, String, String, String, String, String, Byte, Integer, Byte, Byte, Short> valuesRow() {
        return (Row13) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return GeometryColumns.GEOMETRY_COLUMNS.F_TABLE_CATALOG;
    }

    @Override
    public Field<String> field2() {
        return GeometryColumns.GEOMETRY_COLUMNS.F_TABLE_SCHEMA;
    }

    @Override
    public Field<String> field3() {
        return GeometryColumns.GEOMETRY_COLUMNS.F_TABLE_NAME;
    }

    @Override
    public Field<String> field4() {
        return GeometryColumns.GEOMETRY_COLUMNS.F_GEOMETRY_COLUMN;
    }

    @Override
    public Field<String> field5() {
        return GeometryColumns.GEOMETRY_COLUMNS.G_TABLE_CATALOG;
    }

    @Override
    public Field<String> field6() {
        return GeometryColumns.GEOMETRY_COLUMNS.G_TABLE_SCHEMA;
    }

    @Override
    public Field<String> field7() {
        return GeometryColumns.GEOMETRY_COLUMNS.G_TABLE_NAME;
    }

    @Override
    public Field<String> field8() {
        return GeometryColumns.GEOMETRY_COLUMNS.G_GEOMETRY_COLUMN;
    }

    @Override
    public Field<Byte> field9() {
        return GeometryColumns.GEOMETRY_COLUMNS.STORAGE_TYPE;
    }

    @Override
    public Field<Integer> field10() {
        return GeometryColumns.GEOMETRY_COLUMNS.GEOMETRY_TYPE;
    }

    @Override
    public Field<Byte> field11() {
        return GeometryColumns.GEOMETRY_COLUMNS.COORD_DIMENSION;
    }

    @Override
    public Field<Byte> field12() {
        return GeometryColumns.GEOMETRY_COLUMNS.MAX_PPR;
    }

    @Override
    public Field<Short> field13() {
        return GeometryColumns.GEOMETRY_COLUMNS.SRID;
    }

    @Override
    public String component1() {
        return getFTableCatalog();
    }

    @Override
    public String component2() {
        return getFTableSchema();
    }

    @Override
    public String component3() {
        return getFTableName();
    }

    @Override
    public String component4() {
        return getFGeometryColumn();
    }

    @Override
    public String component5() {
        return getGTableCatalog();
    }

    @Override
    public String component6() {
        return getGTableSchema();
    }

    @Override
    public String component7() {
        return getGTableName();
    }

    @Override
    public String component8() {
        return getGGeometryColumn();
    }

    @Override
    public Byte component9() {
        return getStorageType();
    }

    @Override
    public Integer component10() {
        return getGeometryType();
    }

    @Override
    public Byte component11() {
        return getCoordDimension();
    }

    @Override
    public Byte component12() {
        return getMaxPpr();
    }

    @Override
    public Short component13() {
        return getSrid();
    }

    @Override
    public String value1() {
        return getFTableCatalog();
    }

    @Override
    public String value2() {
        return getFTableSchema();
    }

    @Override
    public String value3() {
        return getFTableName();
    }

    @Override
    public String value4() {
        return getFGeometryColumn();
    }

    @Override
    public String value5() {
        return getGTableCatalog();
    }

    @Override
    public String value6() {
        return getGTableSchema();
    }

    @Override
    public String value7() {
        return getGTableName();
    }

    @Override
    public String value8() {
        return getGGeometryColumn();
    }

    @Override
    public Byte value9() {
        return getStorageType();
    }

    @Override
    public Integer value10() {
        return getGeometryType();
    }

    @Override
    public Byte value11() {
        return getCoordDimension();
    }

    @Override
    public Byte value12() {
        return getMaxPpr();
    }

    @Override
    public Short value13() {
        return getSrid();
    }

    @Override
    public GeometryColumnsRecord value1(String value) {
        setFTableCatalog(value);
        return this;
    }

    @Override
    public GeometryColumnsRecord value2(String value) {
        setFTableSchema(value);
        return this;
    }

    @Override
    public GeometryColumnsRecord value3(String value) {
        setFTableName(value);
        return this;
    }

    @Override
    public GeometryColumnsRecord value4(String value) {
        setFGeometryColumn(value);
        return this;
    }

    @Override
    public GeometryColumnsRecord value5(String value) {
        setGTableCatalog(value);
        return this;
    }

    @Override
    public GeometryColumnsRecord value6(String value) {
        setGTableSchema(value);
        return this;
    }

    @Override
    public GeometryColumnsRecord value7(String value) {
        setGTableName(value);
        return this;
    }

    @Override
    public GeometryColumnsRecord value8(String value) {
        setGGeometryColumn(value);
        return this;
    }

    @Override
    public GeometryColumnsRecord value9(Byte value) {
        setStorageType(value);
        return this;
    }

    @Override
    public GeometryColumnsRecord value10(Integer value) {
        setGeometryType(value);
        return this;
    }

    @Override
    public GeometryColumnsRecord value11(Byte value) {
        setCoordDimension(value);
        return this;
    }

    @Override
    public GeometryColumnsRecord value12(Byte value) {
        setMaxPpr(value);
        return this;
    }

    @Override
    public GeometryColumnsRecord value13(Short value) {
        setSrid(value);
        return this;
    }

    @Override
    public GeometryColumnsRecord values(String value1, String value2, String value3, String value4, String value5, String value6, String value7, String value8, Byte value9, Integer value10, Byte value11, Byte value12, Short value13) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached GeometryColumnsRecord
     */
    public GeometryColumnsRecord() {
        super(GeometryColumns.GEOMETRY_COLUMNS);
    }

    /**
     * Create a detached, initialised GeometryColumnsRecord
     */
    public GeometryColumnsRecord(String fTableCatalog, String fTableSchema, String fTableName, String fGeometryColumn, String gTableCatalog, String gTableSchema, String gTableName, String gGeometryColumn, Byte storageType, Integer geometryType, Byte coordDimension, Byte maxPpr, Short srid) {
        super(GeometryColumns.GEOMETRY_COLUMNS);

        setFTableCatalog(fTableCatalog);
        setFTableSchema(fTableSchema);
        setFTableName(fTableName);
        setFGeometryColumn(fGeometryColumn);
        setGTableCatalog(gTableCatalog);
        setGTableSchema(gTableSchema);
        setGTableName(gTableName);
        setGGeometryColumn(gGeometryColumn);
        setStorageType(storageType);
        setGeometryType(geometryType);
        setCoordDimension(coordDimension);
        setMaxPpr(maxPpr);
        setSrid(srid);
    }

    /**
     * Create a detached, initialised GeometryColumnsRecord
     */
    public GeometryColumnsRecord(com.sweeti.lemon.information_schema.tables.pojos.GeometryColumns value) {
        super(GeometryColumns.GEOMETRY_COLUMNS);

        if (value != null) {
            setFTableCatalog(value.getFTableCatalog());
            setFTableSchema(value.getFTableSchema());
            setFTableName(value.getFTableName());
            setFGeometryColumn(value.getFGeometryColumn());
            setGTableCatalog(value.getGTableCatalog());
            setGTableSchema(value.getGTableSchema());
            setGTableName(value.getGTableName());
            setGGeometryColumn(value.getGGeometryColumn());
            setStorageType(value.getStorageType());
            setGeometryType(value.getGeometryType());
            setCoordDimension(value.getCoordDimension());
            setMaxPpr(value.getMaxPpr());
            setSrid(value.getSrid());
        }
    }
}
