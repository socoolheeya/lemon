/*
 * This file is generated by jOOQ.
 */
package com.sweeti.lemon.information_schema.tables.pojos;


import com.sweeti.lemon.information_schema.enums.InnodbSysTablesRowFormat;
import com.sweeti.lemon.information_schema.enums.InnodbSysTablesSpaceType;

import java.io.Serializable;

import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InnodbSysTables implements Serializable {

    private static final long serialVersionUID = 1L;

    private final ULong tableId;
    private final String name;
    private final Integer flag;
    private final UInteger nCols;
    private final UInteger space;
    private final InnodbSysTablesRowFormat rowFormat;
    private final UInteger zipPageSize;
    private final InnodbSysTablesSpaceType spaceType;

    public InnodbSysTables(InnodbSysTables value) {
        this.tableId = value.tableId;
        this.name = value.name;
        this.flag = value.flag;
        this.nCols = value.nCols;
        this.space = value.space;
        this.rowFormat = value.rowFormat;
        this.zipPageSize = value.zipPageSize;
        this.spaceType = value.spaceType;
    }

    public InnodbSysTables(
        ULong tableId,
        String name,
        Integer flag,
        UInteger nCols,
        UInteger space,
        InnodbSysTablesRowFormat rowFormat,
        UInteger zipPageSize,
        InnodbSysTablesSpaceType spaceType
    ) {
        this.tableId = tableId;
        this.name = name;
        this.flag = flag;
        this.nCols = nCols;
        this.space = space;
        this.rowFormat = rowFormat;
        this.zipPageSize = zipPageSize;
        this.spaceType = spaceType;
    }

    /**
     * Getter for <code>information_schema.INNODB_SYS_TABLES.TABLE_ID</code>.
     */
    public ULong getTableId() {
        return this.tableId;
    }

    /**
     * Getter for <code>information_schema.INNODB_SYS_TABLES.NAME</code>.
     */
    public String getName() {
        return this.name;
    }

    /**
     * Getter for <code>information_schema.INNODB_SYS_TABLES.FLAG</code>.
     */
    public Integer getFlag() {
        return this.flag;
    }

    /**
     * Getter for <code>information_schema.INNODB_SYS_TABLES.N_COLS</code>.
     */
    public UInteger getNCols() {
        return this.nCols;
    }

    /**
     * Getter for <code>information_schema.INNODB_SYS_TABLES.SPACE</code>.
     */
    public UInteger getSpace() {
        return this.space;
    }

    /**
     * Getter for <code>information_schema.INNODB_SYS_TABLES.ROW_FORMAT</code>.
     */
    public InnodbSysTablesRowFormat getRowFormat() {
        return this.rowFormat;
    }

    /**
     * Getter for
     * <code>information_schema.INNODB_SYS_TABLES.ZIP_PAGE_SIZE</code>.
     */
    public UInteger getZipPageSize() {
        return this.zipPageSize;
    }

    /**
     * Getter for <code>information_schema.INNODB_SYS_TABLES.SPACE_TYPE</code>.
     */
    public InnodbSysTablesSpaceType getSpaceType() {
        return this.spaceType;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final InnodbSysTables other = (InnodbSysTables) obj;
        if (this.tableId == null) {
            if (other.tableId != null)
                return false;
        }
        else if (!this.tableId.equals(other.tableId))
            return false;
        if (this.name == null) {
            if (other.name != null)
                return false;
        }
        else if (!this.name.equals(other.name))
            return false;
        if (this.flag == null) {
            if (other.flag != null)
                return false;
        }
        else if (!this.flag.equals(other.flag))
            return false;
        if (this.nCols == null) {
            if (other.nCols != null)
                return false;
        }
        else if (!this.nCols.equals(other.nCols))
            return false;
        if (this.space == null) {
            if (other.space != null)
                return false;
        }
        else if (!this.space.equals(other.space))
            return false;
        if (this.rowFormat == null) {
            if (other.rowFormat != null)
                return false;
        }
        else if (!this.rowFormat.equals(other.rowFormat))
            return false;
        if (this.zipPageSize == null) {
            if (other.zipPageSize != null)
                return false;
        }
        else if (!this.zipPageSize.equals(other.zipPageSize))
            return false;
        if (this.spaceType == null) {
            if (other.spaceType != null)
                return false;
        }
        else if (!this.spaceType.equals(other.spaceType))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.tableId == null) ? 0 : this.tableId.hashCode());
        result = prime * result + ((this.name == null) ? 0 : this.name.hashCode());
        result = prime * result + ((this.flag == null) ? 0 : this.flag.hashCode());
        result = prime * result + ((this.nCols == null) ? 0 : this.nCols.hashCode());
        result = prime * result + ((this.space == null) ? 0 : this.space.hashCode());
        result = prime * result + ((this.rowFormat == null) ? 0 : this.rowFormat.hashCode());
        result = prime * result + ((this.zipPageSize == null) ? 0 : this.zipPageSize.hashCode());
        result = prime * result + ((this.spaceType == null) ? 0 : this.spaceType.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("InnodbSysTables (");

        sb.append(tableId);
        sb.append(", ").append(name);
        sb.append(", ").append(flag);
        sb.append(", ").append(nCols);
        sb.append(", ").append(space);
        sb.append(", ").append(rowFormat);
        sb.append(", ").append(zipPageSize);
        sb.append(", ").append(spaceType);

        sb.append(")");
        return sb.toString();
    }
}
