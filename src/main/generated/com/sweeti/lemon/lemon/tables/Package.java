/*
 * This file is generated by jOOQ.
 */
package com.sweeti.lemon.lemon.tables;


import com.sweeti.lemon.lemon.Keys;
import com.sweeti.lemon.lemon.Lemon;
import com.sweeti.lemon.lemon.tables.records.PackageRecord;

import java.math.BigDecimal;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Package extends TableImpl<PackageRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>lemon.package</code>
     */
    public static final Package PACKAGE = new Package();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PackageRecord> getRecordType() {
        return PackageRecord.class;
    }

    /**
     * The column <code>lemon.package.package_id</code>. 패키지ID
     */
    public final TableField<PackageRecord, Long> PACKAGE_ID = createField(DSL.name("package_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "패키지ID");

    /**
     * The column <code>lemon.package.cost</code>. 일반요금
     */
    public final TableField<PackageRecord, BigDecimal> COST = createField(DSL.name("cost"), SQLDataType.DECIMAL(20, 5).defaultValue(DSL.field("NULL", SQLDataType.DECIMAL)), this, "일반요금");

    /**
     * The column <code>lemon.package.description</code>. 패키지 설명
     */
    public final TableField<PackageRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB.defaultValue(DSL.field("NULL", SQLDataType.CLOB)), this, "패키지 설명");

    /**
     * The column <code>lemon.package.discount_cost</code>. 할인금액
     */
    public final TableField<PackageRecord, BigDecimal> DISCOUNT_COST = createField(DSL.name("discount_cost"), SQLDataType.DECIMAL(20, 5).defaultValue(DSL.field("NULL", SQLDataType.DECIMAL)), this, "할인금액");

    /**
     * The column <code>lemon.package.name</code>. 패키지명
     */
    public final TableField<PackageRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(500).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "패키지명");

    /**
     * The column <code>lemon.package.room_status</code>. 예약상태
     */
    public final TableField<PackageRecord, String> ROOM_STATUS = createField(DSL.name("room_status"), SQLDataType.VARCHAR(50).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "예약상태");

    /**
     * The column <code>lemon.package.total_cost</code>. 총 요금
     */
    public final TableField<PackageRecord, BigDecimal> TOTAL_COST = createField(DSL.name("total_cost"), SQLDataType.DECIMAL(20, 5).defaultValue(DSL.field("NULL", SQLDataType.DECIMAL)), this, "총 요금");

    /**
     * The column <code>lemon.package.use_yn</code>. 사용여부
     */
    public final TableField<PackageRecord, String> USE_YN = createField(DSL.name("use_yn"), SQLDataType.CHAR(1).defaultValue(DSL.field("NULL", SQLDataType.CHAR)), this, "사용여부");

    /**
     * The column <code>lemon.package.booking_id</code>. 예약ID
     */
    public final TableField<PackageRecord, Long> BOOKING_ID = createField(DSL.name("booking_id"), SQLDataType.BIGINT.defaultValue(DSL.field("NULL", SQLDataType.BIGINT)), this, "예약ID");

    private Package(Name alias, Table<PackageRecord> aliased) {
        this(alias, aliased, null);
    }

    private Package(Name alias, Table<PackageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>lemon.package</code> table reference
     */
    public Package(String alias) {
        this(DSL.name(alias), PACKAGE);
    }

    /**
     * Create an aliased <code>lemon.package</code> table reference
     */
    public Package(Name alias) {
        this(alias, PACKAGE);
    }

    /**
     * Create a <code>lemon.package</code> table reference
     */
    public Package() {
        this(DSL.name("package"), null);
    }

    public <O extends Record> Package(Table<O> child, ForeignKey<O, PackageRecord> key) {
        super(child, key, PACKAGE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Lemon.LEMON;
    }

    @Override
    public Identity<PackageRecord, Long> getIdentity() {
        return (Identity<PackageRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<PackageRecord> getPrimaryKey() {
        return Keys.KEY_PACKAGE_PRIMARY;
    }

    @Override
    public Package as(String alias) {
        return new Package(DSL.name(alias), this);
    }

    @Override
    public Package as(Name alias) {
        return new Package(alias, this);
    }

    @Override
    public Package as(Table<?> alias) {
        return new Package(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Package rename(String name) {
        return new Package(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Package rename(Name name) {
        return new Package(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Package rename(Table<?> name) {
        return new Package(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, BigDecimal, String, BigDecimal, String, String, BigDecimal, String, Long> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super Long, ? super BigDecimal, ? super String, ? super BigDecimal, ? super String, ? super String, ? super BigDecimal, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super Long, ? super BigDecimal, ? super String, ? super BigDecimal, ? super String, ? super String, ? super BigDecimal, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
