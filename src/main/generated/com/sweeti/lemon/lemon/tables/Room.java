/*
 * This file is generated by jOOQ.
 */
package com.sweeti.lemon.lemon.tables;


import com.sweeti.lemon.lemon.Keys;
import com.sweeti.lemon.lemon.Lemon;
import com.sweeti.lemon.lemon.tables.records.RoomRecord;

import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function16;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row16;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Room extends TableImpl<RoomRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>lemon.room</code>
     */
    public static final Room ROOM = new Room();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RoomRecord> getRecordType() {
        return RoomRecord.class;
    }

    /**
     * The column <code>lemon.room.room_id</code>. Room ID
     */
    public final TableField<RoomRecord, Long> ROOM_ID = createField(DSL.name("room_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "Room ID");

    /**
     * The column <code>lemon.room.adult_count</code>. 어른 인원 수
     */
    public final TableField<RoomRecord, UByte> ADULT_COUNT = createField(DSL.name("adult_count"), SQLDataType.TINYINTUNSIGNED.defaultValue(DSL.field("NULL", SQLDataType.TINYINTUNSIGNED)), this, "어른 인원 수");

    /**
     * The column <code>lemon.room.bathroom_count</code>. 욕실 수
     */
    public final TableField<RoomRecord, UByte> BATHROOM_COUNT = createField(DSL.name("bathroom_count"), SQLDataType.TINYINTUNSIGNED.defaultValue(DSL.field("NULL", SQLDataType.TINYINTUNSIGNED)), this, "욕실 수");

    /**
     * The column <code>lemon.room.children_count</code>. 어린이 인원 수
     */
    public final TableField<RoomRecord, UByte> CHILDREN_COUNT = createField(DSL.name("children_count"), SQLDataType.TINYINTUNSIGNED.defaultValue(DSL.field("NULL", SQLDataType.TINYINTUNSIGNED)), this, "어린이 인원 수");

    /**
     * The column <code>lemon.room.created_at</code>. 생성일
     */
    public final TableField<RoomRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("NULL", SQLDataType.LOCALDATETIME)), this, "생성일");

    /**
     * The column <code>lemon.room.careted_by</code>. 생성자
     */
    public final TableField<RoomRecord, String> CARETED_BY = createField(DSL.name("careted_by"), SQLDataType.VARCHAR(2000).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "생성자");

    /**
     * The column <code>lemon.room.is_smoking</code>. 흡연 여부
     */
    public final TableField<RoomRecord, String> IS_SMOKING = createField(DSL.name("is_smoking"), SQLDataType.CHAR(1).defaultValue(DSL.field("NULL", SQLDataType.CHAR)), this, "흡연 여부");

    /**
     * The column <code>lemon.room.living_count</code>. 거실 수
     */
    public final TableField<RoomRecord, UByte> LIVING_COUNT = createField(DSL.name("living_count"), SQLDataType.TINYINTUNSIGNED.defaultValue(DSL.field("NULL", SQLDataType.TINYINTUNSIGNED)), this, "거실 수");

    /**
     * The column <code>lemon.room.max_occupancy</code>. 최대 인원
     */
    public final TableField<RoomRecord, UByte> MAX_OCCUPANCY = createField(DSL.name("max_occupancy"), SQLDataType.TINYINTUNSIGNED.defaultValue(DSL.field("NULL", SQLDataType.TINYINTUNSIGNED)), this, "최대 인원");

    /**
     * The column <code>lemon.room.min_occupancy</code>. 최소 인원
     */
    public final TableField<RoomRecord, UByte> MIN_OCCUPANCY = createField(DSL.name("min_occupancy"), SQLDataType.TINYINTUNSIGNED.defaultValue(DSL.field("NULL", SQLDataType.TINYINTUNSIGNED)), this, "최소 인원");

    /**
     * The column <code>lemon.room.name</code>. 방 이름
     */
    public final TableField<RoomRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(500).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "방 이름");

    /**
     * The column <code>lemon.room.room_count</code>. 방 갯수
     */
    public final TableField<RoomRecord, UByte> ROOM_COUNT = createField(DSL.name("room_count"), SQLDataType.TINYINTUNSIGNED.defaultValue(DSL.field("NULL", SQLDataType.TINYINTUNSIGNED)), this, "방 갯수");

    /**
     * The column <code>lemon.room.room_view</code>. 뷰 종류
     */
    public final TableField<RoomRecord, String> ROOM_VIEW = createField(DSL.name("room_view"), SQLDataType.VARCHAR(100).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "뷰 종류");

    /**
     * The column <code>lemon.room.updated_at</code>. 수정일
     */
    public final TableField<RoomRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("NULL", SQLDataType.LOCALDATETIME)), this, "수정일");

    /**
     * The column <code>lemon.room.updated_by</code>. 수정자
     */
    public final TableField<RoomRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.VARCHAR(2000).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "수정자");

    /**
     * The column <code>lemon.room.use_yn</code>. 사용여부
     */
    public final TableField<RoomRecord, String> USE_YN = createField(DSL.name("use_yn"), SQLDataType.CHAR(1).defaultValue(DSL.field("NULL", SQLDataType.CHAR)), this, "사용여부");

    private Room(Name alias, Table<RoomRecord> aliased) {
        this(alias, aliased, null);
    }

    private Room(Name alias, Table<RoomRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>lemon.room</code> table reference
     */
    public Room(String alias) {
        this(DSL.name(alias), ROOM);
    }

    /**
     * Create an aliased <code>lemon.room</code> table reference
     */
    public Room(Name alias) {
        this(alias, ROOM);
    }

    /**
     * Create a <code>lemon.room</code> table reference
     */
    public Room() {
        this(DSL.name("room"), null);
    }

    public <O extends Record> Room(Table<O> child, ForeignKey<O, RoomRecord> key) {
        super(child, key, ROOM);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Lemon.LEMON;
    }

    @Override
    public Identity<RoomRecord, Long> getIdentity() {
        return (Identity<RoomRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<RoomRecord> getPrimaryKey() {
        return Keys.KEY_ROOM_PRIMARY;
    }

    @Override
    public Room as(String alias) {
        return new Room(DSL.name(alias), this);
    }

    @Override
    public Room as(Name alias) {
        return new Room(alias, this);
    }

    @Override
    public Room as(Table<?> alias) {
        return new Room(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Room rename(String name) {
        return new Room(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Room rename(Name name) {
        return new Room(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Room rename(Table<?> name) {
        return new Room(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row16 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row16<Long, UByte, UByte, UByte, LocalDateTime, String, String, UByte, UByte, UByte, String, UByte, String, LocalDateTime, String, String> fieldsRow() {
        return (Row16) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function16<? super Long, ? super UByte, ? super UByte, ? super UByte, ? super LocalDateTime, ? super String, ? super String, ? super UByte, ? super UByte, ? super UByte, ? super String, ? super UByte, ? super String, ? super LocalDateTime, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function16<? super Long, ? super UByte, ? super UByte, ? super UByte, ? super LocalDateTime, ? super String, ? super String, ? super UByte, ? super UByte, ? super UByte, ? super String, ? super UByte, ? super String, ? super LocalDateTime, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
