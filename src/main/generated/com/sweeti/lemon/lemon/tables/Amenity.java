/*
 * This file is generated by jOOQ.
 */
package com.sweeti.lemon.lemon.tables;


import com.sweeti.lemon.lemon.Keys;
import com.sweeti.lemon.lemon.Lemon;
import com.sweeti.lemon.lemon.tables.records.AmenityRecord;

import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Amenity extends TableImpl<AmenityRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>lemon.amenity</code>
     */
    public static final Amenity AMENITY = new Amenity();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AmenityRecord> getRecordType() {
        return AmenityRecord.class;
    }

    /**
     * The column <code>lemon.amenity.amenity_id</code>. 편의시설ID
     */
    public final TableField<AmenityRecord, Long> AMENITY_ID = createField(DSL.name("amenity_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "편의시설ID");

    /**
     * The column <code>lemon.amenity.created_at</code>. 생성일
     */
    public final TableField<AmenityRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("NULL", SQLDataType.LOCALDATETIME)), this, "생성일");

    /**
     * The column <code>lemon.amenity.careted_by</code>. 생성자
     */
    public final TableField<AmenityRecord, String> CARETED_BY = createField(DSL.name("careted_by"), SQLDataType.VARCHAR(2000).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "생성자");

    /**
     * The column <code>lemon.amenity.name</code>. 편의시설명
     */
    public final TableField<AmenityRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(500).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "편의시설명");

    /**
     * The column <code>lemon.amenity.type</code>. 편의시설 타입
     */
    public final TableField<AmenityRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(100).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "편의시설 타입");

    /**
     * The column <code>lemon.amenity.updated_at</code>. 수정일
     */
    public final TableField<AmenityRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("NULL", SQLDataType.LOCALDATETIME)), this, "수정일");

    /**
     * The column <code>lemon.amenity.updated_by</code>. 수정자
     */
    public final TableField<AmenityRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.VARCHAR(2000).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "수정자");

    private Amenity(Name alias, Table<AmenityRecord> aliased) {
        this(alias, aliased, null);
    }

    private Amenity(Name alias, Table<AmenityRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>lemon.amenity</code> table reference
     */
    public Amenity(String alias) {
        this(DSL.name(alias), AMENITY);
    }

    /**
     * Create an aliased <code>lemon.amenity</code> table reference
     */
    public Amenity(Name alias) {
        this(alias, AMENITY);
    }

    /**
     * Create a <code>lemon.amenity</code> table reference
     */
    public Amenity() {
        this(DSL.name("amenity"), null);
    }

    public <O extends Record> Amenity(Table<O> child, ForeignKey<O, AmenityRecord> key) {
        super(child, key, AMENITY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Lemon.LEMON;
    }

    @Override
    public Identity<AmenityRecord, Long> getIdentity() {
        return (Identity<AmenityRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AmenityRecord> getPrimaryKey() {
        return Keys.KEY_AMENITY_PRIMARY;
    }

    @Override
    public Amenity as(String alias) {
        return new Amenity(DSL.name(alias), this);
    }

    @Override
    public Amenity as(Name alias) {
        return new Amenity(alias, this);
    }

    @Override
    public Amenity as(Table<?> alias) {
        return new Amenity(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Amenity rename(String name) {
        return new Amenity(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Amenity rename(Name name) {
        return new Amenity(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Amenity rename(Table<?> name) {
        return new Amenity(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, LocalDateTime, String, String, String, LocalDateTime, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Long, ? super LocalDateTime, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Long, ? super LocalDateTime, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
