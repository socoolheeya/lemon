/*
 * This file is generated by jOOQ.
 */
package com.sweeti.lemon.lemon.tables;


import com.sweeti.lemon.lemon.Keys;
import com.sweeti.lemon.lemon.Lemon;
import com.sweeti.lemon.lemon.tables.records.PackageOptionMealRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PackageOptionMeal extends TableImpl<PackageOptionMealRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>lemon.package_option_meal</code>
     */
    public static final PackageOptionMeal PACKAGE_OPTION_MEAL = new PackageOptionMeal();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PackageOptionMealRecord> getRecordType() {
        return PackageOptionMealRecord.class;
    }

    /**
     * The column <code>lemon.package_option_meal.package_option_meal_id</code>.
     * 패키지옵션식사_ID
     */
    public final TableField<PackageOptionMealRecord, Long> PACKAGE_OPTION_MEAL_ID = createField(DSL.name("package_option_meal_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "패키지옵션식사_ID");

    /**
     * The column <code>lemon.package_option_meal.meal_type</code>. 식사 타입
     */
    public final TableField<PackageOptionMealRecord, String> MEAL_TYPE = createField(DSL.name("meal_type"), SQLDataType.VARCHAR(100).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "식사 타입");

    /**
     * The column <code>lemon.package_option_meal.package_option_id</code>.
     * 패키지옵션ID
     */
    public final TableField<PackageOptionMealRecord, Long> PACKAGE_OPTION_ID = createField(DSL.name("package_option_id"), SQLDataType.BIGINT.defaultValue(DSL.field("NULL", SQLDataType.BIGINT)), this, "패키지옵션ID");

    private PackageOptionMeal(Name alias, Table<PackageOptionMealRecord> aliased) {
        this(alias, aliased, null);
    }

    private PackageOptionMeal(Name alias, Table<PackageOptionMealRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>lemon.package_option_meal</code> table reference
     */
    public PackageOptionMeal(String alias) {
        this(DSL.name(alias), PACKAGE_OPTION_MEAL);
    }

    /**
     * Create an aliased <code>lemon.package_option_meal</code> table reference
     */
    public PackageOptionMeal(Name alias) {
        this(alias, PACKAGE_OPTION_MEAL);
    }

    /**
     * Create a <code>lemon.package_option_meal</code> table reference
     */
    public PackageOptionMeal() {
        this(DSL.name("package_option_meal"), null);
    }

    public <O extends Record> PackageOptionMeal(Table<O> child, ForeignKey<O, PackageOptionMealRecord> key) {
        super(child, key, PACKAGE_OPTION_MEAL);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Lemon.LEMON;
    }

    @Override
    public Identity<PackageOptionMealRecord, Long> getIdentity() {
        return (Identity<PackageOptionMealRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<PackageOptionMealRecord> getPrimaryKey() {
        return Keys.KEY_PACKAGE_OPTION_MEAL_PRIMARY;
    }

    @Override
    public PackageOptionMeal as(String alias) {
        return new PackageOptionMeal(DSL.name(alias), this);
    }

    @Override
    public PackageOptionMeal as(Name alias) {
        return new PackageOptionMeal(alias, this);
    }

    @Override
    public PackageOptionMeal as(Table<?> alias) {
        return new PackageOptionMeal(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PackageOptionMeal rename(String name) {
        return new PackageOptionMeal(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PackageOptionMeal rename(Name name) {
        return new PackageOptionMeal(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PackageOptionMeal rename(Table<?> name) {
        return new PackageOptionMeal(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Long, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Long, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
