/*
 * This file is generated by jOOQ.
 */
package com.sweeti.lemon.lemon.tables;


import com.sweeti.lemon.lemon.Keys;
import com.sweeti.lemon.lemon.Lemon;
import com.sweeti.lemon.lemon.tables.records.AccommodationRecord;

import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function16;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row16;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Accommodation extends TableImpl<AccommodationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>lemon.accommodation</code>
     */
    public static final Accommodation ACCOMMODATION = new Accommodation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccommodationRecord> getRecordType() {
        return AccommodationRecord.class;
    }

    /**
     * The column <code>lemon.accommodation.accommodation_id</code>. 시설ID
     */
    public final TableField<AccommodationRecord, Long> ACCOMMODATION_ID = createField(DSL.name("accommodation_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "시설ID");

    /**
     * The column <code>lemon.accommodation.address</code>. 주소
     */
    public final TableField<AccommodationRecord, String> ADDRESS = createField(DSL.name("address"), SQLDataType.VARCHAR(1000).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "주소");

    /**
     * The column <code>lemon.accommodation.basement_count</code>. 지하층 수
     */
    public final TableField<AccommodationRecord, UInteger> BASEMENT_COUNT = createField(DSL.name("basement_count"), SQLDataType.INTEGERUNSIGNED.defaultValue(DSL.field("NULL", SQLDataType.INTEGERUNSIGNED)), this, "지하층 수");

    /**
     * The column <code>lemon.accommodation.brand_name</code>. 브랜드명
     */
    public final TableField<AccommodationRecord, String> BRAND_NAME = createField(DSL.name("brand_name"), SQLDataType.VARCHAR(500).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "브랜드명");

    /**
     * The column <code>lemon.accommodation.chain_name</code>. 체인명
     */
    public final TableField<AccommodationRecord, String> CHAIN_NAME = createField(DSL.name("chain_name"), SQLDataType.VARCHAR(500).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "체인명");

    /**
     * The column <code>lemon.accommodation.check_in</code>. 체크인
     */
    public final TableField<AccommodationRecord, LocalDateTime> CHECK_IN = createField(DSL.name("check_in"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("NULL", SQLDataType.LOCALDATETIME)), this, "체크인");

    /**
     * The column <code>lemon.accommodation.check_out</code>. 체크아웃
     */
    public final TableField<AccommodationRecord, LocalDateTime> CHECK_OUT = createField(DSL.name("check_out"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("NULL", SQLDataType.LOCALDATETIME)), this, "체크아웃");

    /**
     * The column <code>lemon.accommodation.contact</code>. 연락처
     */
    public final TableField<AccommodationRecord, String> CONTACT = createField(DSL.name("contact"), SQLDataType.VARCHAR(50).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "연락처");

    /**
     * The column <code>lemon.accommodation.created_at</code>. 생성일
     */
    public final TableField<AccommodationRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("NULL", SQLDataType.LOCALDATETIME)), this, "생성일");

    /**
     * The column <code>lemon.accommodation.careted_by</code>. 생성자
     */
    public final TableField<AccommodationRecord, String> CARETED_BY = createField(DSL.name("careted_by"), SQLDataType.VARCHAR(2000).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "생성자");

    /**
     * The column <code>lemon.accommodation.floor_count</code>. 층 수
     */
    public final TableField<AccommodationRecord, UInteger> FLOOR_COUNT = createField(DSL.name("floor_count"), SQLDataType.INTEGERUNSIGNED.defaultValue(DSL.field("NULL", SQLDataType.INTEGERUNSIGNED)), this, "층 수");

    /**
     * The column <code>lemon.accommodation.name</code>. 시설명
     */
    public final TableField<AccommodationRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(500).nullable(false), this, "시설명");

    /**
     * The column <code>lemon.accommodation.rating</code>. 별점점수
     */
    public final TableField<AccommodationRecord, Double> RATING = createField(DSL.name("rating"), SQLDataType.DOUBLE.defaultValue(DSL.field("NULL", SQLDataType.DOUBLE)), this, "별점점수");

    /**
     * The column <code>lemon.accommodation.room_count</code>. 방 수
     */
    public final TableField<AccommodationRecord, UInteger> ROOM_COUNT = createField(DSL.name("room_count"), SQLDataType.INTEGERUNSIGNED.defaultValue(DSL.field("NULL", SQLDataType.INTEGERUNSIGNED)), this, "방 수");

    /**
     * The column <code>lemon.accommodation.updated_at</code>. 수정일
     */
    public final TableField<AccommodationRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("NULL", SQLDataType.LOCALDATETIME)), this, "수정일");

    /**
     * The column <code>lemon.accommodation.updated_by</code>. 수정자
     */
    public final TableField<AccommodationRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.VARCHAR(2000).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "수정자");

    private Accommodation(Name alias, Table<AccommodationRecord> aliased) {
        this(alias, aliased, null);
    }

    private Accommodation(Name alias, Table<AccommodationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>lemon.accommodation</code> table reference
     */
    public Accommodation(String alias) {
        this(DSL.name(alias), ACCOMMODATION);
    }

    /**
     * Create an aliased <code>lemon.accommodation</code> table reference
     */
    public Accommodation(Name alias) {
        this(alias, ACCOMMODATION);
    }

    /**
     * Create a <code>lemon.accommodation</code> table reference
     */
    public Accommodation() {
        this(DSL.name("accommodation"), null);
    }

    public <O extends Record> Accommodation(Table<O> child, ForeignKey<O, AccommodationRecord> key) {
        super(child, key, ACCOMMODATION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Lemon.LEMON;
    }

    @Override
    public Identity<AccommodationRecord, Long> getIdentity() {
        return (Identity<AccommodationRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AccommodationRecord> getPrimaryKey() {
        return Keys.KEY_ACCOMMODATION_PRIMARY;
    }

    @Override
    public Accommodation as(String alias) {
        return new Accommodation(DSL.name(alias), this);
    }

    @Override
    public Accommodation as(Name alias) {
        return new Accommodation(alias, this);
    }

    @Override
    public Accommodation as(Table<?> alias) {
        return new Accommodation(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Accommodation rename(String name) {
        return new Accommodation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Accommodation rename(Name name) {
        return new Accommodation(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Accommodation rename(Table<?> name) {
        return new Accommodation(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row16 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row16<Long, String, UInteger, String, String, LocalDateTime, LocalDateTime, String, LocalDateTime, String, UInteger, String, Double, UInteger, LocalDateTime, String> fieldsRow() {
        return (Row16) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function16<? super Long, ? super String, ? super UInteger, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? super UInteger, ? super String, ? super Double, ? super UInteger, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function16<? super Long, ? super String, ? super UInteger, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? super UInteger, ? super String, ? super Double, ? super UInteger, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
