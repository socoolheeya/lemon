/*
 * This file is generated by jOOQ.
 */
package com.sweeti.lemon.lemon.tables;


import com.sweeti.lemon.lemon.Keys;
import com.sweeti.lemon.lemon.Lemon;
import com.sweeti.lemon.lemon.tables.records.BookingRecord;

import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function11;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Booking extends TableImpl<BookingRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>lemon.booking</code>
     */
    public static final Booking BOOKING = new Booking();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BookingRecord> getRecordType() {
        return BookingRecord.class;
    }

    /**
     * The column <code>lemon.booking.booking_id</code>. 예약ID
     */
    public final TableField<BookingRecord, Long> BOOKING_ID = createField(DSL.name("booking_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "예약ID");

    /**
     * The column <code>lemon.booking.booked_at</code>. 예약일자
     */
    public final TableField<BookingRecord, LocalDateTime> BOOKED_AT = createField(DSL.name("booked_at"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("NULL", SQLDataType.LOCALDATETIME)), this, "예약일자");

    /**
     * The column <code>lemon.booking.check_in</code>. 체크인
     */
    public final TableField<BookingRecord, LocalDateTime> CHECK_IN = createField(DSL.name("check_in"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("NULL", SQLDataType.LOCALDATETIME)), this, "체크인");

    /**
     * The column <code>lemon.booking.check_out</code>. 체크아웃
     */
    public final TableField<BookingRecord, LocalDateTime> CHECK_OUT = createField(DSL.name("check_out"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("NULL", SQLDataType.LOCALDATETIME)), this, "체크아웃");

    /**
     * The column <code>lemon.booking.created_at</code>. 생성일
     */
    public final TableField<BookingRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("NULL", SQLDataType.LOCALDATETIME)), this, "생성일");

    /**
     * The column <code>lemon.booking.careted_by</code>. 생성자
     */
    public final TableField<BookingRecord, String> CARETED_BY = createField(DSL.name("careted_by"), SQLDataType.VARCHAR(2000).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "생성자");

    /**
     * The column <code>lemon.booking.is_fixed</code>. 확정여부
     */
    public final TableField<BookingRecord, String> IS_FIXED = createField(DSL.name("is_fixed"), SQLDataType.VARCHAR(1).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "확정여부");

    /**
     * The column <code>lemon.booking.booking_name</code>. 예약 객실명
     */
    public final TableField<BookingRecord, Long> BOOKING_NAME = createField(DSL.name("booking_name"), SQLDataType.BIGINT.defaultValue(DSL.field("NULL", SQLDataType.BIGINT)), this, "예약 객실명");

    /**
     * The column <code>lemon.booking.notice</code>. 알림사항
     */
    public final TableField<BookingRecord, String> NOTICE = createField(DSL.name("notice"), SQLDataType.VARCHAR(2000).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "알림사항");

    /**
     * The column <code>lemon.booking.updated_at</code>. 수정일
     */
    public final TableField<BookingRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("NULL", SQLDataType.LOCALDATETIME)), this, "수정일");

    /**
     * The column <code>lemon.booking.updated_by</code>. 수정자
     */
    public final TableField<BookingRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.VARCHAR(2000).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "수정자");

    private Booking(Name alias, Table<BookingRecord> aliased) {
        this(alias, aliased, null);
    }

    private Booking(Name alias, Table<BookingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>lemon.booking</code> table reference
     */
    public Booking(String alias) {
        this(DSL.name(alias), BOOKING);
    }

    /**
     * Create an aliased <code>lemon.booking</code> table reference
     */
    public Booking(Name alias) {
        this(alias, BOOKING);
    }

    /**
     * Create a <code>lemon.booking</code> table reference
     */
    public Booking() {
        this(DSL.name("booking"), null);
    }

    public <O extends Record> Booking(Table<O> child, ForeignKey<O, BookingRecord> key) {
        super(child, key, BOOKING);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Lemon.LEMON;
    }

    @Override
    public Identity<BookingRecord, Long> getIdentity() {
        return (Identity<BookingRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<BookingRecord> getPrimaryKey() {
        return Keys.KEY_BOOKING_PRIMARY;
    }

    @Override
    public Booking as(String alias) {
        return new Booking(DSL.name(alias), this);
    }

    @Override
    public Booking as(Name alias) {
        return new Booking(alias, this);
    }

    @Override
    public Booking as(Table<?> alias) {
        return new Booking(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Booking rename(String name) {
        return new Booking(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Booking rename(Name name) {
        return new Booking(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Booking rename(Table<?> name) {
        return new Booking(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Long, LocalDateTime, LocalDateTime, LocalDateTime, LocalDateTime, String, String, Long, String, LocalDateTime, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function11<? super Long, ? super LocalDateTime, ? super LocalDateTime, ? super LocalDateTime, ? super LocalDateTime, ? super String, ? super String, ? super Long, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function11<? super Long, ? super LocalDateTime, ? super LocalDateTime, ? super LocalDateTime, ? super LocalDateTime, ? super String, ? super String, ? super Long, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
