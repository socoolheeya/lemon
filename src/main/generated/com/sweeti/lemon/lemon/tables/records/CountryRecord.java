/*
 * This file is generated by jOOQ.
 */
package com.sweeti.lemon.lemon.tables.records;


import com.sweeti.lemon.lemon.tables.Country;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CountryRecord extends UpdatableRecordImpl<CountryRecord> implements Record2<Long, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>lemon.country.country_id</code>. 국가ID
     */
    public CountryRecord setCountryId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>lemon.country.country_id</code>. 국가ID
     */
    public Long getCountryId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>lemon.country.name</code>. 국가명
     */
    public CountryRecord setName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>lemon.country.name</code>. 국가명
     */
    public String getName() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<Long, String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Country.COUNTRY.COUNTRY_ID;
    }

    @Override
    public Field<String> field2() {
        return Country.COUNTRY.NAME;
    }

    @Override
    public Long component1() {
        return getCountryId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public Long value1() {
        return getCountryId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public CountryRecord value1(Long value) {
        setCountryId(value);
        return this;
    }

    @Override
    public CountryRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public CountryRecord values(Long value1, String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CountryRecord
     */
    public CountryRecord() {
        super(Country.COUNTRY);
    }

    /**
     * Create a detached, initialised CountryRecord
     */
    public CountryRecord(Long countryId, String name) {
        super(Country.COUNTRY);

        setCountryId(countryId);
        setName(name);
    }

    /**
     * Create a detached, initialised CountryRecord
     */
    public CountryRecord(com.sweeti.lemon.lemon.tables.pojos.Country value) {
        super(Country.COUNTRY);

        if (value != null) {
            setCountryId(value.getCountryId());
            setName(value.getName());
        }
    }
}
