/*
 * This file is generated by jOOQ.
 */
package com.sweeti.lemon.lemon.tables;


import com.sweeti.lemon.lemon.Keys;
import com.sweeti.lemon.lemon.Lemon;
import com.sweeti.lemon.lemon.tables.records.BillingRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function16;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row16;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Billing extends TableImpl<BillingRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>lemon.billing</code>
     */
    public static final Billing BILLING = new Billing();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BillingRecord> getRecordType() {
        return BillingRecord.class;
    }

    /**
     * The column <code>lemon.billing.billing_id</code>. 정산ID
     */
    public final TableField<BillingRecord, Long> BILLING_ID = createField(DSL.name("billing_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "정산ID");

    /**
     * The column <code>lemon.billing.acommodation_id</code>. 숙박시설ID
     */
    public final TableField<BillingRecord, Long> ACOMMODATION_ID = createField(DSL.name("acommodation_id"), SQLDataType.BIGINT.nullable(false), this, "숙박시설ID");

    /**
     * The column <code>lemon.billing.accommodation_name</code>. 숙박시설명
     */
    public final TableField<BillingRecord, String> ACCOMMODATION_NAME = createField(DSL.name("accommodation_name"), SQLDataType.VARCHAR(500).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "숙박시설명");

    /**
     * The column <code>lemon.billing.additional_cost</code>. 추가금액
     */
    public final TableField<BillingRecord, BigDecimal> ADDITIONAL_COST = createField(DSL.name("additional_cost"), SQLDataType.DECIMAL(20, 5).defaultValue(DSL.field("NULL", SQLDataType.DECIMAL)), this, "추가금액");

    /**
     * The column <code>lemon.billing.billing_additional_cost</code>. 정산 추가금액
     */
    public final TableField<BillingRecord, BigDecimal> BILLING_ADDITIONAL_COST = createField(DSL.name("billing_additional_cost"), SQLDataType.DECIMAL(20, 5).defaultValue(DSL.field("NULL", SQLDataType.DECIMAL)), this, "정산 추가금액");

    /**
     * The column <code>lemon.billing.billing_cost</code>. 정산금액
     */
    public final TableField<BillingRecord, BigDecimal> BILLING_COST = createField(DSL.name("billing_cost"), SQLDataType.DECIMAL(20, 5).defaultValue(DSL.field("NULL", SQLDataType.DECIMAL)), this, "정산금액");

    /**
     * The column <code>lemon.billing.billing_deduction_cost</code>. 정산 차감금액
     */
    public final TableField<BillingRecord, BigDecimal> BILLING_DEDUCTION_COST = createField(DSL.name("billing_deduction_cost"), SQLDataType.DECIMAL(20, 5).defaultValue(DSL.field("NULL", SQLDataType.DECIMAL)), this, "정산 차감금액");

    /**
     * The column <code>lemon.billing.billing_due_date</code>. 정산예정일
     */
    public final TableField<BillingRecord, LocalDateTime> BILLING_DUE_DATE = createField(DSL.name("billing_due_date"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("NULL", SQLDataType.LOCALDATETIME)), this, "정산예정일");

    /**
     * The column <code>lemon.billing.cancel_fee</code>. 취소 수수료
     */
    public final TableField<BillingRecord, BigDecimal> CANCEL_FEE = createField(DSL.name("cancel_fee"), SQLDataType.DECIMAL(20, 5).defaultValue(DSL.field("NULL", SQLDataType.DECIMAL)), this, "취소 수수료");

    /**
     * The column <code>lemon.billing.created_at</code>. 생성일
     */
    public final TableField<BillingRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("NULL", SQLDataType.LOCALDATETIME)), this, "생성일");

    /**
     * The column <code>lemon.billing.careted_by</code>. 생성자
     */
    public final TableField<BillingRecord, String> CARETED_BY = createField(DSL.name("careted_by"), SQLDataType.VARCHAR(2000).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "생성자");

    /**
     * The column <code>lemon.billing.discount_cost</code>. 할인금액
     */
    public final TableField<BillingRecord, BigDecimal> DISCOUNT_COST = createField(DSL.name("discount_cost"), SQLDataType.DECIMAL(20, 5).defaultValue(DSL.field("NULL", SQLDataType.DECIMAL)), this, "할인금액");

    /**
     * The column <code>lemon.billing.fee</code>. 수수료
     */
    public final TableField<BillingRecord, BigDecimal> FEE = createField(DSL.name("fee"), SQLDataType.DECIMAL(20, 5).defaultValue(DSL.field("NULL", SQLDataType.DECIMAL)), this, "수수료");

    /**
     * The column <code>lemon.billing.selling_cost</code>. 판매금액
     */
    public final TableField<BillingRecord, BigDecimal> SELLING_COST = createField(DSL.name("selling_cost"), SQLDataType.DECIMAL(20, 5).defaultValue(DSL.field("NULL", SQLDataType.DECIMAL)), this, "판매금액");

    /**
     * The column <code>lemon.billing.updated_at</code>. 수정일
     */
    public final TableField<BillingRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("NULL", SQLDataType.LOCALDATETIME)), this, "수정일");

    /**
     * The column <code>lemon.billing.updated_by</code>. 수정자
     */
    public final TableField<BillingRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.VARCHAR(2000).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "수정자");

    private Billing(Name alias, Table<BillingRecord> aliased) {
        this(alias, aliased, null);
    }

    private Billing(Name alias, Table<BillingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>lemon.billing</code> table reference
     */
    public Billing(String alias) {
        this(DSL.name(alias), BILLING);
    }

    /**
     * Create an aliased <code>lemon.billing</code> table reference
     */
    public Billing(Name alias) {
        this(alias, BILLING);
    }

    /**
     * Create a <code>lemon.billing</code> table reference
     */
    public Billing() {
        this(DSL.name("billing"), null);
    }

    public <O extends Record> Billing(Table<O> child, ForeignKey<O, BillingRecord> key) {
        super(child, key, BILLING);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Lemon.LEMON;
    }

    @Override
    public Identity<BillingRecord, Long> getIdentity() {
        return (Identity<BillingRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<BillingRecord> getPrimaryKey() {
        return Keys.KEY_BILLING_PRIMARY;
    }

    @Override
    public Billing as(String alias) {
        return new Billing(DSL.name(alias), this);
    }

    @Override
    public Billing as(Name alias) {
        return new Billing(alias, this);
    }

    @Override
    public Billing as(Table<?> alias) {
        return new Billing(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Billing rename(String name) {
        return new Billing(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Billing rename(Name name) {
        return new Billing(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Billing rename(Table<?> name) {
        return new Billing(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row16 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row16<Long, Long, String, BigDecimal, BigDecimal, BigDecimal, BigDecimal, LocalDateTime, BigDecimal, LocalDateTime, String, BigDecimal, BigDecimal, BigDecimal, LocalDateTime, String> fieldsRow() {
        return (Row16) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function16<? super Long, ? super Long, ? super String, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super LocalDateTime, ? super BigDecimal, ? super LocalDateTime, ? super String, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function16<? super Long, ? super Long, ? super String, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super LocalDateTime, ? super BigDecimal, ? super LocalDateTime, ? super String, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
